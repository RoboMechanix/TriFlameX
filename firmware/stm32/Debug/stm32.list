
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005f8  080005f8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005f8  080005f8  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005f8  080005f8  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005f8  080005f8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005f8  080005f8  000015f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005fc  080005fc  000015fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000600  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000604  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000604  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000175e  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000809  00000000  00000000  0000378b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  00003f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000019a  00000000  00000000  000041e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001562c  00000000  00000000  0000437a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000325f  00000000  00000000  000199a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b5cc  00000000  00000000  0001cc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000981d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006fc  00000000  00000000  00098214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00098910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080005e0 	.word	0x080005e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080005e0 	.word	0x080005e0

0800014c <main>:
    return ADC1->DR;
}


int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//	GPIOB->CRL &= 0;
//	GPIOA->CRL |= 0x44444440; // pin A0 analog input
//	ADC_init();
//	GPIO_pinMode(GPIOA, 6, INPUT_PULLUP);
//	TIM_initPWM(TIM4, 4, 100);
	GPIO_pinMode(GPIOB, 12, OUTPUT);
 8000150:	2203      	movs	r2, #3
 8000152:	210c      	movs	r1, #12
 8000154:	480e      	ldr	r0, [pc, #56]	@ (8000190 <main+0x44>)
 8000156:	f000 f887 	bl	8000268 <GPIO_pinMode>
	TIM_initDelay(TIM2, 10);
 800015a:	210a      	movs	r1, #10
 800015c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000160:	f000 f952 	bl	8000408 <TIM_initDelay>
//		if (GPIO_digitalRead(GPIOA, 6)){
//			TIM_writePWM(TIM4, 4, reading);
//		}if(!GPIO_digitalRead(GPIOA, 6)){
//			TIM_writePWM(TIM4, 4, reading);
//		}
		GPIO_digitalWrite(GPIOB, 12, HIGH);
 8000164:	2200      	movs	r2, #0
 8000166:	210c      	movs	r1, #12
 8000168:	4809      	ldr	r0, [pc, #36]	@ (8000190 <main+0x44>)
 800016a:	f000 f921 	bl	80003b0 <GPIO_digitalWrite>
		TIM_delay(TIM2, 100);
 800016e:	2164      	movs	r1, #100	@ 0x64
 8000170:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000174:	f000 f99a 	bl	80004ac <TIM_delay>
		GPIO_digitalWrite(GPIOB, 12, LOW);
 8000178:	2201      	movs	r2, #1
 800017a:	210c      	movs	r1, #12
 800017c:	4804      	ldr	r0, [pc, #16]	@ (8000190 <main+0x44>)
 800017e:	f000 f917 	bl	80003b0 <GPIO_digitalWrite>
		TIM_delay(TIM2, 100);
 8000182:	2164      	movs	r1, #100	@ 0x64
 8000184:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000188:	f000 f990 	bl	80004ac <TIM_delay>
		GPIO_digitalWrite(GPIOB, 12, HIGH);
 800018c:	bf00      	nop
 800018e:	e7e9      	b.n	8000164 <main+0x18>
 8000190:	40010c00 	.word	0x40010c00

08000194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000198:	bf00      	nop
 800019a:	e7fd      	b.n	8000198 <NMI_Handler+0x4>

0800019c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001a0:	bf00      	nop
 80001a2:	e7fd      	b.n	80001a0 <HardFault_Handler+0x4>

080001a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001a8:	bf00      	nop
 80001aa:	e7fd      	b.n	80001a8 <MemManage_Handler+0x4>

080001ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001b0:	bf00      	nop
 80001b2:	e7fd      	b.n	80001b0 <BusFault_Handler+0x4>

080001b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001b8:	bf00      	nop
 80001ba:	e7fd      	b.n	80001b8 <UsageFault_Handler+0x4>

080001bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr

080001e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001e4:	f000 f82e 	bl	8000244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}

080001ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr

080001f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80001f8:	f7ff fff8 	bl	80001ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001fc:	480b      	ldr	r0, [pc, #44]	@ (800022c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80001fe:	490c      	ldr	r1, [pc, #48]	@ (8000230 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000200:	4a0c      	ldr	r2, [pc, #48]	@ (8000234 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000204:	e002      	b.n	800020c <LoopCopyDataInit>

08000206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020a:	3304      	adds	r3, #4

0800020c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800020c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800020e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000210:	d3f9      	bcc.n	8000206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000212:	4a09      	ldr	r2, [pc, #36]	@ (8000238 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000214:	4c09      	ldr	r4, [pc, #36]	@ (800023c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000218:	e001      	b.n	800021e <LoopFillZerobss>

0800021a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800021c:	3204      	adds	r2, #4

0800021e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800021e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000220:	d3fb      	bcc.n	800021a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000222:	f000 f9b9 	bl	8000598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000226:	f7ff ff91 	bl	800014c <main>
  bx lr
 800022a:	4770      	bx	lr
  ldr r0, =_sdata
 800022c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000230:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000234:	08000600 	.word	0x08000600
  ldr r2, =_sbss
 8000238:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800023c:	20000024 	.word	0x20000024

08000240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000240:	e7fe      	b.n	8000240 <ADC1_2_IRQHandler>
	...

08000244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <HAL_IncTick+0x1c>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	461a      	mov	r2, r3
 800024e:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <HAL_IncTick+0x20>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4413      	add	r3, r2
 8000254:	4a03      	ldr	r2, [pc, #12]	@ (8000264 <HAL_IncTick+0x20>)
 8000256:	6013      	str	r3, [r2, #0]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	20000000 	.word	0x20000000
 8000264:	20000020 	.word	0x20000020

08000268 <GPIO_pinMode>:
#include "GPIO_interface.h"

void GPIO_pinMode(GPIO_TypeDef *GPIOX, uint8_t pinNumber, GPIO_MODE mode){
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	460b      	mov	r3, r1
 8000272:	70fb      	strb	r3, [r7, #3]
 8000274:	4613      	mov	r3, r2
 8000276:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8000278:	78fb      	ldrb	r3, [r7, #3]
 800027a:	2b0f      	cmp	r3, #15
 800027c:	f200 808b 	bhi.w	8000396 <GPIO_pinMode+0x12e>
		return;
	}
	// Initialize the clock of port x
    if (GPIOX == GPIOA) {
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a47      	ldr	r2, [pc, #284]	@ (80003a0 <GPIO_pinMode+0x138>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d106      	bne.n	8000296 <GPIO_pinMode+0x2e>
		SET_BIT(RCC->APB2ENR, 2);
 8000288:	4b46      	ldr	r3, [pc, #280]	@ (80003a4 <GPIO_pinMode+0x13c>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a45      	ldr	r2, [pc, #276]	@ (80003a4 <GPIO_pinMode+0x13c>)
 800028e:	f043 0304 	orr.w	r3, r3, #4
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	e014      	b.n	80002c0 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOB) {
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a43      	ldr	r2, [pc, #268]	@ (80003a8 <GPIO_pinMode+0x140>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d106      	bne.n	80002ac <GPIO_pinMode+0x44>
		SET_BIT(RCC->APB2ENR, 3);
 800029e:	4b41      	ldr	r3, [pc, #260]	@ (80003a4 <GPIO_pinMode+0x13c>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	4a40      	ldr	r2, [pc, #256]	@ (80003a4 <GPIO_pinMode+0x13c>)
 80002a4:	f043 0308 	orr.w	r3, r3, #8
 80002a8:	6193      	str	r3, [r2, #24]
 80002aa:	e009      	b.n	80002c0 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOC) {
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a3f      	ldr	r2, [pc, #252]	@ (80003ac <GPIO_pinMode+0x144>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d105      	bne.n	80002c0 <GPIO_pinMode+0x58>
		SET_BIT(RCC->APB2ENR, 4);
 80002b4:	4b3b      	ldr	r3, [pc, #236]	@ (80003a4 <GPIO_pinMode+0x13c>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a3a      	ldr	r2, [pc, #232]	@ (80003a4 <GPIO_pinMode+0x13c>)
 80002ba:	f043 0310 	orr.w	r3, r3, #16
 80002be:	6193      	str	r3, [r2, #24]
    }
	volatile uint8_t pinIndex = pinNumber % 8;
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	f003 0307 	and.w	r3, r3, #7
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	72fb      	strb	r3, [r7, #11]

	volatile uint32_t *CRX;
	if (pinNumber < 8 && pinNumber >= 0){
 80002ca:	78fb      	ldrb	r3, [r7, #3]
 80002cc:	2b07      	cmp	r3, #7
 80002ce:	d802      	bhi.n	80002d6 <GPIO_pinMode+0x6e>
		CRX = &GPIOX->CRL;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	e008      	b.n	80002e8 <GPIO_pinMode+0x80>
	}else if(pinNumber >= 8 && pinNumber < 16){
 80002d6:	78fb      	ldrb	r3, [r7, #3]
 80002d8:	2b07      	cmp	r3, #7
 80002da:	d905      	bls.n	80002e8 <GPIO_pinMode+0x80>
 80002dc:	78fb      	ldrb	r3, [r7, #3]
 80002de:	2b0f      	cmp	r3, #15
 80002e0:	d802      	bhi.n	80002e8 <GPIO_pinMode+0x80>
		CRX = &GPIOX->CRH;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3304      	adds	r3, #4
 80002e6:	60fb      	str	r3, [r7, #12]
	}
	// Zero the CRX register's specific pin mode not the whole register
	*CRX &= ~(0xF << (4*(pinIndex)));
 80002e8:	7afb      	ldrb	r3, [r7, #11]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	220f      	movs	r2, #15
 80002f0:	fa02 f303 	lsl.w	r3, r2, r3
 80002f4:	43da      	mvns	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	401a      	ands	r2, r3
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	601a      	str	r2, [r3, #0]
	if (mode == OUTPUT){
 8000300:	78bb      	ldrb	r3, [r7, #2]
 8000302:	2b03      	cmp	r3, #3
 8000304:	d10a      	bne.n	800031c <GPIO_pinMode+0xb4>
		*CRX |= (0x2 << (4*(pinIndex)));
 8000306:	7afb      	ldrb	r3, [r7, #11]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	2202      	movs	r2, #2
 800030e:	409a      	lsls	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	431a      	orrs	r2, r3
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	e03d      	b.n	8000398 <GPIO_pinMode+0x130>
	}else if (mode == INPUT_FLOAT){
 800031c:	78bb      	ldrb	r3, [r7, #2]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d10a      	bne.n	8000338 <GPIO_pinMode+0xd0>
		*CRX |= (0x4 << (4*(pinIndex)));
 8000322:	7afb      	ldrb	r3, [r7, #11]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	2204      	movs	r2, #4
 800032a:	409a      	lsls	r2, r3
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	431a      	orrs	r2, r3
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	e02f      	b.n	8000398 <GPIO_pinMode+0x130>
	}else if (mode == INPUT_PULLUP){
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d113      	bne.n	8000366 <GPIO_pinMode+0xfe>
		*CRX |= (0x8 << (4*(pinIndex)));
 800033e:	7afb      	ldrb	r3, [r7, #11]
 8000340:	b2db      	uxtb	r3, r3
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	2208      	movs	r2, #8
 8000346:	409a      	lsls	r2, r3
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	431a      	orrs	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	601a      	str	r2, [r3, #0]
		SET_BIT(GPIOX->ODR, pinNumber);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	68db      	ldr	r3, [r3, #12]
 8000356:	78fa      	ldrb	r2, [r7, #3]
 8000358:	2101      	movs	r1, #1
 800035a:	fa01 f202 	lsl.w	r2, r1, r2
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	e018      	b.n	8000398 <GPIO_pinMode+0x130>
	}else if (mode == INPUT_PULLDOWN){
 8000366:	78bb      	ldrb	r3, [r7, #2]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d115      	bne.n	8000398 <GPIO_pinMode+0x130>
		*CRX |= (0x8 << (4*(pinIndex)));
 800036c:	7afb      	ldrb	r3, [r7, #11]
 800036e:	b2db      	uxtb	r3, r3
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	2208      	movs	r2, #8
 8000374:	409a      	lsls	r2, r3
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	431a      	orrs	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	78fa      	ldrb	r2, [r7, #3]
 8000386:	2101      	movs	r1, #1
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	43d2      	mvns	r2, r2
 800038e:	401a      	ands	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	e000      	b.n	8000398 <GPIO_pinMode+0x130>
		return;
 8000396:	bf00      	nop
	}
}
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40010800 	.word	0x40010800
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	40011000 	.word	0x40011000

080003b0 <GPIO_digitalWrite>:

void GPIO_digitalWrite(GPIO_TypeDef *GPIOX, uint8_t pinNumber, PIN_LEVEL level){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
 80003bc:	4613      	mov	r3, r2
 80003be:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 80003c0:	78fb      	ldrb	r3, [r7, #3]
 80003c2:	2b0f      	cmp	r3, #15
 80003c4:	d81a      	bhi.n	80003fc <GPIO_digitalWrite+0x4c>
		return;
	}
	if (level == HIGH){
 80003c6:	78bb      	ldrb	r3, [r7, #2]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d109      	bne.n	80003e0 <GPIO_digitalWrite+0x30>
		SET_BIT(GPIOX->ODR, pinNumber);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	78fa      	ldrb	r2, [r7, #3]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	431a      	orrs	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	e00e      	b.n	80003fe <GPIO_digitalWrite+0x4e>
	}else if(level == LOW){
 80003e0:	78bb      	ldrb	r3, [r7, #2]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d10b      	bne.n	80003fe <GPIO_digitalWrite+0x4e>
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	78fa      	ldrb	r2, [r7, #3]
 80003ec:	2101      	movs	r1, #1
 80003ee:	fa01 f202 	lsl.w	r2, r1, r2
 80003f2:	43d2      	mvns	r2, r2
 80003f4:	401a      	ands	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	e000      	b.n	80003fe <GPIO_digitalWrite+0x4e>
		return;
 80003fc:	bf00      	nop
	}
}
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
	...

08000408 <TIM_initDelay>:
    	CCRX = &TIMX->CCR4;
    }
	*CCRX = (dutyCycle/100)*(TIMX->ARR);
}

void TIM_initDelay(TIM_TypeDef *TIMX, uint16_t minTime_ms){
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	807b      	strh	r3, [r7, #2]
		enableTimerClock(TIMX);
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f000 f87d 	bl	8000514 <enableTimerClock>
		uint32_t clk_freq = 8000000; // 8 MHz
 800041a:	4b22      	ldr	r3, [pc, #136]	@ (80004a4 <TIM_initDelay+0x9c>)
 800041c:	613b      	str	r3, [r7, #16]
		uint32_t target_ticks = minTime_ms * 1000; // Convert minTime_ms to microseconds
 800041e:	887b      	ldrh	r3, [r7, #2]
 8000420:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000424:	fb02 f303 	mul.w	r3, r2, r3
 8000428:	60fb      	str	r3, [r7, #12]

	    uint16_t prescaler = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	82fb      	strh	r3, [r7, #22]
	    uint32_t arr = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	60bb      	str	r3, [r7, #8]

	    // Try to find the smallest prescaler that gives ARR <= 65535
	    for (prescaler = 1; prescaler <= 0xFFFF; prescaler++) {
 8000432:	2301      	movs	r3, #1
 8000434:	82fb      	strh	r3, [r7, #22]
	        arr = (clk_freq / prescaler) * minTime_ms / 1000;
 8000436:	8afb      	ldrh	r3, [r7, #22]
 8000438:	693a      	ldr	r2, [r7, #16]
 800043a:	fbb2 f3f3 	udiv	r3, r2, r3
 800043e:	887a      	ldrh	r2, [r7, #2]
 8000440:	fb02 f303 	mul.w	r3, r2, r3
 8000444:	4a18      	ldr	r2, [pc, #96]	@ (80004a8 <TIM_initDelay+0xa0>)
 8000446:	fba2 2303 	umull	r2, r3, r2, r3
 800044a:	099b      	lsrs	r3, r3, #6
 800044c:	60bb      	str	r3, [r7, #8]
	        if (arr <= 0xFFFF) break;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000454:	d303      	bcc.n	800045e <TIM_initDelay+0x56>
	    for (prescaler = 1; prescaler <= 0xFFFF; prescaler++) {
 8000456:	8afb      	ldrh	r3, [r7, #22]
 8000458:	3301      	adds	r3, #1
 800045a:	82fb      	strh	r3, [r7, #22]
	        arr = (clk_freq / prescaler) * minTime_ms / 1000;
 800045c:	e7eb      	b.n	8000436 <TIM_initDelay+0x2e>
	        if (arr <= 0xFFFF) break;
 800045e:	bf00      	nop

	    if (prescaler > 0xFFFF) {
	        return;
	    }

	    TIMX->CR1 = 0;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
	    TIMX->PSC = prescaler - 1;
 8000466:	8afb      	ldrh	r3, [r7, #22]
 8000468:	3b01      	subs	r3, #1
 800046a:	461a      	mov	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	629a      	str	r2, [r3, #40]	@ 0x28
	    TIMX->ARR = arr - 1;
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	1e5a      	subs	r2, r3, #1
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	62da      	str	r2, [r3, #44]	@ 0x2c
	    TIMX->EGR = TIM_EGR_UG;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	615a      	str	r2, [r3, #20]
	    TIMX->CNT = 0;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	625a      	str	r2, [r3, #36]	@ 0x24
	    TIMX->SR &= ~TIM_SR_UIF;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	f023 0201 	bic.w	r2, r3, #1
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	611a      	str	r2, [r3, #16]
	    TIMX->CR1 |= TIM_CR1_CEN;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f043 0201 	orr.w	r2, r3, #1
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	601a      	str	r2, [r3, #0]

}
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	007a1200 	.word	0x007a1200
 80004a8:	10624dd3 	.word	0x10624dd3

080004ac <TIM_delay>:

void TIM_delay(TIM_TypeDef *TIMX, uint32_t delay_ms){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
		enableTimerClock(TIMX);
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f000 f82c 	bl	8000514 <enableTimerClock>
		TIMX->CR1 = 0;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
	    TIMX->CNT = 0;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2200      	movs	r2, #0
 80004c6:	625a      	str	r2, [r3, #36]	@ 0x24
		TIMX->PSC = 8000-1;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80004ce:	629a      	str	r2, [r3, #40]	@ 0x28
		TIMX->ARR = delay_ms-1;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	1e5a      	subs	r2, r3, #1
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	62da      	str	r2, [r3, #44]	@ 0x2c
		TIMX->CR1 |= TIM_CR1_CEN;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f043 0201 	orr.w	r2, r3, #1
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
		while(!(TIMX->SR & TIM_SR_UIF));
 80004e4:	bf00      	nop
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f9      	beq.n	80004e6 <TIM_delay+0x3a>
		TIMX->SR &= ~TIM_SR_UIF;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	691b      	ldr	r3, [r3, #16]
 80004f6:	f023 0201 	bic.w	r2, r3, #1
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	611a      	str	r2, [r3, #16]
		TIMX->CR1 &= ~TIM_CR1_CEN;    // Stop timer
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f023 0201 	bic.w	r2, r3, #1
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <enableTimerClock>:
        TIM_delay(TIMX, chunk);
        delay_ms -= chunk;
    }
}

void enableTimerClock(TIM_TypeDef *TIMx) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)TIMx) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a1a      	ldr	r2, [pc, #104]	@ (8000588 <enableTimerClock+0x74>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d00f      	beq.n	8000544 <enableTimerClock+0x30>
 8000524:	4a18      	ldr	r2, [pc, #96]	@ (8000588 <enableTimerClock+0x74>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d828      	bhi.n	800057c <enableTimerClock+0x68>
 800052a:	4a18      	ldr	r2, [pc, #96]	@ (800058c <enableTimerClock+0x78>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d01e      	beq.n	800056e <enableTimerClock+0x5a>
 8000530:	4a16      	ldr	r2, [pc, #88]	@ (800058c <enableTimerClock+0x78>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d822      	bhi.n	800057c <enableTimerClock+0x68>
 8000536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800053a:	d00a      	beq.n	8000552 <enableTimerClock+0x3e>
 800053c:	4a14      	ldr	r2, [pc, #80]	@ (8000590 <enableTimerClock+0x7c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d00e      	beq.n	8000560 <enableTimerClock+0x4c>
            break;
        case (uint32_t)TIM4:
            RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
            break;
        default:
            break;
 8000542:	e01b      	b.n	800057c <enableTimerClock+0x68>
            RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000544:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <enableTimerClock+0x80>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a12      	ldr	r2, [pc, #72]	@ (8000594 <enableTimerClock+0x80>)
 800054a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800054e:	6193      	str	r3, [r2, #24]
            break;
 8000550:	e015      	b.n	800057e <enableTimerClock+0x6a>
            RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <enableTimerClock+0x80>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a0f      	ldr	r2, [pc, #60]	@ (8000594 <enableTimerClock+0x80>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	61d3      	str	r3, [r2, #28]
            break;
 800055e:	e00e      	b.n	800057e <enableTimerClock+0x6a>
            RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000560:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <enableTimerClock+0x80>)
 8000562:	69db      	ldr	r3, [r3, #28]
 8000564:	4a0b      	ldr	r2, [pc, #44]	@ (8000594 <enableTimerClock+0x80>)
 8000566:	f043 0302 	orr.w	r3, r3, #2
 800056a:	61d3      	str	r3, [r2, #28]
            break;
 800056c:	e007      	b.n	800057e <enableTimerClock+0x6a>
            RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800056e:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <enableTimerClock+0x80>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a08      	ldr	r2, [pc, #32]	@ (8000594 <enableTimerClock+0x80>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	61d3      	str	r3, [r2, #28]
            break;
 800057a:	e000      	b.n	800057e <enableTimerClock+0x6a>
            break;
 800057c:	bf00      	nop
    }
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	40012c00 	.word	0x40012c00
 800058c:	40000800 	.word	0x40000800
 8000590:	40000400 	.word	0x40000400
 8000594:	40021000 	.word	0x40021000

08000598 <__libc_init_array>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	2600      	movs	r6, #0
 800059c:	4d0c      	ldr	r5, [pc, #48]	@ (80005d0 <__libc_init_array+0x38>)
 800059e:	4c0d      	ldr	r4, [pc, #52]	@ (80005d4 <__libc_init_array+0x3c>)
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	10a4      	asrs	r4, r4, #2
 80005a4:	42a6      	cmp	r6, r4
 80005a6:	d109      	bne.n	80005bc <__libc_init_array+0x24>
 80005a8:	f000 f81a 	bl	80005e0 <_init>
 80005ac:	2600      	movs	r6, #0
 80005ae:	4d0a      	ldr	r5, [pc, #40]	@ (80005d8 <__libc_init_array+0x40>)
 80005b0:	4c0a      	ldr	r4, [pc, #40]	@ (80005dc <__libc_init_array+0x44>)
 80005b2:	1b64      	subs	r4, r4, r5
 80005b4:	10a4      	asrs	r4, r4, #2
 80005b6:	42a6      	cmp	r6, r4
 80005b8:	d105      	bne.n	80005c6 <__libc_init_array+0x2e>
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c0:	4798      	blx	r3
 80005c2:	3601      	adds	r6, #1
 80005c4:	e7ee      	b.n	80005a4 <__libc_init_array+0xc>
 80005c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ca:	4798      	blx	r3
 80005cc:	3601      	adds	r6, #1
 80005ce:	e7f2      	b.n	80005b6 <__libc_init_array+0x1e>
 80005d0:	080005f8 	.word	0x080005f8
 80005d4:	080005f8 	.word	0x080005f8
 80005d8:	080005f8 	.word	0x080005f8
 80005dc:	080005fc 	.word	0x080005fc

080005e0 <_init>:
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	bf00      	nop
 80005e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e6:	bc08      	pop	{r3}
 80005e8:	469e      	mov	lr, r3
 80005ea:	4770      	bx	lr

080005ec <_fini>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	bf00      	nop
 80005f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f2:	bc08      	pop	{r3}
 80005f4:	469e      	mov	lr, r3
 80005f6:	4770      	bx	lr
