
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bd8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ce4  08000ce4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ce4  08000ce4  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000ce4  08000ce4  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000ce4  08000ce4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ce4  08000ce4  00001ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ce8  08000ce8  00001ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000cec  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000004  08000cf0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000cf0  0000205c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001aff  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000812  00000000  00000000  00003b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000258  00000000  00000000  00004340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001af  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154af  00000000  00000000  00004747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e2f  00000000  00000000  00019bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b6e6  00000000  00000000  0001ca25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009810b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000824  00000000  00000000  00098150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00098974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000ccc 	.word	0x08000ccc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000ccc 	.word	0x08000ccc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <func>:
    while (!(ADC1->SR & (1 << 1))); // Wait for EOC
    ADC1->SR &= ~(1 << 1);          // Clear EOC flag
    return ADC1->DR;
}

void func(){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= (1 << 14); // toggle the led PC14
 800064c:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <func+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	4a03      	ldr	r2, [pc, #12]	@ (8000660 <func+0x18>)
 8000652:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8000656:	60d3      	str	r3, [r2, #12]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	40011000 	.word	0x40011000

08000664 <main>:

int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
//	ADC_init();
////	TIM_initPWM(TIM2, 1, 50);
//	TIM_initDelay(TIM4, 1);
//	float i = 0;
//	SER_init(TIM2, 1);
	RCC->APB2ENR |= (1 << 4);   // Enable GPIOC clock
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <main+0x2c>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <main+0x2c>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6193      	str	r3, [r2, #24]
	GPIOC->CRH = 0;
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <main+0x30>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
	GPIOC->CRH = 0x42444444;    // Set PC14 as output, others default
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <main+0x30>)
 800067c:	4a06      	ldr	r2, [pc, #24]	@ (8000698 <main+0x34>)
 800067e:	605a      	str	r2, [r3, #4]
	TIM_callback(TIM4, 200, 1000, &func); // we can change the callback function to be anything
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <main+0x38>)
 8000682:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <main+0x3c>)
 8000684:	4907      	ldr	r1, [pc, #28]	@ (80006a4 <main+0x40>)
 8000686:	4808      	ldr	r0, [pc, #32]	@ (80006a8 <main+0x44>)
 8000688:	f000 f8c0 	bl	800080c <TIM_callback>
	while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0x28>
 8000690:	40021000 	.word	0x40021000
 8000694:	40011000 	.word	0x40011000
 8000698:	42444444 	.word	0x42444444
 800069c:	08000649 	.word	0x08000649
 80006a0:	447a0000 	.word	0x447a0000
 80006a4:	43480000 	.word	0x43480000
 80006a8:	40000800 	.word	0x40000800

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <NMI_Handler+0x4>

080006b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <HardFault_Handler+0x4>

080006bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <MemManage_Handler+0x4>

080006c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fc:	f000 f82e 	bl	800075c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000710:	f7ff fff8 	bl	8000704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000716:	490c      	ldr	r1, [pc, #48]	@ (8000748 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000718:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <LoopFillZerobss+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a09      	ldr	r2, [pc, #36]	@ (8000750 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800072c:	4c09      	ldr	r4, [pc, #36]	@ (8000754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f000 faa3 	bl	8000c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073e:	f7ff ff91 	bl	8000664 <main>
  bx lr
 8000742:	4770      	bx	lr
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800074c:	08000cec 	.word	0x08000cec
  ldr r2, =_sbss
 8000750:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000754:	2000005c 	.word	0x2000005c

08000758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	@ (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a03      	ldr	r2, [pc, #12]	@ (800077c <HAL_IncTick+0x20>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000000 	.word	0x20000000
 800077c:	20000020 	.word	0x20000020

08000780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	db0b      	blt.n	80007aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 021f 	and.w	r2, r3, #31
 8000798:	4906      	ldr	r1, [pc, #24]	@ (80007b4 <__NVIC_EnableIRQ+0x34>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	095b      	lsrs	r3, r3, #5
 80007a0:	2001      	movs	r0, #1
 80007a2:	fa00 f202 	lsl.w	r2, r0, r2
 80007a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	@ (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	@ (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <TIM_callback>:
        default:
            break;
    }
}

void TIM_callback(TIM_TypeDef *TIMX, float minTimeMs, float timeMs, void (*application)()){ // we can change the callback function to be anything
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b089      	sub	sp, #36	@ 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	603b      	str	r3, [r7, #0]
	// till now the mintime doesn't do anything
	// init clock and the corresponding timer's interrupt
	if (TIMX == TIM2) {
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000820:	d11f      	bne.n	8000862 <TIM_callback+0x56>
	    SET_BIT(RCC->APB1ENR, 0); // Enable TIM2 clock
 8000822:	4b87      	ldr	r3, [pc, #540]	@ (8000a40 <TIM_callback+0x234>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a86      	ldr	r2, [pc, #536]	@ (8000a40 <TIM_callback+0x234>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	61d3      	str	r3, [r2, #28]
		SET_BIT(TIMX->DIER, 0);// Enable update interrupt (UIE)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	f043 0201 	orr.w	r2, r3, #1
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	60da      	str	r2, [r3, #12]
		// enable interrupt
		NVIC_EnableIRQ(TIM2_IRQn);
 800083a:	201c      	movs	r0, #28
 800083c:	f7ff ffa0 	bl	8000780 <__NVIC_EnableIRQ>
		// set interrupt priority
		NVIC_SetPriority(TIM2_IRQn, 1);
 8000840:	2101      	movs	r1, #1
 8000842:	201c      	movs	r0, #28
 8000844:	f7ff ffb8 	bl	80007b8 <__NVIC_SetPriority>
		counter = &counter2;
 8000848:	4b7e      	ldr	r3, [pc, #504]	@ (8000a44 <TIM_callback+0x238>)
 800084a:	4a7f      	ldr	r2, [pc, #508]	@ (8000a48 <TIM_callback+0x23c>)
 800084c:	601a      	str	r2, [r3, #0]
		preload = &preload2;
 800084e:	4b7f      	ldr	r3, [pc, #508]	@ (8000a4c <TIM_callback+0x240>)
 8000850:	4a7f      	ldr	r2, [pc, #508]	@ (8000a50 <TIM_callback+0x244>)
 8000852:	601a      	str	r2, [r3, #0]
		n = &n2;
 8000854:	4b7f      	ldr	r3, [pc, #508]	@ (8000a54 <TIM_callback+0x248>)
 8000856:	4a80      	ldr	r2, [pc, #512]	@ (8000a58 <TIM_callback+0x24c>)
 8000858:	601a      	str	r2, [r3, #0]
		callback2 = application;
 800085a:	4a80      	ldr	r2, [pc, #512]	@ (8000a5c <TIM_callback+0x250>)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	e046      	b.n	80008f0 <TIM_callback+0xe4>
	} else if (TIMX == TIM3) {
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4a7e      	ldr	r2, [pc, #504]	@ (8000a60 <TIM_callback+0x254>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d11f      	bne.n	80008aa <TIM_callback+0x9e>
	    SET_BIT(RCC->APB1ENR, 1); // Enable TIM3 clock
 800086a:	4b75      	ldr	r3, [pc, #468]	@ (8000a40 <TIM_callback+0x234>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a74      	ldr	r2, [pc, #464]	@ (8000a40 <TIM_callback+0x234>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	61d3      	str	r3, [r2, #28]
		SET_BIT(TIMX->DIER, 0);// Enable update interrupt (UIE)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	f043 0201 	orr.w	r2, r3, #1
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	60da      	str	r2, [r3, #12]
		// enable interrupt
		NVIC_EnableIRQ(TIM3_IRQn);
 8000882:	201d      	movs	r0, #29
 8000884:	f7ff ff7c 	bl	8000780 <__NVIC_EnableIRQ>
		// set interrupt priority
		NVIC_SetPriority(TIM3_IRQn, 1);
 8000888:	2101      	movs	r1, #1
 800088a:	201d      	movs	r0, #29
 800088c:	f7ff ff94 	bl	80007b8 <__NVIC_SetPriority>
		counter = &counter3;
 8000890:	4b6c      	ldr	r3, [pc, #432]	@ (8000a44 <TIM_callback+0x238>)
 8000892:	4a74      	ldr	r2, [pc, #464]	@ (8000a64 <TIM_callback+0x258>)
 8000894:	601a      	str	r2, [r3, #0]
		preload = &preload3;
 8000896:	4b6d      	ldr	r3, [pc, #436]	@ (8000a4c <TIM_callback+0x240>)
 8000898:	4a73      	ldr	r2, [pc, #460]	@ (8000a68 <TIM_callback+0x25c>)
 800089a:	601a      	str	r2, [r3, #0]
		n = &n3;
 800089c:	4b6d      	ldr	r3, [pc, #436]	@ (8000a54 <TIM_callback+0x248>)
 800089e:	4a73      	ldr	r2, [pc, #460]	@ (8000a6c <TIM_callback+0x260>)
 80008a0:	601a      	str	r2, [r3, #0]
		callback3 = application;
 80008a2:	4a73      	ldr	r2, [pc, #460]	@ (8000a70 <TIM_callback+0x264>)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	e022      	b.n	80008f0 <TIM_callback+0xe4>
	} else if (TIMX == TIM4) {
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4a71      	ldr	r2, [pc, #452]	@ (8000a74 <TIM_callback+0x268>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d11e      	bne.n	80008f0 <TIM_callback+0xe4>
	    SET_BIT(RCC->APB1ENR, 2); // Enable TIM4 clock
 80008b2:	4b63      	ldr	r3, [pc, #396]	@ (8000a40 <TIM_callback+0x234>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a62      	ldr	r2, [pc, #392]	@ (8000a40 <TIM_callback+0x234>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	61d3      	str	r3, [r2, #28]
		SET_BIT(TIMX->DIER, 0);// Enable update interrupt (UIE)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	f043 0201 	orr.w	r2, r3, #1
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	60da      	str	r2, [r3, #12]
		// enable NVIC interrupt
		NVIC_EnableIRQ(TIM4_IRQn);
 80008ca:	201e      	movs	r0, #30
 80008cc:	f7ff ff58 	bl	8000780 <__NVIC_EnableIRQ>
		// set interrupt priority
		NVIC_SetPriority(TIM4_IRQn, 1);
 80008d0:	2101      	movs	r1, #1
 80008d2:	201e      	movs	r0, #30
 80008d4:	f7ff ff70 	bl	80007b8 <__NVIC_SetPriority>
		counter = &counter4;
 80008d8:	4b5a      	ldr	r3, [pc, #360]	@ (8000a44 <TIM_callback+0x238>)
 80008da:	4a67      	ldr	r2, [pc, #412]	@ (8000a78 <TIM_callback+0x26c>)
 80008dc:	601a      	str	r2, [r3, #0]
		preload = &preload4;
 80008de:	4b5b      	ldr	r3, [pc, #364]	@ (8000a4c <TIM_callback+0x240>)
 80008e0:	4a66      	ldr	r2, [pc, #408]	@ (8000a7c <TIM_callback+0x270>)
 80008e2:	601a      	str	r2, [r3, #0]
		n = &n4;
 80008e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a54 <TIM_callback+0x248>)
 80008e6:	4a66      	ldr	r2, [pc, #408]	@ (8000a80 <TIM_callback+0x274>)
 80008e8:	601a      	str	r2, [r3, #0]
		callback4 = application;
 80008ea:	4a66      	ldr	r2, [pc, #408]	@ (8000a84 <TIM_callback+0x278>)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	6013      	str	r3, [r2, #0]
	}
	// direction upward
	CLEAR_BIT(TIMX->CR1, 4);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f023 0210 	bic.w	r2, r3, #16
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	601a      	str	r2, [r3, #0]
	// mode 'edge aligned'
	CLEAR_BIT(TIMX->CR1, 5);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f023 0220 	bic.w	r2, r3, #32
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIMX->CR1, 6);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	601a      	str	r2, [r3, #0]
//		if (arr > 65535){ // we won't reach this case unless the minimum time was more than 8 minutes
//			arr = 65535;
//		}
//	}

	uint32_t prescaler = 255;
 8000914:	23ff      	movs	r3, #255	@ 0xff
 8000916:	61fb      	str	r3, [r7, #28]
	uint32_t arr = 100;
 8000918:	2364      	movs	r3, #100	@ 0x64
 800091a:	61bb      	str	r3, [r7, #24]

	TIMX->ARR = (uint16_t)arr;
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	b29b      	uxth	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIMX->PSC = prescaler;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	69fa      	ldr	r2, [r7, #28]
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28
	uint32_t arr_new = ((timeMs*8000)/(TIMX->PSC + 1)) - 1;
 800092c:	4956      	ldr	r1, [pc, #344]	@ (8000a88 <TIM_callback+0x27c>)
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fd1a 	bl	8000368 <__aeabi_fmul>
 8000934:	4603      	mov	r3, r0
 8000936:	461c      	mov	r4, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800093c:	3301      	adds	r3, #1
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fcba 	bl	80002b8 <__aeabi_ui2f>
 8000944:	4603      	mov	r3, r0
 8000946:	4619      	mov	r1, r3
 8000948:	4620      	mov	r0, r4
 800094a:	f7ff fdc1 	bl	80004d0 <__aeabi_fdiv>
 800094e:	4603      	mov	r3, r0
 8000950:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fbfd 	bl	8000154 <__aeabi_fsub>
 800095a:	4603      	mov	r3, r0
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fe53 	bl	8000608 <__aeabi_f2uiz>
 8000962:	4603      	mov	r3, r0
 8000964:	617b      	str	r3, [r7, #20]
	if (arr_new <= TIMX->ARR){
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	429a      	cmp	r2, r3
 800096e:	d809      	bhi.n	8000984 <TIM_callback+0x178>
		TIMX->ARR = (uint16_t)arr_new;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	b29b      	uxth	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	62da      	str	r2, [r3, #44]	@ 0x2c
		*n = 1;
 800097a:	4b36      	ldr	r3, [pc, #216]	@ (8000a54 <TIM_callback+0x248>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2201      	movs	r2, #1
 8000980:	801a      	strh	r2, [r3, #0]
 8000982:	e053      	b.n	8000a2c <TIM_callback+0x220>
	}else{
		float div = ((float)(arr_new + 1)) / ((float)(TIMX->ARR + 1));
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fc95 	bl	80002b8 <__aeabi_ui2f>
 800098e:	4604      	mov	r4, r0
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000994:	3301      	adds	r3, #1
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc8e 	bl	80002b8 <__aeabi_ui2f>
 800099c:	4603      	mov	r3, r0
 800099e:	4619      	mov	r1, r3
 80009a0:	4620      	mov	r0, r4
 80009a2:	f7ff fd95 	bl	80004d0 <__aeabi_fdiv>
 80009a6:	4603      	mov	r3, r0
 80009a8:	613b      	str	r3, [r7, #16]
		*n = (uint16_t)div;
 80009aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000a54 <TIM_callback+0x248>)
 80009ac:	681c      	ldr	r4, [r3, #0]
 80009ae:	6938      	ldr	r0, [r7, #16]
 80009b0:	f7ff fe2a 	bl	8000608 <__aeabi_f2uiz>
 80009b4:	4603      	mov	r3, r0
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	8023      	strh	r3, [r4, #0]
		*preload = (uint16_t)(((1 - (div - (float)(*n)))) * ((float)(TIMX->ARR + 1))); // watch out we need old n
 80009ba:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <TIM_callback+0x248>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fc78 	bl	80002b8 <__aeabi_ui2f>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4619      	mov	r1, r3
 80009cc:	6938      	ldr	r0, [r7, #16]
 80009ce:	f7ff fbc1 	bl	8000154 <__aeabi_fsub>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4619      	mov	r1, r3
 80009d6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80009da:	f7ff fbbb 	bl	8000154 <__aeabi_fsub>
 80009de:	4603      	mov	r3, r0
 80009e0:	461c      	mov	r4, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e6:	3301      	adds	r3, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fc65 	bl	80002b8 <__aeabi_ui2f>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4620      	mov	r0, r4
 80009f4:	f7ff fcb8 	bl	8000368 <__aeabi_fmul>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <TIM_callback+0x240>)
 80009fe:	681c      	ldr	r4, [r3, #0]
 8000a00:	4610      	mov	r0, r2
 8000a02:	f7ff fe01 	bl	8000608 <__aeabi_f2uiz>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	8023      	strh	r3, [r4, #0]
		*n = *n + 1; // due to the preload the interrupt number should increase by 1
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <TIM_callback+0x248>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <TIM_callback+0x248>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3201      	adds	r2, #1
 8000a1a:	b292      	uxth	r2, r2
 8000a1c:	801a      	strh	r2, [r3, #0]
		TIMX->CNT = *preload;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <TIM_callback+0x240>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	// start counting
	SET_BIT(TIMX->CR1, 0);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f043 0201 	orr.w	r2, r3, #1
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3724      	adds	r7, #36	@ 0x24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	2000003c 	.word	0x2000003c
 8000a48:	20000040 	.word	0x20000040
 8000a4c:	20000024 	.word	0x20000024
 8000a50:	20000028 	.word	0x20000028
 8000a54:	20000030 	.word	0x20000030
 8000a58:	20000034 	.word	0x20000034
 8000a5c:	20000048 	.word	0x20000048
 8000a60:	40000400 	.word	0x40000400
 8000a64:	20000042 	.word	0x20000042
 8000a68:	2000002a 	.word	0x2000002a
 8000a6c:	20000036 	.word	0x20000036
 8000a70:	2000004c 	.word	0x2000004c
 8000a74:	40000800 	.word	0x40000800
 8000a78:	20000044 	.word	0x20000044
 8000a7c:	2000002c 	.word	0x2000002c
 8000a80:	20000038 	.word	0x20000038
 8000a84:	20000050 	.word	0x20000050
 8000a88:	45fa0000 	.word	0x45fa0000

08000a8c <TIM2_IRQHandler>:
{
    return millis;
}


void TIM2_IRQHandler(){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC1IF){
 8000a90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d016      	beq.n	8000acc <TIM2_IRQHandler+0x40>
		TIM2->SR &= ~TIM_SR_CC1IF;
 8000a9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aa2:	691b      	ldr	r3, [r3, #16]
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aa8:	f023 0302 	bic.w	r3, r3, #2
 8000aac:	6113      	str	r3, [r2, #16]
		TIM2->CCR1 += trigTime_ms_global;
 8000aae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b24 <TIM2_IRQHandler+0x98>)
 8000ab6:	8812      	ldrh	r2, [r2, #0]
 8000ab8:	4611      	mov	r1, r2
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000abe:	440b      	add	r3, r1
 8000ac0:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <TIM2_IRQHandler+0x9c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <TIM2_IRQHandler+0x9c>)
 8000aca:	6013      	str	r3, [r2, #0]
	 }
	if ((TIM2->SR & (1 << 0)) == 1){ // check the uif flag
 8000acc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d122      	bne.n	8000b20 <TIM2_IRQHandler+0x94>
		TIM2->SR &= ~(1 << 0); // clear the uif
 8000ada:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ae4:	f023 0301 	bic.w	r3, r3, #1
 8000ae8:	6113      	str	r3, [r2, #16]
		counter2 ++;
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <TIM2_IRQHandler+0xa0>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	3301      	adds	r3, #1
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <TIM2_IRQHandler+0xa0>)
 8000af6:	801a      	strh	r2, [r3, #0]
		if (counter2 == n2){
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <TIM2_IRQHandler+0xa0>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <TIM2_IRQHandler+0xa4>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d10b      	bne.n	8000b20 <TIM2_IRQHandler+0x94>
			counter2 = 0;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <TIM2_IRQHandler+0xa0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	801a      	strh	r2, [r3, #0]
			TIM2->CNT = preload2; // set the preload
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <TIM2_IRQHandler+0xa8>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
			callback2();
 8000b1a:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <TIM2_IRQHandler+0xac>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4798      	blx	r3
		}
	}
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000058 	.word	0x20000058
 8000b28:	20000054 	.word	0x20000054
 8000b2c:	20000040 	.word	0x20000040
 8000b30:	20000034 	.word	0x20000034
 8000b34:	20000028 	.word	0x20000028
 8000b38:	20000048 	.word	0x20000048

08000b3c <TIM3_IRQHandler>:

void TIM3_IRQHandler(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	if ((TIM3->SR & (1 << 0)) == 1){ // check the uif flag
 8000b40:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <TIM3_IRQHandler+0x88>)
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d138      	bne.n	8000bbe <TIM3_IRQHandler+0x82>
		if (TIM3->SR & TIM_SR_CC1IF){
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <TIM3_IRQHandler+0x88>)
 8000b4e:	691b      	ldr	r3, [r3, #16]
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d012      	beq.n	8000b7e <TIM3_IRQHandler+0x42>
			TIM3->SR &= ~TIM_SR_CC1IF;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <TIM3_IRQHandler+0x88>)
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	@ (8000bc4 <TIM3_IRQHandler+0x88>)
 8000b5e:	f023 0302 	bic.w	r3, r3, #2
 8000b62:	6113      	str	r3, [r2, #16]
			TIM3->CCR1 += trigTime_ms_global;
 8000b64:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <TIM3_IRQHandler+0x88>)
 8000b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b68:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <TIM3_IRQHandler+0x8c>)
 8000b6a:	8812      	ldrh	r2, [r2, #0]
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4a15      	ldr	r2, [pc, #84]	@ (8000bc4 <TIM3_IRQHandler+0x88>)
 8000b70:	440b      	add	r3, r1
 8000b72:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 8000b74:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <TIM3_IRQHandler+0x90>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <TIM3_IRQHandler+0x90>)
 8000b7c:	6013      	str	r3, [r2, #0]
	 }
		TIM3->SR &= ~(1 << 0); // clear the uif
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <TIM3_IRQHandler+0x88>)
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <TIM3_IRQHandler+0x88>)
 8000b84:	f023 0301 	bic.w	r3, r3, #1
 8000b88:	6113      	str	r3, [r2, #16]
		counter3 ++;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <TIM3_IRQHandler+0x94>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	3301      	adds	r3, #1
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <TIM3_IRQHandler+0x94>)
 8000b96:	801a      	strh	r2, [r3, #0]
		if (counter3 == n3){
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <TIM3_IRQHandler+0x94>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <TIM3_IRQHandler+0x98>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d10a      	bne.n	8000bbe <TIM3_IRQHandler+0x82>
			counter3 = 0;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <TIM3_IRQHandler+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	801a      	strh	r2, [r3, #0]
			TIM3->CNT = preload3; // set the preload
 8000bae:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <TIM3_IRQHandler+0x9c>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <TIM3_IRQHandler+0x88>)
 8000bb6:	625a      	str	r2, [r3, #36]	@ 0x24
			callback3();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <TIM3_IRQHandler+0xa0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4798      	blx	r3
		}
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40000400 	.word	0x40000400
 8000bc8:	20000058 	.word	0x20000058
 8000bcc:	20000054 	.word	0x20000054
 8000bd0:	20000042 	.word	0x20000042
 8000bd4:	20000036 	.word	0x20000036
 8000bd8:	2000002a 	.word	0x2000002a
 8000bdc:	2000004c 	.word	0x2000004c

08000be0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	if ((TIM4->SR & (1 << 0)) == 1){ // check the uif flag
 8000be4:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <TIM4_IRQHandler+0x88>)
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d138      	bne.n	8000c62 <TIM4_IRQHandler+0x82>
		if (TIM4->SR & TIM_SR_CC1IF){
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <TIM4_IRQHandler+0x88>)
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d012      	beq.n	8000c22 <TIM4_IRQHandler+0x42>
			TIM4->SR &= ~TIM_SR_CC1IF;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <TIM4_IRQHandler+0x88>)
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <TIM4_IRQHandler+0x88>)
 8000c02:	f023 0302 	bic.w	r3, r3, #2
 8000c06:	6113      	str	r3, [r2, #16]
			TIM4->CCR1 += trigTime_ms_global;
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <TIM4_IRQHandler+0x88>)
 8000c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c0c:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <TIM4_IRQHandler+0x8c>)
 8000c0e:	8812      	ldrh	r2, [r2, #0]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4a15      	ldr	r2, [pc, #84]	@ (8000c68 <TIM4_IRQHandler+0x88>)
 8000c14:	440b      	add	r3, r1
 8000c16:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 8000c18:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <TIM4_IRQHandler+0x90>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <TIM4_IRQHandler+0x90>)
 8000c20:	6013      	str	r3, [r2, #0]
	 }
		TIM4->SR &= ~(1 << 0); // clear the uif
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <TIM4_IRQHandler+0x88>)
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	4a10      	ldr	r2, [pc, #64]	@ (8000c68 <TIM4_IRQHandler+0x88>)
 8000c28:	f023 0301 	bic.w	r3, r3, #1
 8000c2c:	6113      	str	r3, [r2, #16]
		counter4 ++;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <TIM4_IRQHandler+0x94>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3301      	adds	r3, #1
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <TIM4_IRQHandler+0x94>)
 8000c3a:	801a      	strh	r2, [r3, #0]
		if (counter4 == n4){
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <TIM4_IRQHandler+0x94>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <TIM4_IRQHandler+0x98>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d10a      	bne.n	8000c62 <TIM4_IRQHandler+0x82>
			counter4 = 0;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <TIM4_IRQHandler+0x94>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	801a      	strh	r2, [r3, #0]
			TIM4->CNT = preload4; // set the preload
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <TIM4_IRQHandler+0x9c>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <TIM4_IRQHandler+0x88>)
 8000c5a:	625a      	str	r2, [r3, #36]	@ 0x24
			callback4();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <TIM4_IRQHandler+0xa0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4798      	blx	r3
		}
	}
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40000800 	.word	0x40000800
 8000c6c:	20000058 	.word	0x20000058
 8000c70:	20000054 	.word	0x20000054
 8000c74:	20000044 	.word	0x20000044
 8000c78:	20000038 	.word	0x20000038
 8000c7c:	2000002c 	.word	0x2000002c
 8000c80:	20000050 	.word	0x20000050

08000c84 <__libc_init_array>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	2600      	movs	r6, #0
 8000c88:	4d0c      	ldr	r5, [pc, #48]	@ (8000cbc <__libc_init_array+0x38>)
 8000c8a:	4c0d      	ldr	r4, [pc, #52]	@ (8000cc0 <__libc_init_array+0x3c>)
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	10a4      	asrs	r4, r4, #2
 8000c90:	42a6      	cmp	r6, r4
 8000c92:	d109      	bne.n	8000ca8 <__libc_init_array+0x24>
 8000c94:	f000 f81a 	bl	8000ccc <_init>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	4d0a      	ldr	r5, [pc, #40]	@ (8000cc4 <__libc_init_array+0x40>)
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <__libc_init_array+0x44>)
 8000c9e:	1b64      	subs	r4, r4, r5
 8000ca0:	10a4      	asrs	r4, r4, #2
 8000ca2:	42a6      	cmp	r6, r4
 8000ca4:	d105      	bne.n	8000cb2 <__libc_init_array+0x2e>
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cac:	4798      	blx	r3
 8000cae:	3601      	adds	r6, #1
 8000cb0:	e7ee      	b.n	8000c90 <__libc_init_array+0xc>
 8000cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb6:	4798      	blx	r3
 8000cb8:	3601      	adds	r6, #1
 8000cba:	e7f2      	b.n	8000ca2 <__libc_init_array+0x1e>
 8000cbc:	08000ce4 	.word	0x08000ce4
 8000cc0:	08000ce4 	.word	0x08000ce4
 8000cc4:	08000ce4 	.word	0x08000ce4
 8000cc8:	08000ce8 	.word	0x08000ce8

08000ccc <_init>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	bf00      	nop
 8000cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd2:	bc08      	pop	{r3}
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	4770      	bx	lr

08000cd8 <_fini>:
 8000cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cda:	bf00      	nop
 8000cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cde:	bc08      	pop	{r3}
 8000ce0:	469e      	mov	lr, r3
 8000ce2:	4770      	bx	lr
