
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000199c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001aa8  08001aa8  00003074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001aa8  08001aa8  00003074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001aa8  08001aa8  00003074  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001aa8  08001aa8  00003074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa8  08001aa8  00002aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001aac  08001aac  00002aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08001ab0  00003000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000078  08001b24  00003078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08001b24  0000310c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000026af  00000000  00000000  0000309d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b72  00000000  00000000  0000574c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  000062c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000221  00000000  00000000  000065b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165a4  00000000  00000000  000067d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004d42  00000000  00000000  0001cd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f4cb  00000000  00000000  00021abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0f8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ad4  00000000  00000000  000a0fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000a1aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a90 	.word	0x08001a90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08001a90 	.word	0x08001a90

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <delay_ms>:
    10.0f, 8.0f, 5.0f, 2.0f, 1.0f, 0.0f, -1.0f, -2.0f, -5.0f, -8.0f, -10.0f
};
int angle_count = sizeof(simulated_angles) / sizeof(simulated_angles[0]);

// Dummy delay (for simulation only)
void delay_ms(uint32_t ms) {
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e003      	b.n	800074a <delay_ms+0x16>
        __asm("NOP");
 8000742:	bf00      	nop
    for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3301      	adds	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000750:	fb03 f202 	mul.w	r2, r3, r2
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	429a      	cmp	r2, r3
 8000758:	d8f3      	bhi.n	8000742 <delay_ms+0xe>
    }
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
	...

08000768 <main>:

int main(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b09a      	sub	sp, #104	@ 0x68
 800076c:	af0a      	add	r7, sp, #40	@ 0x28
    // === Left Motor (TIM3, PA4/PA5) ===


	TIM_TypeDef *leftTimer = TIM3;
 800076e:	4b40      	ldr	r3, [pc, #256]	@ (8000870 <main+0x108>)
 8000770:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint8_t leftChannel = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    GPIO_TypeDef *leftDir1Port = GPIOA; uint8_t leftDir1Pin = 4;
 8000778:	4b3e      	ldr	r3, [pc, #248]	@ (8000874 <main+0x10c>)
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
 800077c:	2304      	movs	r3, #4
 800077e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    GPIO_TypeDef *leftDir2Port = GPIOA; uint8_t leftDir2Pin = 5;
 8000782:	4b3c      	ldr	r3, [pc, #240]	@ (8000874 <main+0x10c>)
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000786:	2305      	movs	r3, #5
 8000788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // === Right Motor (TIM4, PB6/PB7) ===
    TIM_TypeDef *rightTimer = TIM4;
 800078c:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <main+0x110>)
 800078e:	623b      	str	r3, [r7, #32]
    uint8_t rightChannel = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	77fb      	strb	r3, [r7, #31]
    GPIO_TypeDef *rightDir1Port = GPIOA; uint8_t rightDir1Pin = 2;
 8000794:	4b37      	ldr	r3, [pc, #220]	@ (8000874 <main+0x10c>)
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	2302      	movs	r3, #2
 800079a:	75fb      	strb	r3, [r7, #23]
    GPIO_TypeDef *rightDir2Port = GPIOA; uint8_t rightDir2Pin = 3;
 800079c:	4b35      	ldr	r3, [pc, #212]	@ (8000874 <main+0x10c>)
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	2303      	movs	r3, #3
 80007a2:	73fb      	strb	r3, [r7, #15]

    // === Init Car Motors ===
    CAR_init(leftTimer, leftChannel, PWM_FREQ_HZ,
 80007a4:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	9308      	str	r3, [sp, #32]
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	9307      	str	r3, [sp, #28]
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	9306      	str	r3, [sp, #24]
 80007b8:	4b30      	ldr	r3, [pc, #192]	@ (800087c <main+0x114>)
 80007ba:	9305      	str	r3, [sp, #20]
 80007bc:	7ffb      	ldrb	r3, [r7, #31]
 80007be:	9304      	str	r3, [sp, #16]
 80007c0:	6a3b      	ldr	r3, [r7, #32]
 80007c2:	9303      	str	r3, [sp, #12]
 80007c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007c8:	9302      	str	r3, [sp, #8]
 80007ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007d6:	4a29      	ldr	r2, [pc, #164]	@ (800087c <main+0x114>)
 80007d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80007da:	f000 f8c9 	bl	8000970 <CAR_init>
             leftDir1Port, leftDir2Port, leftDir1Pin, leftDir2Pin,
             rightTimer, rightChannel, PWM_FREQ_HZ,
             rightDir1Port, rightDir2Port, rightDir1Pin, rightDir2Pin);

    // === Init Millisecond Timer (TIM2 used for timing) ===
    TIM_initMillis(TIM2, 1);  // 1ms resolution
 80007de:	2101      	movs	r1, #1
 80007e0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80007e4:	f000 ffa6 	bl	8001734 <TIM_initMillis>
    delay_ms(500);
 80007e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ec:	f7ff ffa2 	bl	8000734 <delay_ms>

    // === Initialize PD controllers ===
    PD_init(6.0f, 3.0f);        // Distance PD
 80007f0:	4923      	ldr	r1, [pc, #140]	@ (8000880 <main+0x118>)
 80007f2:	4824      	ldr	r0, [pc, #144]	@ (8000884 <main+0x11c>)
 80007f4:	f000 fb30 	bl	8000e58 <PD_init>
    PD_init_angle(8.0f, 1.0f);  // Angle control gains
 80007f8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80007fc:	f04f 4082 	mov.w	r0, #1090519040	@ 0x41000000
 8000800:	f000 fa1c 	bl	8000c3c <PD_init_angle>

    for (int i = 0; i < distance_count; i++) {
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000808:	e029      	b.n	800085e <main+0xf6>
        float distance = simulated_distances[i];
 800080a:	4a1f      	ldr	r2, [pc, #124]	@ (8000888 <main+0x120>)
 800080c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000812:	60bb      	str	r3, [r7, #8]
        float angle = simulated_angles[i % angle_count]; // Loop angles if fewer
 8000814:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <main+0x124>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800081a:	fb93 f1f2 	sdiv	r1, r3, r2
 800081e:	fb01 f202 	mul.w	r2, r1, r2
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	4a1a      	ldr	r2, [pc, #104]	@ (8000890 <main+0x128>)
 8000826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082a:	607b      	str	r3, [r7, #4]

        current_time_ms = TIM_Millis();
 800082c:	f000 ffdc 	bl	80017e8 <TIM_Millis>
 8000830:	4602      	mov	r2, r0
 8000832:	460b      	mov	r3, r1
 8000834:	4917      	ldr	r1, [pc, #92]	@ (8000894 <main+0x12c>)
 8000836:	e9c1 2300 	strd	r2, r3, [r1]
        // Update distance control (forward/backward speed)
        PD_update_from_distance(distance, current_time_ms);
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <main+0x12c>)
 800083c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f000 fb1d 	bl	8000e80 <PD_update_from_distance>

        // Update angle control (turning)

        PD_update_angle(angle, current_time_ms);
 8000846:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <main+0x12c>)
 8000848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 fa09 	bl	8000c64 <PD_update_angle>


        delay_ms(SIMULATION_DELAY_MS);
 8000852:	2046      	movs	r0, #70	@ 0x46
 8000854:	f7ff ff6e 	bl	8000734 <delay_ms>
    for (int i = 0; i < distance_count; i++) {
 8000858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800085a:	3301      	adds	r3, #1
 800085c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <main+0x130>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000864:	429a      	cmp	r2, r3
 8000866:	dbd0      	blt.n	800080a <main+0xa2>
    }

    CAR_stop();  // Stop motors at end of simulation
 8000868:	f000 f99a 	bl	8000ba0 <CAR_stop>

    while (1);
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <main+0x104>
 8000870:	40000400 	.word	0x40000400
 8000874:	40010800 	.word	0x40010800
 8000878:	40000800 	.word	0x40000800
 800087c:	447a0000 	.word	0x447a0000
 8000880:	40400000 	.word	0x40400000
 8000884:	40c00000 	.word	0x40c00000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000068 	.word	0x20000068
 8000890:	2000003c 	.word	0x2000003c
 8000894:	20000000 	.word	0x20000000
 8000898:	20000038 	.word	0x20000038

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f82e 	bl	800094c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <Reset_Handler>:





    bl  SystemInit
 8000900:	f7ff fff8 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480b      	ldr	r0, [pc, #44]	@ (8000934 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000906:	490c      	ldr	r1, [pc, #48]	@ (8000938 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000908:	4a0c      	ldr	r2, [pc, #48]	@ (800093c <LoopFillZerobss+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800091c:	4c09      	ldr	r4, [pc, #36]	@ (8000944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f001 f88d 	bl	8001a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092e:	f7ff ff1b 	bl	8000768 <main>
  bx lr
 8000932:	4770      	bx	lr
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800093c:	08001ab0 	.word	0x08001ab0
  ldr r2, =_sbss
 8000940:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000944:	2000010c 	.word	0x2000010c

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <HAL_IncTick+0x1c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_IncTick+0x20>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	4a03      	ldr	r2, [pc, #12]	@ (800096c <HAL_IncTick+0x20>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	2000006c 	.word	0x2000006c
 800096c:	20000094 	.word	0x20000094

08000970 <CAR_init>:
uint8_t DirRight2Pin_global;

void CAR_init(TIM_TypeDef *TimxLeft ,uint8_t ChannelLeft, float FrequencyLeft,
              GPIO_TypeDef *DirLeft1, GPIO_TypeDef *DirLeft2, uint8_t DirLeft1Pin, uint8_t DirLeft2Pin,
              TIM_TypeDef *TimxRight ,uint8_t ChannelRight, float FrequencyRight,
              GPIO_TypeDef *DirRight1, GPIO_TypeDef *DirRight2, uint8_t DirRight1Pin, uint8_t DirRight2Pin) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	607a      	str	r2, [r7, #4]
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	460b      	mov	r3, r1
 800097e:	72fb      	strb	r3, [r7, #11]

    // Store GPIO pointers and pin numbers
    DirLeft1_global = DirLeft1;
 8000980:	4a29      	ldr	r2, [pc, #164]	@ (8000a28 <CAR_init+0xb8>)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	6013      	str	r3, [r2, #0]
    DirLeft2_global = DirLeft2;
 8000986:	4a29      	ldr	r2, [pc, #164]	@ (8000a2c <CAR_init+0xbc>)
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	6013      	str	r3, [r2, #0]
    DirRight1_global = DirRight1;
 800098c:	4a28      	ldr	r2, [pc, #160]	@ (8000a30 <CAR_init+0xc0>)
 800098e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000990:	6013      	str	r3, [r2, #0]
    DirRight2_global = DirRight2;
 8000992:	4a28      	ldr	r2, [pc, #160]	@ (8000a34 <CAR_init+0xc4>)
 8000994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000996:	6013      	str	r3, [r2, #0]

    DirLeft1Pin_global = DirLeft1Pin;
 8000998:	4a27      	ldr	r2, [pc, #156]	@ (8000a38 <CAR_init+0xc8>)
 800099a:	7f3b      	ldrb	r3, [r7, #28]
 800099c:	7013      	strb	r3, [r2, #0]
    DirLeft2Pin_global = DirLeft2Pin;
 800099e:	4a27      	ldr	r2, [pc, #156]	@ (8000a3c <CAR_init+0xcc>)
 80009a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009a4:	7013      	strb	r3, [r2, #0]
    DirRight1Pin_global = DirRight1Pin;
 80009a6:	4a26      	ldr	r2, [pc, #152]	@ (8000a40 <CAR_init+0xd0>)
 80009a8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80009ac:	7013      	strb	r3, [r2, #0]
    DirRight2Pin_global = DirRight2Pin;
 80009ae:	4a25      	ldr	r2, [pc, #148]	@ (8000a44 <CAR_init+0xd4>)
 80009b0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80009b4:	7013      	strb	r3, [r2, #0]

    // Configure all direction pins as outputs
    GPIO_pinMode(DirLeft1, DirLeft1Pin, OUTPUT);
 80009b6:	7f3b      	ldrb	r3, [r7, #28]
 80009b8:	2203      	movs	r2, #3
 80009ba:	4619      	mov	r1, r3
 80009bc:	6838      	ldr	r0, [r7, #0]
 80009be:	f000 fb2b 	bl	8001018 <GPIO_pinMode>
    GPIO_pinMode(DirLeft2, DirLeft2Pin, OUTPUT);
 80009c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009c6:	2203      	movs	r2, #3
 80009c8:	4619      	mov	r1, r3
 80009ca:	69b8      	ldr	r0, [r7, #24]
 80009cc:	f000 fb24 	bl	8001018 <GPIO_pinMode>
    GPIO_pinMode(DirRight1, DirRight1Pin, OUTPUT);
 80009d0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80009d4:	2203      	movs	r2, #3
 80009d6:	4619      	mov	r1, r3
 80009d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009da:	f000 fb1d 	bl	8001018 <GPIO_pinMode>
    GPIO_pinMode(DirRight2, DirRight2Pin, OUTPUT);
 80009de:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80009e2:	2203      	movs	r2, #3
 80009e4:	4619      	mov	r1, r3
 80009e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80009e8:	f000 fb16 	bl	8001018 <GPIO_pinMode>

    // Store timer and channel configuration
    TimxLeft_global = TimxLeft;
 80009ec:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <CAR_init+0xd8>)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6013      	str	r3, [r2, #0]
    TimxRight_global = TimxRight;
 80009f2:	4a16      	ldr	r2, [pc, #88]	@ (8000a4c <CAR_init+0xdc>)
 80009f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f6:	6013      	str	r3, [r2, #0]
    ChannelLeft_global = ChannelLeft;
 80009f8:	4a15      	ldr	r2, [pc, #84]	@ (8000a50 <CAR_init+0xe0>)
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	7013      	strb	r3, [r2, #0]
    ChannelRight_global = ChannelRight;
 80009fe:	4a15      	ldr	r2, [pc, #84]	@ (8000a54 <CAR_init+0xe4>)
 8000a00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a04:	7013      	strb	r3, [r2, #0]

    // Initialize PWM channels
    TIM_initPWM(TimxLeft, ChannelLeft, FrequencyLeft);
 8000a06:	7afb      	ldrb	r3, [r7, #11]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f000 fbfd 	bl	800120c <TIM_initPWM>
    TIM_initPWM(TimxRight, ChannelRight, FrequencyRight);
 8000a12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a18:	4619      	mov	r1, r3
 8000a1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a1c:	f000 fbf6 	bl	800120c <TIM_initPWM>
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200000a4 	.word	0x200000a4
 8000a2c:	200000a8 	.word	0x200000a8
 8000a30:	200000ac 	.word	0x200000ac
 8000a34:	200000b0 	.word	0x200000b0
 8000a38:	200000b4 	.word	0x200000b4
 8000a3c:	200000b5 	.word	0x200000b5
 8000a40:	200000b6 	.word	0x200000b6
 8000a44:	200000b7 	.word	0x200000b7
 8000a48:	20000098 	.word	0x20000098
 8000a4c:	2000009c 	.word	0x2000009c
 8000a50:	200000a0 	.word	0x200000a0
 8000a54:	200000a1 	.word	0x200000a1

08000a58 <CAR_forward>:

void CAR_forward(float rightSpeed ,float leftSpeed) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
    // Left motor forward
    GPIO_digitalWrite(DirLeft1_global, DirLeft1Pin_global, HIGH);
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <CAR_forward+0x74>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad0 <CAR_forward+0x78>)
 8000a68:	7811      	ldrb	r1, [r2, #0]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fb85 	bl	800117c <GPIO_digitalWrite>
    GPIO_digitalWrite(DirLeft2_global, DirLeft2Pin_global, LOW);
 8000a72:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <CAR_forward+0x7c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a18      	ldr	r2, [pc, #96]	@ (8000ad8 <CAR_forward+0x80>)
 8000a78:	7811      	ldrb	r1, [r2, #0]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fb7d 	bl	800117c <GPIO_digitalWrite>
    // Right motor forward
    GPIO_digitalWrite(DirRight1_global, DirRight1Pin_global, HIGH);
 8000a82:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <CAR_forward+0x84>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a16      	ldr	r2, [pc, #88]	@ (8000ae0 <CAR_forward+0x88>)
 8000a88:	7811      	ldrb	r1, [r2, #0]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fb75 	bl	800117c <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight2_global, DirRight2Pin_global, LOW);
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <CAR_forward+0x8c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a14      	ldr	r2, [pc, #80]	@ (8000ae8 <CAR_forward+0x90>)
 8000a98:	7811      	ldrb	r1, [r2, #0]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fb6d 	bl	800117c <GPIO_digitalWrite>

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, leftSpeed);
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <CAR_forward+0x94>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <CAR_forward+0x98>)
 8000aa8:	7811      	ldrb	r1, [r2, #0]
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fda9 	bl	8001604 <TIM_writePWM>
    TIM_writePWM(TimxRight_global, ChannelRight_global, rightSpeed);
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <CAR_forward+0x9c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a10      	ldr	r2, [pc, #64]	@ (8000af8 <CAR_forward+0xa0>)
 8000ab8:	7811      	ldrb	r1, [r2, #0]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fda1 	bl	8001604 <TIM_writePWM>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000a4 	.word	0x200000a4
 8000ad0:	200000b4 	.word	0x200000b4
 8000ad4:	200000a8 	.word	0x200000a8
 8000ad8:	200000b5 	.word	0x200000b5
 8000adc:	200000ac 	.word	0x200000ac
 8000ae0:	200000b6 	.word	0x200000b6
 8000ae4:	200000b0 	.word	0x200000b0
 8000ae8:	200000b7 	.word	0x200000b7
 8000aec:	20000098 	.word	0x20000098
 8000af0:	200000a0 	.word	0x200000a0
 8000af4:	2000009c 	.word	0x2000009c
 8000af8:	200000a1 	.word	0x200000a1

08000afc <CAR_backwards>:

void CAR_backwards(float rightSpeed , float leftSpeed) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
    // Left motor backward
    GPIO_digitalWrite(DirLeft1_global, DirLeft1Pin_global, LOW);
 8000b06:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <CAR_backwards+0x74>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b74 <CAR_backwards+0x78>)
 8000b0c:	7811      	ldrb	r1, [r2, #0]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fb33 	bl	800117c <GPIO_digitalWrite>
    GPIO_digitalWrite(DirLeft2_global, DirLeft2Pin_global, HIGH);
 8000b16:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <CAR_backwards+0x7c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a18      	ldr	r2, [pc, #96]	@ (8000b7c <CAR_backwards+0x80>)
 8000b1c:	7811      	ldrb	r1, [r2, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fb2b 	bl	800117c <GPIO_digitalWrite>
    // Right motor backward
    GPIO_digitalWrite(DirRight1_global, DirRight1Pin_global, LOW);
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <CAR_backwards+0x84>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <CAR_backwards+0x88>)
 8000b2c:	7811      	ldrb	r1, [r2, #0]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fb23 	bl	800117c <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight2_global, DirRight2Pin_global, HIGH);
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <CAR_backwards+0x8c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a14      	ldr	r2, [pc, #80]	@ (8000b8c <CAR_backwards+0x90>)
 8000b3c:	7811      	ldrb	r1, [r2, #0]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fb1b 	bl	800117c <GPIO_digitalWrite>

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, leftSpeed);
 8000b46:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <CAR_backwards+0x94>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <CAR_backwards+0x98>)
 8000b4c:	7811      	ldrb	r1, [r2, #0]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fd57 	bl	8001604 <TIM_writePWM>
    TIM_writePWM(TimxRight_global, ChannelRight_global, rightSpeed);
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <CAR_backwards+0x9c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <CAR_backwards+0xa0>)
 8000b5c:	7811      	ldrb	r1, [r2, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fd4f 	bl	8001604 <TIM_writePWM>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000a4 	.word	0x200000a4
 8000b74:	200000b4 	.word	0x200000b4
 8000b78:	200000a8 	.word	0x200000a8
 8000b7c:	200000b5 	.word	0x200000b5
 8000b80:	200000ac 	.word	0x200000ac
 8000b84:	200000b6 	.word	0x200000b6
 8000b88:	200000b0 	.word	0x200000b0
 8000b8c:	200000b7 	.word	0x200000b7
 8000b90:	20000098 	.word	0x20000098
 8000b94:	200000a0 	.word	0x200000a0
 8000b98:	2000009c 	.word	0x2000009c
 8000b9c:	200000a1 	.word	0x200000a1

08000ba0 <CAR_stop>:

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, leftSpeed);
    TIM_writePWM(TimxRight_global, ChannelRight_global, rightSpeed);
}

void CAR_stop() {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    // Brake both motors
    GPIO_digitalWrite(DirLeft1_global, DirLeft1Pin_global, LOW);
 8000ba4:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <CAR_stop+0x6c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	@ (8000c10 <CAR_stop+0x70>)
 8000baa:	7811      	ldrb	r1, [r2, #0]
 8000bac:	2201      	movs	r2, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fae4 	bl	800117c <GPIO_digitalWrite>
    GPIO_digitalWrite(DirLeft2_global, DirLeft2Pin_global, LOW);
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <CAR_stop+0x74>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <CAR_stop+0x78>)
 8000bba:	7811      	ldrb	r1, [r2, #0]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fadc 	bl	800117c <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight1_global, DirRight1Pin_global, LOW);
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <CAR_stop+0x7c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a15      	ldr	r2, [pc, #84]	@ (8000c20 <CAR_stop+0x80>)
 8000bca:	7811      	ldrb	r1, [r2, #0]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fad4 	bl	800117c <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight2_global, DirRight2Pin_global, LOW);
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <CAR_stop+0x84>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a13      	ldr	r2, [pc, #76]	@ (8000c28 <CAR_stop+0x88>)
 8000bda:	7811      	ldrb	r1, [r2, #0]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 facc 	bl	800117c <GPIO_digitalWrite>

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, 0);
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <CAR_stop+0x8c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a11      	ldr	r2, [pc, #68]	@ (8000c30 <CAR_stop+0x90>)
 8000bea:	7811      	ldrb	r1, [r2, #0]
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fd07 	bl	8001604 <TIM_writePWM>
    TIM_writePWM(TimxRight_global, ChannelRight_global, 0);
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <CAR_stop+0x94>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <CAR_stop+0x98>)
 8000bfc:	7811      	ldrb	r1, [r2, #0]
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fcfe 	bl	8001604 <TIM_writePWM>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200000a4 	.word	0x200000a4
 8000c10:	200000b4 	.word	0x200000b4
 8000c14:	200000a8 	.word	0x200000a8
 8000c18:	200000b5 	.word	0x200000b5
 8000c1c:	200000ac 	.word	0x200000ac
 8000c20:	200000b6 	.word	0x200000b6
 8000c24:	200000b0 	.word	0x200000b0
 8000c28:	200000b7 	.word	0x200000b7
 8000c2c:	20000098 	.word	0x20000098
 8000c30:	200000a0 	.word	0x200000a0
 8000c34:	2000009c 	.word	0x2000009c
 8000c38:	200000a1 	.word	0x200000a1

08000c3c <PD_init_angle>:
float prev_angle_time = 0;
float servo_output = 0;
#define maxDistance 5 //5cm from target
#define mainAngle 0

void PD_init_angle(float Kp, float Kd) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
    kp_angle = Kp;
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <PD_init_angle+0x20>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6013      	str	r3, [r2, #0]
    kd_angle = Kd;
 8000c4c:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <PD_init_angle+0x24>)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	200000cc 	.word	0x200000cc
 8000c60:	200000d0 	.word	0x200000d0

08000c64 <PD_update_angle>:

// Update angle control, currentAngle and targetAngle in degrees
void PD_update_angle(float currentAngle, uint64_t time_ms) {
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b08d      	sub	sp, #52	@ 0x34
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	e9c7 2300 	strd	r2, r3, [r7]
    float error = mainAngle - currentAngle;  // desired - current
 8000c70:	68f9      	ldr	r1, [r7, #12]
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	f7ff fa6d 	bl	8000154 <__aeabi_fsub>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	61fb      	str	r3, [r7, #28]
    float dt = (time_ms - prev_angle_time) / 1000.0f;
 8000c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c82:	f7ff fb2b 	bl	80002dc <__aeabi_ul2f>
 8000c86:	4602      	mov	r2, r0
 8000c88:	4b6a      	ldr	r3, [pc, #424]	@ (8000e34 <PD_update_angle+0x1d0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4610      	mov	r0, r2
 8000c90:	f7ff fa60 	bl	8000154 <__aeabi_fsub>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4968      	ldr	r1, [pc, #416]	@ (8000e38 <PD_update_angle+0x1d4>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fc19 	bl	80004d0 <__aeabi_fdiv>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dt <= 0) dt = 0.001f;
 8000ca2:	f04f 0100 	mov.w	r1, #0
 8000ca6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000ca8:	f7ff fd06 	bl	80006b8 <__aeabi_fcmple>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <PD_update_angle+0x52>
 8000cb2:	4b62      	ldr	r3, [pc, #392]	@ (8000e3c <PD_update_angle+0x1d8>)
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float derivative = (error - prev_angle_error) / dt;
 8000cb6:	4b62      	ldr	r3, [pc, #392]	@ (8000e40 <PD_update_angle+0x1dc>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	69f8      	ldr	r0, [r7, #28]
 8000cbe:	f7ff fa49 	bl	8000154 <__aeabi_fsub>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fc02 	bl	80004d0 <__aeabi_fdiv>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	61bb      	str	r3, [r7, #24]

    prev_angle_error = error;
 8000cd0:	4a5b      	ldr	r2, [pc, #364]	@ (8000e40 <PD_update_angle+0x1dc>)
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	6013      	str	r3, [r2, #0]
    prev_angle_time = time_ms;
 8000cd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cda:	f7ff faff 	bl	80002dc <__aeabi_ul2f>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a54      	ldr	r2, [pc, #336]	@ (8000e34 <PD_update_angle+0x1d0>)
 8000ce2:	6013      	str	r3, [r2, #0]

    float steering_correction = kp_angle * error + kd_angle * derivative;
 8000ce4:	4b57      	ldr	r3, [pc, #348]	@ (8000e44 <PD_update_angle+0x1e0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	69f9      	ldr	r1, [r7, #28]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fb3c 	bl	8000368 <__aeabi_fmul>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461c      	mov	r4, r3
 8000cf4:	4b54      	ldr	r3, [pc, #336]	@ (8000e48 <PD_update_angle+0x1e4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	69b9      	ldr	r1, [r7, #24]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fb34 	bl	8000368 <__aeabi_fmul>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4620      	mov	r0, r4
 8000d06:	f7ff fa27 	bl	8000158 <__addsf3>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Clamp correction
    if (steering_correction > 100) steering_correction = 100;
 8000d0e:	494f      	ldr	r1, [pc, #316]	@ (8000e4c <PD_update_angle+0x1e8>)
 8000d10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d12:	f7ff fce5 	bl	80006e0 <__aeabi_fcmpgt>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <PD_update_angle+0xbe>
 8000d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e4c <PD_update_angle+0x1e8>)
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d20:	e008      	b.n	8000d34 <PD_update_angle+0xd0>
    else if (steering_correction < -100) steering_correction = -100;
 8000d22:	494b      	ldr	r1, [pc, #300]	@ (8000e50 <PD_update_angle+0x1ec>)
 8000d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d26:	f7ff fcbd 	bl	80006a4 <__aeabi_fcmplt>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <PD_update_angle+0xd0>
 8000d30:	4b47      	ldr	r3, [pc, #284]	@ (8000e50 <PD_update_angle+0x1ec>)
 8000d32:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Use global forward speed (assumed non-negative)
    float base_speed = (speed >= 0) ? speed : 0;
 8000d34:	4b47      	ldr	r3, [pc, #284]	@ (8000e54 <PD_update_angle+0x1f0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f04f 0100 	mov.w	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fcc5 	bl	80006cc <__aeabi_fcmpge>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <PD_update_angle+0xea>
 8000d48:	4b42      	ldr	r3, [pc, #264]	@ (8000e54 <PD_update_angle+0x1f0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	e001      	b.n	8000d52 <PD_update_angle+0xee>
 8000d4e:	f04f 0300 	mov.w	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

    // Calculate motor speeds by adding/subtracting steering correction
    float left_motor_speed = base_speed;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
    float right_motor_speed = base_speed;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	623b      	str	r3, [r7, #32]

    if (error > 0) {
 8000d5c:	f04f 0100 	mov.w	r1, #0
 8000d60:	69f8      	ldr	r0, [r7, #28]
 8000d62:	f7ff fcbd 	bl	80006e0 <__aeabi_fcmpgt>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00c      	beq.n	8000d86 <PD_update_angle+0x122>
        // Turn left: right motor faster, left motor slower
        right_motor_speed = base_speed + steering_correction;
 8000d6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff f9f2 	bl	8000158 <__addsf3>
 8000d74:	4603      	mov	r3, r0
 8000d76:	623b      	str	r3, [r7, #32]
        left_motor_speed = base_speed - steering_correction;
 8000d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff f9ea 	bl	8000154 <__aeabi_fsub>
 8000d80:	4603      	mov	r3, r0
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d84:	e013      	b.n	8000dae <PD_update_angle+0x14a>
    } else if (error < 0) {
 8000d86:	f04f 0100 	mov.w	r1, #0
 8000d8a:	69f8      	ldr	r0, [r7, #28]
 8000d8c:	f7ff fc8a 	bl	80006a4 <__aeabi_fcmplt>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00b      	beq.n	8000dae <PD_update_angle+0x14a>
        // Turn right: left motor faster, right motor slower
        right_motor_speed = base_speed - (-steering_correction);  // steering_correction negative here
 8000d96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d98:	6978      	ldr	r0, [r7, #20]
 8000d9a:	f7ff f9dd 	bl	8000158 <__addsf3>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	623b      	str	r3, [r7, #32]
        left_motor_speed = base_speed + (-steering_correction);
 8000da2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000da4:	6978      	ldr	r0, [r7, #20]
 8000da6:	f7ff f9d5 	bl	8000154 <__aeabi_fsub>
 8000daa:	4603      	mov	r3, r0
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Clamp motor speeds to [0, 100]
    if (left_motor_speed > 100) left_motor_speed = 100;
 8000dae:	4927      	ldr	r1, [pc, #156]	@ (8000e4c <PD_update_angle+0x1e8>)
 8000db0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000db2:	f7ff fc95 	bl	80006e0 <__aeabi_fcmpgt>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <PD_update_angle+0x15c>
 8000dbc:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <PD_update_angle+0x1e8>)
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    if (left_motor_speed < 0) left_motor_speed = 0;
 8000dc0:	f04f 0100 	mov.w	r1, #0
 8000dc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000dc6:	f7ff fc6d 	bl	80006a4 <__aeabi_fcmplt>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <PD_update_angle+0x172>
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (right_motor_speed > 100) right_motor_speed = 100;
 8000dd6:	491d      	ldr	r1, [pc, #116]	@ (8000e4c <PD_update_angle+0x1e8>)
 8000dd8:	6a38      	ldr	r0, [r7, #32]
 8000dda:	f7ff fc81 	bl	80006e0 <__aeabi_fcmpgt>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <PD_update_angle+0x184>
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <PD_update_angle+0x1e8>)
 8000de6:	623b      	str	r3, [r7, #32]
    if (right_motor_speed < 0) right_motor_speed = 0;
 8000de8:	f04f 0100 	mov.w	r1, #0
 8000dec:	6a38      	ldr	r0, [r7, #32]
 8000dee:	f7ff fc59 	bl	80006a4 <__aeabi_fcmplt>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <PD_update_angle+0x19a>
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]

    // If speeds are almost equal and near zero, just stop or go straight
    if (left_motor_speed < 1 && right_motor_speed < 1) {
 8000dfe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e04:	f7ff fc4e 	bl	80006a4 <__aeabi_fcmplt>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00a      	beq.n	8000e24 <PD_update_angle+0x1c0>
 8000e0e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e12:	6a38      	ldr	r0, [r7, #32]
 8000e14:	f7ff fc46 	bl	80006a4 <__aeabi_fcmplt>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <PD_update_angle+0x1c0>
        CAR_stop();
 8000e1e:	f7ff febf 	bl	8000ba0 <CAR_stop>
        return;
 8000e22:	e003      	b.n	8000e2c <PD_update_angle+0x1c8>
    }

    // Drive motors forward with computed speeds
    CAR_forward(right_motor_speed, left_motor_speed);
 8000e24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e26:	6a38      	ldr	r0, [r7, #32]
 8000e28:	f7ff fe16 	bl	8000a58 <CAR_forward>
}
 8000e2c:	3734      	adds	r7, #52	@ 0x34
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000d8 	.word	0x200000d8
 8000e38:	447a0000 	.word	0x447a0000
 8000e3c:	3a83126f 	.word	0x3a83126f
 8000e40:	200000d4 	.word	0x200000d4
 8000e44:	200000cc 	.word	0x200000cc
 8000e48:	200000d0 	.word	0x200000d0
 8000e4c:	42c80000 	.word	0x42c80000
 8000e50:	c2c80000 	.word	0xc2c80000
 8000e54:	200000c8 	.word	0x200000c8

08000e58 <PD_init>:



void PD_init( float Kp, float Kd)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
kp_global=Kp;
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <PD_init+0x20>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6013      	str	r3, [r2, #0]
kd_global=Kd;
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <PD_init+0x24>)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	6013      	str	r3, [r2, #0]

}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	200000b8 	.word	0x200000b8
 8000e7c:	200000bc 	.word	0x200000bc

08000e80 <PD_update_from_distance>:
void PD_update_from_distance(float actualDistance, uint64_t time_ms)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	e9c7 2300 	strd	r2, r3, [r7]
    float error = actualDistance - maxDistance;
 8000e8c:	4958      	ldr	r1, [pc, #352]	@ (8000ff0 <PD_update_from_distance+0x170>)
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f7ff f960 	bl	8000154 <__aeabi_fsub>
 8000e94:	4603      	mov	r3, r0
 8000e96:	61fb      	str	r3, [r7, #28]
    float p = kp_global * error;
 8000e98:	4b56      	ldr	r3, [pc, #344]	@ (8000ff4 <PD_update_from_distance+0x174>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	69f8      	ldr	r0, [r7, #28]
 8000ea0:	f7ff fa62 	bl	8000368 <__aeabi_fmul>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	61bb      	str	r3, [r7, #24]
    float d = (error - prev_error) / ((time_ms - prev_time) / 1000.0f);
 8000ea8:	4b53      	ldr	r3, [pc, #332]	@ (8000ff8 <PD_update_from_distance+0x178>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	69f8      	ldr	r0, [r7, #28]
 8000eb0:	f7ff f950 	bl	8000154 <__aeabi_fsub>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461c      	mov	r4, r3
 8000eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ebc:	f7ff fa0e 	bl	80002dc <__aeabi_ul2f>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8000ffc <PD_update_from_distance+0x17c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f7ff f943 	bl	8000154 <__aeabi_fsub>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	494b      	ldr	r1, [pc, #300]	@ (8001000 <PD_update_from_distance+0x180>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fafc 	bl	80004d0 <__aeabi_fdiv>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4619      	mov	r1, r3
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff faf7 	bl	80004d0 <__aeabi_fdiv>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	617b      	str	r3, [r7, #20]
    prev_error = error;
 8000ee6:	4a44      	ldr	r2, [pc, #272]	@ (8000ff8 <PD_update_from_distance+0x178>)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	6013      	str	r3, [r2, #0]
    prev_time = time_ms;
 8000eec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ef0:	f7ff f9f4 	bl	80002dc <__aeabi_ul2f>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a41      	ldr	r2, [pc, #260]	@ (8000ffc <PD_update_from_distance+0x17c>)
 8000ef8:	6013      	str	r3, [r2, #0]

    speed = p + d;
 8000efa:	6979      	ldr	r1, [r7, #20]
 8000efc:	69b8      	ldr	r0, [r7, #24]
 8000efe:	f7ff f92b 	bl	8000158 <__addsf3>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b3f      	ldr	r3, [pc, #252]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f08:	601a      	str	r2, [r3, #0]

    // Clamp speed to [-100, 100]
    if (speed > 100.0f) {
 8000f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	493e      	ldr	r1, [pc, #248]	@ (8001008 <PD_update_from_distance+0x188>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fbe5 	bl	80006e0 <__aeabi_fcmpgt>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <PD_update_from_distance+0xa4>
        speed = 100.0f;
 8000f1c:	4b39      	ldr	r3, [pc, #228]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8001008 <PD_update_from_distance+0x188>)
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e00b      	b.n	8000f3c <PD_update_from_distance+0xbc>
    } else if (speed < -100.0f) {
 8000f24:	4b37      	ldr	r3, [pc, #220]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4938      	ldr	r1, [pc, #224]	@ (800100c <PD_update_from_distance+0x18c>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fbba 	bl	80006a4 <__aeabi_fcmplt>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <PD_update_from_distance+0xbc>
        speed = -100.0f;
 8000f36:	4b33      	ldr	r3, [pc, #204]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f38:	4a34      	ldr	r2, [pc, #208]	@ (800100c <PD_update_from_distance+0x18c>)
 8000f3a:	601a      	str	r2, [r3, #0]
    }

    // Apply deadband threshold
    if (speed > 0.0f && speed < 30.0f) {
 8000f3c:	4b31      	ldr	r3, [pc, #196]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f04f 0100 	mov.w	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fbcb 	bl	80006e0 <__aeabi_fcmpgt>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00c      	beq.n	8000f6a <PD_update_from_distance+0xea>
 8000f50:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	492e      	ldr	r1, [pc, #184]	@ (8001010 <PD_update_from_distance+0x190>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fba4 	bl	80006a4 <__aeabi_fcmplt>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <PD_update_from_distance+0xea>
        speed = 30.0f;  // Minimum forward speed
 8000f62:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f64:	4a2a      	ldr	r2, [pc, #168]	@ (8001010 <PD_update_from_distance+0x190>)
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e015      	b.n	8000f96 <PD_update_from_distance+0x116>
    } else if (speed < 0.0f && speed > -30.0f) {
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f04f 0100 	mov.w	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fb96 	bl	80006a4 <__aeabi_fcmplt>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00b      	beq.n	8000f96 <PD_update_from_distance+0x116>
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4924      	ldr	r1, [pc, #144]	@ (8001014 <PD_update_from_distance+0x194>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fbab 	bl	80006e0 <__aeabi_fcmpgt>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <PD_update_from_distance+0x116>
        speed = -30.0f; // Minimum backward speed
 8000f90:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f92:	4a20      	ldr	r2, [pc, #128]	@ (8001014 <PD_update_from_distance+0x194>)
 8000f94:	601a      	str	r2, [r3, #0]
    }

    // Movement logic
    if (speed > 0) {
 8000f96:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <PD_update_from_distance+0x184>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f04f 0100 	mov.w	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fb9e 	bl	80006e0 <__aeabi_fcmpgt>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d008      	beq.n	8000fbc <PD_update_from_distance+0x13c>
        CAR_forward(speed,speed);
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <PD_update_from_distance+0x184>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a15      	ldr	r2, [pc, #84]	@ (8001004 <PD_update_from_distance+0x184>)
 8000fb0:	6812      	ldr	r2, [r2, #0]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fd4f 	bl	8000a58 <CAR_forward>
    } else if (speed < 0) {
        CAR_backwards(speed,speed);
    } else {
        CAR_stop();
    }
}
 8000fba:	e014      	b.n	8000fe6 <PD_update_from_distance+0x166>
    } else if (speed < 0) {
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <PD_update_from_distance+0x184>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f04f 0100 	mov.w	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fb6d 	bl	80006a4 <__aeabi_fcmplt>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d008      	beq.n	8000fe2 <PD_update_from_distance+0x162>
        CAR_backwards(speed,speed);
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <PD_update_from_distance+0x184>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <PD_update_from_distance+0x184>)
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fd8e 	bl	8000afc <CAR_backwards>
}
 8000fe0:	e001      	b.n	8000fe6 <PD_update_from_distance+0x166>
        CAR_stop();
 8000fe2:	f7ff fddd 	bl	8000ba0 <CAR_stop>
}
 8000fe6:	bf00      	nop
 8000fe8:	3724      	adds	r7, #36	@ 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40a00000 	.word	0x40a00000
 8000ff4:	200000b8 	.word	0x200000b8
 8000ff8:	200000c0 	.word	0x200000c0
 8000ffc:	200000c4 	.word	0x200000c4
 8001000:	447a0000 	.word	0x447a0000
 8001004:	200000c8 	.word	0x200000c8
 8001008:	42c80000 	.word	0x42c80000
 800100c:	c2c80000 	.word	0xc2c80000
 8001010:	41f00000 	.word	0x41f00000
 8001014:	c1f00000 	.word	0xc1f00000

08001018 <GPIO_pinMode>:
#include "GPIO_interface.h"

void GPIO_pinMode(GPIO_TypeDef *GPIOX, uint8_t pinNumber, GPIO_MODE mode){
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	f200 8099 	bhi.w	8001162 <GPIO_pinMode+0x14a>
		return;
	}
	// Initialize the clock of port x
    if (GPIOX == GPIOA) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a4e      	ldr	r2, [pc, #312]	@ (800116c <GPIO_pinMode+0x154>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d106      	bne.n	8001046 <GPIO_pinMode+0x2e>
		SET_BIT(RCC->APB2ENR, 2);
 8001038:	4b4d      	ldr	r3, [pc, #308]	@ (8001170 <GPIO_pinMode+0x158>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a4c      	ldr	r2, [pc, #304]	@ (8001170 <GPIO_pinMode+0x158>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	e014      	b.n	8001070 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOB) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4a      	ldr	r2, [pc, #296]	@ (8001174 <GPIO_pinMode+0x15c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d106      	bne.n	800105c <GPIO_pinMode+0x44>
		SET_BIT(RCC->APB2ENR, 3);
 800104e:	4b48      	ldr	r3, [pc, #288]	@ (8001170 <GPIO_pinMode+0x158>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a47      	ldr	r2, [pc, #284]	@ (8001170 <GPIO_pinMode+0x158>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	e009      	b.n	8001070 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOC) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a46      	ldr	r2, [pc, #280]	@ (8001178 <GPIO_pinMode+0x160>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d105      	bne.n	8001070 <GPIO_pinMode+0x58>
		SET_BIT(RCC->APB2ENR, 4);
 8001064:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <GPIO_pinMode+0x158>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a41      	ldr	r2, [pc, #260]	@ (8001170 <GPIO_pinMode+0x158>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6193      	str	r3, [r2, #24]
    }
	volatile uint8_t pinIndex = pinNumber % 8;
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	b2db      	uxtb	r3, r3
 8001078:	72fb      	strb	r3, [r7, #11]

	volatile uint32_t *CRX;
	if (pinNumber < 8 && pinNumber >= 0){
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	2b07      	cmp	r3, #7
 800107e:	d802      	bhi.n	8001086 <GPIO_pinMode+0x6e>
		CRX = &GPIOX->CRL;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e008      	b.n	8001098 <GPIO_pinMode+0x80>
	}else if(pinNumber >= 8 && pinNumber < 16){
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	2b07      	cmp	r3, #7
 800108a:	d905      	bls.n	8001098 <GPIO_pinMode+0x80>
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	d802      	bhi.n	8001098 <GPIO_pinMode+0x80>
		CRX = &GPIOX->CRH;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3304      	adds	r3, #4
 8001096:	60fb      	str	r3, [r7, #12]
	}
	// Zero the CRX register's specific pin mode not the whole register
	*CRX &= ~(0xF << (4*(pinIndex)));
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43da      	mvns	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	401a      	ands	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	601a      	str	r2, [r3, #0]
	if (mode == OUTPUT){
 80010b0:	78bb      	ldrb	r3, [r7, #2]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d10a      	bne.n	80010cc <GPIO_pinMode+0xb4>
		*CRX |= (0x2 << (4*(pinIndex)));
 80010b6:	7afb      	ldrb	r3, [r7, #11]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	2202      	movs	r2, #2
 80010be:	409a      	lsls	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	431a      	orrs	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e04b      	b.n	8001164 <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_FLOAT){
 80010cc:	78bb      	ldrb	r3, [r7, #2]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d10a      	bne.n	80010e8 <GPIO_pinMode+0xd0>
		*CRX |= (0x4 << (4*(pinIndex)));
 80010d2:	7afb      	ldrb	r3, [r7, #11]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	2204      	movs	r2, #4
 80010da:	409a      	lsls	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	431a      	orrs	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e03d      	b.n	8001164 <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_PULLUP){
 80010e8:	78bb      	ldrb	r3, [r7, #2]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d113      	bne.n	8001116 <GPIO_pinMode+0xfe>
		*CRX |= (0x8 << (4*(pinIndex)));
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	2208      	movs	r2, #8
 80010f6:	409a      	lsls	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	601a      	str	r2, [r3, #0]
		SET_BIT(GPIOX->ODR, pinNumber);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	78fa      	ldrb	r2, [r7, #3]
 8001108:	2101      	movs	r1, #1
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	e026      	b.n	8001164 <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_PULLDOWN){
 8001116:	78bb      	ldrb	r3, [r7, #2]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d114      	bne.n	8001146 <GPIO_pinMode+0x12e>
		*CRX |= (0x8 << (4*(pinIndex)));
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	2208      	movs	r2, #8
 8001124:	409a      	lsls	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	431a      	orrs	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	78fa      	ldrb	r2, [r7, #3]
 8001136:	2101      	movs	r1, #1
 8001138:	fa01 f202 	lsl.w	r2, r1, r2
 800113c:	43d2      	mvns	r2, r2
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	e00e      	b.n	8001164 <GPIO_pinMode+0x14c>
	}else if (mode == AF_PP){
 8001146:	78bb      	ldrb	r3, [r7, #2]
 8001148:	2b04      	cmp	r3, #4
 800114a:	d10b      	bne.n	8001164 <GPIO_pinMode+0x14c>
		*CRX |= (0xB << (4*(pinIndex)));
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220b      	movs	r2, #11
 8001154:	409a      	lsls	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	431a      	orrs	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e000      	b.n	8001164 <GPIO_pinMode+0x14c>
		return;
 8001162:	bf00      	nop

	}
}
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	40010800 	.word	0x40010800
 8001170:	40021000 	.word	0x40021000
 8001174:	40010c00 	.word	0x40010c00
 8001178:	40011000 	.word	0x40011000

0800117c <GPIO_digitalWrite>:

void GPIO_digitalWrite(GPIO_TypeDef *GPIOX, uint8_t pinNumber, PIN_LEVEL level){
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
 8001188:	4613      	mov	r3, r2
 800118a:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	d81a      	bhi.n	80011c8 <GPIO_digitalWrite+0x4c>
		return;
	}
	if (level == HIGH){
 8001192:	78bb      	ldrb	r3, [r7, #2]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d109      	bne.n	80011ac <GPIO_digitalWrite+0x30>
		SET_BIT(GPIOX->ODR, pinNumber);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	78fa      	ldrb	r2, [r7, #3]
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	e00e      	b.n	80011ca <GPIO_digitalWrite+0x4e>
	}else if(level == LOW){
 80011ac:	78bb      	ldrb	r3, [r7, #2]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d10b      	bne.n	80011ca <GPIO_digitalWrite+0x4e>
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	78fa      	ldrb	r2, [r7, #3]
 80011b8:	2101      	movs	r1, #1
 80011ba:	fa01 f202 	lsl.w	r2, r1, r2
 80011be:	43d2      	mvns	r2, r2
 80011c0:	401a      	ands	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	e000      	b.n	80011ca <GPIO_digitalWrite+0x4e>
		return;
 80011c8:	bf00      	nop
	}
}
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
	...

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4906      	ldr	r1, [pc, #24]	@ (8001208 <__NVIC_EnableIRQ+0x34>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100

0800120c <TIM_initPWM>:
volatile void (*callback4)();
uint64_t millis = 0;
uint16_t trigTime_ms_global;
int isFirstTime = 1;

void TIM_initPWM(TIM_TypeDef *TIMX, uint8_t channel, float frequency) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	460b      	mov	r3, r1
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	72fb      	strb	r3, [r7, #11]
	if (channel < 1 || channel > 4) {
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 81eb 	beq.w	80015f8 <TIM_initPWM+0x3ec>
 8001222:	7afb      	ldrb	r3, [r7, #11]
 8001224:	2b04      	cmp	r3, #4
 8001226:	f200 81e7 	bhi.w	80015f8 <TIM_initPWM+0x3ec>
		return;
	}
	// init clock and corresponding pin in the GPIO
	if (TIMX == TIM2) {
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001230:	d150      	bne.n	80012d4 <TIM_initPWM+0xc8>
		SET_BIT(RCC->APB1ENR, 0); // Enable TIM2 clock
 8001232:	4b9a      	ldr	r3, [pc, #616]	@ (800149c <TIM_initPWM+0x290>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a99      	ldr	r2, [pc, #612]	@ (800149c <TIM_initPWM+0x290>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // Enable GPIOA clock
 800123e:	4b97      	ldr	r3, [pc, #604]	@ (800149c <TIM_initPWM+0x290>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a96      	ldr	r2, [pc, #600]	@ (800149c <TIM_initPWM+0x290>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6193      	str	r3, [r2, #24]
		switch (channel) {
 800124a:	7afb      	ldrb	r3, [r7, #11]
 800124c:	3b01      	subs	r3, #1
 800124e:	2b03      	cmp	r3, #3
 8001250:	f200 80e8 	bhi.w	8001424 <TIM_initPWM+0x218>
 8001254:	a201      	add	r2, pc, #4	@ (adr r2, 800125c <TIM_initPWM+0x50>)
 8001256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125a:	bf00      	nop
 800125c:	0800126d 	.word	0x0800126d
 8001260:	08001287 	.word	0x08001287
 8001264:	080012a1 	.word	0x080012a1
 8001268:	080012bb 	.word	0x080012bb
		case 1: // PA0
			GPIOA->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 800126c:	4b8c      	ldr	r3, [pc, #560]	@ (80014a0 <TIM_initPWM+0x294>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a8b      	ldr	r2, [pc, #556]	@ (80014a0 <TIM_initPWM+0x294>)
 8001272:	f023 030f 	bic.w	r3, r3, #15
 8001276:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_CNF0_1); // 2 MHz, AF PP
 8001278:	4b89      	ldr	r3, [pc, #548]	@ (80014a0 <TIM_initPWM+0x294>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a88      	ldr	r2, [pc, #544]	@ (80014a0 <TIM_initPWM+0x294>)
 800127e:	f043 030a 	orr.w	r3, r3, #10
 8001282:	6013      	str	r3, [r2, #0]
			break;
 8001284:	e0ce      	b.n	8001424 <TIM_initPWM+0x218>
		case 2: // PA1
			GPIOA->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);
 8001286:	4b86      	ldr	r3, [pc, #536]	@ (80014a0 <TIM_initPWM+0x294>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a85      	ldr	r2, [pc, #532]	@ (80014a0 <TIM_initPWM+0x294>)
 800128c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001290:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1);
 8001292:	4b83      	ldr	r3, [pc, #524]	@ (80014a0 <TIM_initPWM+0x294>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a82      	ldr	r2, [pc, #520]	@ (80014a0 <TIM_initPWM+0x294>)
 8001298:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800129c:	6013      	str	r3, [r2, #0]
			break;
 800129e:	e0c1      	b.n	8001424 <TIM_initPWM+0x218>
		case 3: // PA2
			GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 80012a0:	4b7f      	ldr	r3, [pc, #508]	@ (80014a0 <TIM_initPWM+0x294>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a7e      	ldr	r2, [pc, #504]	@ (80014a0 <TIM_initPWM+0x294>)
 80012a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012aa:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_CNF2_1);
 80012ac:	4b7c      	ldr	r3, [pc, #496]	@ (80014a0 <TIM_initPWM+0x294>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a7b      	ldr	r2, [pc, #492]	@ (80014a0 <TIM_initPWM+0x294>)
 80012b2:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 80012b6:	6013      	str	r3, [r2, #0]
			break;
 80012b8:	e0b4      	b.n	8001424 <TIM_initPWM+0x218>
		case 4: // PA3
			GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 80012ba:	4b79      	ldr	r3, [pc, #484]	@ (80014a0 <TIM_initPWM+0x294>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a78      	ldr	r2, [pc, #480]	@ (80014a0 <TIM_initPWM+0x294>)
 80012c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80012c4:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE3_1 | GPIO_CRL_CNF3_1);
 80012c6:	4b76      	ldr	r3, [pc, #472]	@ (80014a0 <TIM_initPWM+0x294>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a75      	ldr	r2, [pc, #468]	@ (80014a0 <TIM_initPWM+0x294>)
 80012cc:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80012d0:	6013      	str	r3, [r2, #0]
			break;
 80012d2:	e0a7      	b.n	8001424 <TIM_initPWM+0x218>
		}
	} else if (TIMX == TIM3) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4a73      	ldr	r2, [pc, #460]	@ (80014a4 <TIM_initPWM+0x298>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d14f      	bne.n	800137c <TIM_initPWM+0x170>
		SET_BIT(RCC->APB1ENR, 1); // Enable TIM3 clock
 80012dc:	4b6f      	ldr	r3, [pc, #444]	@ (800149c <TIM_initPWM+0x290>)
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	4a6e      	ldr	r2, [pc, #440]	@ (800149c <TIM_initPWM+0x290>)
 80012e2:	f043 0302 	orr.w	r3, r3, #2
 80012e6:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN; // Enable GPIOA & GPIOB
 80012e8:	4b6c      	ldr	r3, [pc, #432]	@ (800149c <TIM_initPWM+0x290>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a6b      	ldr	r2, [pc, #428]	@ (800149c <TIM_initPWM+0x290>)
 80012ee:	f043 030c 	orr.w	r3, r3, #12
 80012f2:	6193      	str	r3, [r2, #24]
		switch (channel) {
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	f200 8093 	bhi.w	8001424 <TIM_initPWM+0x218>
 80012fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001304 <TIM_initPWM+0xf8>)
 8001300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001304:	08001315 	.word	0x08001315
 8001308:	0800132f 	.word	0x0800132f
 800130c:	08001349 	.word	0x08001349
 8001310:	08001363 	.word	0x08001363
		case 1: // PA6
			GPIOA->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8001314:	4b62      	ldr	r3, [pc, #392]	@ (80014a0 <TIM_initPWM+0x294>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a61      	ldr	r2, [pc, #388]	@ (80014a0 <TIM_initPWM+0x294>)
 800131a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800131e:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1);
 8001320:	4b5f      	ldr	r3, [pc, #380]	@ (80014a0 <TIM_initPWM+0x294>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a5e      	ldr	r2, [pc, #376]	@ (80014a0 <TIM_initPWM+0x294>)
 8001326:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 800132a:	6013      	str	r3, [r2, #0]
			break;
 800132c:	e07a      	b.n	8001424 <TIM_initPWM+0x218>
		case 2: // PA7
			GPIOA->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 800132e:	4b5c      	ldr	r3, [pc, #368]	@ (80014a0 <TIM_initPWM+0x294>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a5b      	ldr	r2, [pc, #364]	@ (80014a0 <TIM_initPWM+0x294>)
 8001334:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001338:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1);
 800133a:	4b59      	ldr	r3, [pc, #356]	@ (80014a0 <TIM_initPWM+0x294>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a58      	ldr	r2, [pc, #352]	@ (80014a0 <TIM_initPWM+0x294>)
 8001340:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 8001344:	6013      	str	r3, [r2, #0]
			break;
 8001346:	e06d      	b.n	8001424 <TIM_initPWM+0x218>
		case 3: // PB0
			GPIOB->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8001348:	4b57      	ldr	r3, [pc, #348]	@ (80014a8 <TIM_initPWM+0x29c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a56      	ldr	r2, [pc, #344]	@ (80014a8 <TIM_initPWM+0x29c>)
 800134e:	f023 030f 	bic.w	r3, r3, #15
 8001352:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_CNF0_1);
 8001354:	4b54      	ldr	r3, [pc, #336]	@ (80014a8 <TIM_initPWM+0x29c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a53      	ldr	r2, [pc, #332]	@ (80014a8 <TIM_initPWM+0x29c>)
 800135a:	f043 030a 	orr.w	r3, r3, #10
 800135e:	6013      	str	r3, [r2, #0]
			break;
 8001360:	e060      	b.n	8001424 <TIM_initPWM+0x218>
		case 4: // PB1
			GPIOB->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);
 8001362:	4b51      	ldr	r3, [pc, #324]	@ (80014a8 <TIM_initPWM+0x29c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a50      	ldr	r2, [pc, #320]	@ (80014a8 <TIM_initPWM+0x29c>)
 8001368:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800136c:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1);
 800136e:	4b4e      	ldr	r3, [pc, #312]	@ (80014a8 <TIM_initPWM+0x29c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a4d      	ldr	r2, [pc, #308]	@ (80014a8 <TIM_initPWM+0x29c>)
 8001374:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001378:	6013      	str	r3, [r2, #0]
			break;
 800137a:	e053      	b.n	8001424 <TIM_initPWM+0x218>
		}
	} else if (TIMX == TIM4) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a4b      	ldr	r2, [pc, #300]	@ (80014ac <TIM_initPWM+0x2a0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d14f      	bne.n	8001424 <TIM_initPWM+0x218>
		SET_BIT(RCC->APB1ENR, 2); // Enable TIM4 clock
 8001384:	4b45      	ldr	r3, [pc, #276]	@ (800149c <TIM_initPWM+0x290>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	4a44      	ldr	r2, [pc, #272]	@ (800149c <TIM_initPWM+0x290>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; // Enable GPIOB clock
 8001390:	4b42      	ldr	r3, [pc, #264]	@ (800149c <TIM_initPWM+0x290>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a41      	ldr	r2, [pc, #260]	@ (800149c <TIM_initPWM+0x290>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6193      	str	r3, [r2, #24]
		switch (channel) {
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	3b01      	subs	r3, #1
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d83f      	bhi.n	8001424 <TIM_initPWM+0x218>
 80013a4:	a201      	add	r2, pc, #4	@ (adr r2, 80013ac <TIM_initPWM+0x1a0>)
 80013a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013aa:	bf00      	nop
 80013ac:	080013bd 	.word	0x080013bd
 80013b0:	080013d7 	.word	0x080013d7
 80013b4:	080013f1 	.word	0x080013f1
 80013b8:	0800140b 	.word	0x0800140b
		case 1: // PB6
			GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 80013bc:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a39      	ldr	r2, [pc, #228]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013c2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80013c6:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1);
 80013c8:	4b37      	ldr	r3, [pc, #220]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a36      	ldr	r2, [pc, #216]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013ce:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 80013d2:	6013      	str	r3, [r2, #0]
			break;
 80013d4:	e026      	b.n	8001424 <TIM_initPWM+0x218>
		case 2: // PB7
			GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 80013d6:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a33      	ldr	r2, [pc, #204]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013dc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80013e0:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1);
 80013e2:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a30      	ldr	r2, [pc, #192]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013e8:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 80013ec:	6013      	str	r3, [r2, #0]
			break;
 80013ee:	e019      	b.n	8001424 <TIM_initPWM+0x218>
		case 3: // PB8
			GPIOB->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 80013f0:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a2c      	ldr	r2, [pc, #176]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013f6:	f023 030f 	bic.w	r3, r3, #15
 80013fa:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= (GPIO_CRH_MODE8_1 | GPIO_CRH_CNF8_1);
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <TIM_initPWM+0x29c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a29      	ldr	r2, [pc, #164]	@ (80014a8 <TIM_initPWM+0x29c>)
 8001402:	f043 030a 	orr.w	r3, r3, #10
 8001406:	6053      	str	r3, [r2, #4]
			break;
 8001408:	e00c      	b.n	8001424 <TIM_initPWM+0x218>
		case 4: // PB9
			GPIOB->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 800140a:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <TIM_initPWM+0x29c>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <TIM_initPWM+0x29c>)
 8001410:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001414:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= (GPIO_CRH_MODE9_1 | GPIO_CRH_CNF9_1);
 8001416:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <TIM_initPWM+0x29c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a23      	ldr	r2, [pc, #140]	@ (80014a8 <TIM_initPWM+0x29c>)
 800141c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001420:	6053      	str	r3, [r2, #4]
			break;
 8001422:	bf00      	nop
		}
	}

	// direction upward
	CLEAR_BIT(TIMX->CR1, 4);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 0210 	bic.w	r2, r3, #16
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	601a      	str	r2, [r3, #0]
	// mode 'edge aligned'
	CLEAR_BIT(TIMX->CR1, 5);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 0220 	bic.w	r2, r3, #32
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIMX->CR1, 6);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	601a      	str	r2, [r3, #0]
	// set the ARR preload
	SET_BIT(TIMX->CR1, 7);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	601a      	str	r2, [r3, #0]
	//enable the capture compare corresponding pin
	SET_BIT(TIMX->CCER, (4 * (channel - 1)));
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	7afa      	ldrb	r2, [r7, #11]
 800145a:	3a01      	subs	r2, #1
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f202 	lsl.w	r2, r1, r2
 8001464:	431a      	orrs	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	621a      	str	r2, [r3, #32]
	// choose the polarity of the pin to active high
	CLEAR_BIT(TIMX->CCER, (4 * (channel - 1) + 1));
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	7afa      	ldrb	r2, [r7, #11]
 8001470:	3a01      	subs	r2, #1
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	3201      	adds	r2, #1
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	43d2      	mvns	r2, r2
 800147e:	401a      	ands	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	621a      	str	r2, [r3, #32]

	volatile uint32_t *CCMRX;
	uint8_t modChannel = 1;
 8001484:	2301      	movs	r3, #1
 8001486:	76fb      	strb	r3, [r7, #27]
	if (channel <= 2) {
 8001488:	7afb      	ldrb	r3, [r7, #11]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d810      	bhi.n	80014b0 <TIM_initPWM+0x2a4>
		CCMRX = &TIMX->CCMR1;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3318      	adds	r3, #24
 8001492:	61fb      	str	r3, [r7, #28]
		modChannel = channel;
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	76fb      	strb	r3, [r7, #27]
 8001498:	e010      	b.n	80014bc <TIM_initPWM+0x2b0>
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40000400 	.word	0x40000400
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40000800 	.word	0x40000800
	} else {
		CCMRX = &TIMX->CCMR2;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	331c      	adds	r3, #28
 80014b4:	61fb      	str	r3, [r7, #28]
		modChannel = channel - 2;
 80014b6:	7afb      	ldrb	r3, [r7, #11]
 80014b8:	3b02      	subs	r3, #2
 80014ba:	76fb      	strb	r3, [r7, #27]
	}
	// set the channel mode to be output
	CLEAR_BIT(*CCMRX, (8 * (modChannel - 1)));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	7efa      	ldrb	r2, [r7, #27]
 80014c2:	3a01      	subs	r2, #1
 80014c4:	00d2      	lsls	r2, r2, #3
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	43d2      	mvns	r2, r2
 80014ce:	401a      	ands	r2, r3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(*CCMRX, (8 * (modChannel - 1) + 1));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	7efa      	ldrb	r2, [r7, #27]
 80014da:	3a01      	subs	r2, #1
 80014dc:	00d2      	lsls	r2, r2, #3
 80014de:	3201      	adds	r2, #1
 80014e0:	2101      	movs	r1, #1
 80014e2:	fa01 f202 	lsl.w	r2, r1, r2
 80014e6:	43d2      	mvns	r2, r2
 80014e8:	401a      	ands	r2, r3
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	601a      	str	r2, [r3, #0]
	// set the channel preload enable
	SET_BIT(*CCMRX, (8 * (modChannel - 1) + 3));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	7efa      	ldrb	r2, [r7, #27]
 80014f4:	3a01      	subs	r2, #1
 80014f6:	00d2      	lsls	r2, r2, #3
 80014f8:	3203      	adds	r2, #3
 80014fa:	2101      	movs	r1, #1
 80014fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001500:	431a      	orrs	r2, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	601a      	str	r2, [r3, #0]
	// select PWM mode 1
	CLEAR_BIT(*CCMRX, (8 * (modChannel - 1) + 4));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	7efa      	ldrb	r2, [r7, #27]
 800150c:	3a01      	subs	r2, #1
 800150e:	00d2      	lsls	r2, r2, #3
 8001510:	3204      	adds	r2, #4
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	43d2      	mvns	r2, r2
 800151a:	401a      	ands	r2, r3
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	601a      	str	r2, [r3, #0]
	SET_BIT(*CCMRX, (8 * (modChannel - 1) + 5));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	7efa      	ldrb	r2, [r7, #27]
 8001526:	3a01      	subs	r2, #1
 8001528:	00d2      	lsls	r2, r2, #3
 800152a:	3205      	adds	r2, #5
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f202 	lsl.w	r2, r1, r2
 8001532:	431a      	orrs	r2, r3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	601a      	str	r2, [r3, #0]
	SET_BIT(*CCMRX, (8 * (modChannel - 1) + 6));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	7efa      	ldrb	r2, [r7, #27]
 800153e:	3a01      	subs	r2, #1
 8001540:	00d2      	lsls	r2, r2, #3
 8001542:	3206      	adds	r2, #6
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f202 	lsl.w	r2, r1, r2
 800154a:	431a      	orrs	r2, r3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	601a      	str	r2, [r3, #0]

	// setting the psc with zero
	TIMX->PSC = 0;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
	// calculating prescaler and arr for specific frequency
	float currentARR = (8000000 / ((frequency * (TIMX->PSC + 1)))) - 1;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155a:	3301      	adds	r3, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe feab 	bl	80002b8 <__aeabi_ui2f>
 8001562:	4603      	mov	r3, r0
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fefe 	bl	8000368 <__aeabi_fmul>
 800156c:	4603      	mov	r3, r0
 800156e:	4619      	mov	r1, r3
 8001570:	4823      	ldr	r0, [pc, #140]	@ (8001600 <TIM_initPWM+0x3f4>)
 8001572:	f7fe ffad 	bl	80004d0 <__aeabi_fdiv>
 8001576:	4603      	mov	r3, r0
 8001578:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fde9 	bl	8000154 <__aeabi_fsub>
 8001582:	4603      	mov	r3, r0
 8001584:	617b      	str	r3, [r7, #20]
	while (currentARR >= 65536) {
 8001586:	e01c      	b.n	80015c2 <TIM_initPWM+0x3b6>
		TIMX->PSC += 1;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	629a      	str	r2, [r3, #40]	@ 0x28
		currentARR = (8000000 / ((frequency * (TIMX->PSC + 1)))) - 1;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001596:	3301      	adds	r3, #1
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fe8d 	bl	80002b8 <__aeabi_ui2f>
 800159e:	4603      	mov	r3, r0
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe fee0 	bl	8000368 <__aeabi_fmul>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4619      	mov	r1, r3
 80015ac:	4814      	ldr	r0, [pc, #80]	@ (8001600 <TIM_initPWM+0x3f4>)
 80015ae:	f7fe ff8f 	bl	80004d0 <__aeabi_fdiv>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe fdcb 	bl	8000154 <__aeabi_fsub>
 80015be:	4603      	mov	r3, r0
 80015c0:	617b      	str	r3, [r7, #20]
	while (currentARR >= 65536) {
 80015c2:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff f880 	bl	80006cc <__aeabi_fcmpge>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1da      	bne.n	8001588 <TIM_initPWM+0x37c>
	}
	TIMX->ARR = currentARR;
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff f88e 	bl	80006f4 <__aeabi_f2uiz>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	SET_BIT(TIMX->EGR, 0);  // UG: Update Generation
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	615a      	str	r2, [r3, #20]
	// start counting
	SET_BIT(TIMX->CR1, 0);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e000      	b.n	80015fa <TIM_initPWM+0x3ee>
		return;
 80015f8:	bf00      	nop
}
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	4af42400 	.word	0x4af42400

08001604 <TIM_writePWM>:

void TIM_writePWM(TIM_TypeDef *TIMX, uint8_t channel, float dutyCycle) {
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	460b      	mov	r3, r1
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	72fb      	strb	r3, [r7, #11]
	if (channel < 1 || channel > 4 || dutyCycle < 0 || dutyCycle > 100) {
 8001612:	7afb      	ldrb	r3, [r7, #11]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d044      	beq.n	80016a2 <TIM_writePWM+0x9e>
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	2b04      	cmp	r3, #4
 800161c:	d841      	bhi.n	80016a2 <TIM_writePWM+0x9e>
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff f83e 	bl	80006a4 <__aeabi_fcmplt>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d139      	bne.n	80016a2 <TIM_writePWM+0x9e>
 800162e:	491f      	ldr	r1, [pc, #124]	@ (80016ac <TIM_writePWM+0xa8>)
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff f855 	bl	80006e0 <__aeabi_fcmpgt>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d132      	bne.n	80016a2 <TIM_writePWM+0x9e>
		return;
	}
	volatile uint32_t *CCRX;
	if (channel == 1) {
 800163c:	7afb      	ldrb	r3, [r7, #11]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d103      	bne.n	800164a <TIM_writePWM+0x46>
		CCRX = &TIMX->CCR1;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3334      	adds	r3, #52	@ 0x34
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e013      	b.n	8001672 <TIM_writePWM+0x6e>
	} else if (channel == 2) {
 800164a:	7afb      	ldrb	r3, [r7, #11]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d103      	bne.n	8001658 <TIM_writePWM+0x54>
		CCRX = &TIMX->CCR2;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3338      	adds	r3, #56	@ 0x38
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e00c      	b.n	8001672 <TIM_writePWM+0x6e>
	} else if (channel == 3) {
 8001658:	7afb      	ldrb	r3, [r7, #11]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d103      	bne.n	8001666 <TIM_writePWM+0x62>
		CCRX = &TIMX->CCR3;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	333c      	adds	r3, #60	@ 0x3c
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e005      	b.n	8001672 <TIM_writePWM+0x6e>
	} else if (channel == 4) {
 8001666:	7afb      	ldrb	r3, [r7, #11]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d102      	bne.n	8001672 <TIM_writePWM+0x6e>
		CCRX = &TIMX->CCR4;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3340      	adds	r3, #64	@ 0x40
 8001670:	617b      	str	r3, [r7, #20]
	}
	*CCRX = (dutyCycle / 100) * (TIMX->ARR);
 8001672:	490e      	ldr	r1, [pc, #56]	@ (80016ac <TIM_writePWM+0xa8>)
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7fe ff2b 	bl	80004d0 <__aeabi_fdiv>
 800167a:	4603      	mov	r3, r0
 800167c:	461c      	mov	r4, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fe18 	bl	80002b8 <__aeabi_ui2f>
 8001688:	4603      	mov	r3, r0
 800168a:	4619      	mov	r1, r3
 800168c:	4620      	mov	r0, r4
 800168e:	f7fe fe6b 	bl	8000368 <__aeabi_fmul>
 8001692:	4603      	mov	r3, r0
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff f82d 	bl	80006f4 <__aeabi_f2uiz>
 800169a:	4602      	mov	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e000      	b.n	80016a4 <TIM_writePWM+0xa0>
		return;
 80016a2:	bf00      	nop
}
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	42c80000 	.word	0x42c80000

080016b0 <enableTimerClock>:
		TIM_delay(TIMX, chunk);
		delay_ms -= chunk;
	}
}

void enableTimerClock(TIM_TypeDef *TIMx) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	switch ((uint32_t) TIMx) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001724 <enableTimerClock+0x74>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00f      	beq.n	80016e0 <enableTimerClock+0x30>
 80016c0:	4a18      	ldr	r2, [pc, #96]	@ (8001724 <enableTimerClock+0x74>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d828      	bhi.n	8001718 <enableTimerClock+0x68>
 80016c6:	4a18      	ldr	r2, [pc, #96]	@ (8001728 <enableTimerClock+0x78>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d01e      	beq.n	800170a <enableTimerClock+0x5a>
 80016cc:	4a16      	ldr	r2, [pc, #88]	@ (8001728 <enableTimerClock+0x78>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d822      	bhi.n	8001718 <enableTimerClock+0x68>
 80016d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016d6:	d00a      	beq.n	80016ee <enableTimerClock+0x3e>
 80016d8:	4a14      	ldr	r2, [pc, #80]	@ (800172c <enableTimerClock+0x7c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00e      	beq.n	80016fc <enableTimerClock+0x4c>
		break;
	case (uint32_t) TIM4:
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
		break;
	default:
		break;
 80016de:	e01b      	b.n	8001718 <enableTimerClock+0x68>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80016e0:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <enableTimerClock+0x80>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <enableTimerClock+0x80>)
 80016e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016ea:	6193      	str	r3, [r2, #24]
		break;
 80016ec:	e015      	b.n	800171a <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <enableTimerClock+0x80>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <enableTimerClock+0x80>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	61d3      	str	r3, [r2, #28]
		break;
 80016fa:	e00e      	b.n	800171a <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <enableTimerClock+0x80>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <enableTimerClock+0x80>)
 8001702:	f043 0302 	orr.w	r3, r3, #2
 8001706:	61d3      	str	r3, [r2, #28]
		break;
 8001708:	e007      	b.n	800171a <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <enableTimerClock+0x80>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a08      	ldr	r2, [pc, #32]	@ (8001730 <enableTimerClock+0x80>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	61d3      	str	r3, [r2, #28]
		break;
 8001716:	e000      	b.n	800171a <enableTimerClock+0x6a>
		break;
 8001718:	bf00      	nop
	}
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40012c00 	.word	0x40012c00
 8001728:	40000800 	.word	0x40000800
 800172c:	40000400 	.word	0x40000400
 8001730:	40021000 	.word	0x40021000

08001734 <TIM_initMillis>:
	}

	// start counting
	SET_BIT(TIMX->CR1, 0);
}
void TIM_initMillis(TIM_TypeDef *TIMX, uint16_t trigTime_ms) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
	enableTimerClock(TIMX);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ffb5 	bl	80016b0 <enableTimerClock>
	TIMX->CR1 = 0;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
	trigTime_ms_global = trigTime_ms;
 800174c:	4a23      	ldr	r2, [pc, #140]	@ (80017dc <TIM_initMillis+0xa8>)
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	8013      	strh	r3, [r2, #0]
	TIMX->CCER |= TIM_CCER_CC1E;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	f043 0201 	orr.w	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	621a      	str	r2, [r3, #32]
	TIMX->DIER |= TIM_DIER_CC1IE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f043 0202 	orr.w	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60da      	str	r2, [r3, #12]
	TIMX->CCMR1 &= ~TIM_CCMR1_CC1S;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f023 0203 	bic.w	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
	TIMX->CNT = 0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIMX->PSC = 8000 - 1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001782:	629a      	str	r2, [r3, #40]	@ 0x28
	TIMX->ARR = (60000) - 1;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800178a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (TIMX == TIM2) {
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001792:	d103      	bne.n	800179c <TIM_initMillis+0x68>
		NVIC_EnableIRQ(TIM2_IRQn);
 8001794:	201c      	movs	r0, #28
 8001796:	f7ff fd1d 	bl	80011d4 <__NVIC_EnableIRQ>
 800179a:	e00e      	b.n	80017ba <TIM_initMillis+0x86>
	} else if (TIMX == TIM3) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <TIM_initMillis+0xac>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d103      	bne.n	80017ac <TIM_initMillis+0x78>
		NVIC_EnableIRQ(TIM3_IRQn);
 80017a4:	201d      	movs	r0, #29
 80017a6:	f7ff fd15 	bl	80011d4 <__NVIC_EnableIRQ>
 80017aa:	e006      	b.n	80017ba <TIM_initMillis+0x86>
	} else if (TIMX == TIM4) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a0d      	ldr	r2, [pc, #52]	@ (80017e4 <TIM_initMillis+0xb0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d102      	bne.n	80017ba <TIM_initMillis+0x86>
		NVIC_EnableIRQ(TIM4_IRQn);
 80017b4:	201e      	movs	r0, #30
 80017b6:	f7ff fd0d 	bl	80011d4 <__NVIC_EnableIRQ>
	}

	TIMX->CR1 |= TIM_CR1_CEN;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	601a      	str	r2, [r3, #0]
	TIMX->CCR1 = TIMX->CNT + trigTime_ms_global;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <TIM_initMillis+0xa8>)
 80017cc:	8812      	ldrh	r2, [r2, #0]
 80017ce:	441a      	add	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000108 	.word	0x20000108
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40000800 	.word	0x40000800

080017e8 <TIM_Millis>:

uint64_t TIM_Millis() {
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	if (isFirstTime) {
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <TIM_Millis+0x30>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <TIM_Millis+0x20>
		isFirstTime = 0;
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <TIM_Millis+0x30>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
		millis = 0;
 80017fa:	4908      	ldr	r1, [pc, #32]	@ (800181c <TIM_Millis+0x34>)
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return millis;
 8001808:	4b04      	ldr	r3, [pc, #16]	@ (800181c <TIM_Millis+0x34>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000070 	.word	0x20000070
 800181c:	20000100 	.word	0x20000100

08001820 <TIM2_IRQHandler>:

void TIM2_IRQHandler() {
 8001820:	b598      	push	{r3, r4, r7, lr}
 8001822:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC1IF) {
 8001824:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d01a      	beq.n	8001868 <TIM2_IRQHandler+0x48>
		TIM2->SR &= ~TIM_SR_CC1IF;
 8001832:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800183c:	f023 0302 	bic.w	r3, r3, #2
 8001840:	6113      	str	r3, [r2, #16]
		TIM2->CCR1 = TIM2->CNT + trigTime_ms_global;
 8001842:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	4a1d      	ldr	r2, [pc, #116]	@ (80018c0 <TIM2_IRQHandler+0xa0>)
 800184a:	8812      	ldrh	r2, [r2, #0]
 800184c:	4614      	mov	r4, r2
 800184e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001852:	4423      	add	r3, r4
 8001854:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 8001856:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <TIM2_IRQHandler+0xa4>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	1c50      	adds	r0, r2, #1
 800185e:	f143 0100 	adc.w	r1, r3, #0
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <TIM2_IRQHandler+0xa4>)
 8001864:	e9c3 0100 	strd	r0, r1, [r3]
//		if (isFirstTime) {
//			isFirstTime = 0;
//			millis = 0;
//		}
	}
	if ((TIM2->SR & (1 << 0)) == 1) { // check the uif flag
 8001868:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d122      	bne.n	80018bc <TIM2_IRQHandler+0x9c>
		TIM2->SR &= ~(1 << 0); // clear the uif
 8001876:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6113      	str	r3, [r2, #16]
		counter2++;
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <TIM2_IRQHandler+0xa8>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <TIM2_IRQHandler+0xa8>)
 8001892:	801a      	strh	r2, [r3, #0]
		if (counter2 == n2) {
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <TIM2_IRQHandler+0xa8>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <TIM2_IRQHandler+0xac>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d10b      	bne.n	80018bc <TIM2_IRQHandler+0x9c>
			counter2 = 0;
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <TIM2_IRQHandler+0xa8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	801a      	strh	r2, [r3, #0]
			TIM2->CNT = preload2; // set the preload
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <TIM2_IRQHandler+0xb0>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24
			callback2();
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <TIM2_IRQHandler+0xb4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4798      	blx	r3
		}
	}
}
 80018bc:	bf00      	nop
 80018be:	bd98      	pop	{r3, r4, r7, pc}
 80018c0:	20000108 	.word	0x20000108
 80018c4:	20000100 	.word	0x20000100
 80018c8:	200000e8 	.word	0x200000e8
 80018cc:	200000e2 	.word	0x200000e2
 80018d0:	200000dc 	.word	0x200000dc
 80018d4:	200000f0 	.word	0x200000f0

080018d8 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 80018d8:	b598      	push	{r3, r4, r7, lr}
 80018da:	af00      	add	r7, sp, #0
	if ((TIM3->SR & (1 << 0)) == 1) { // check the uif flag
 80018dc:	4b25      	ldr	r3, [pc, #148]	@ (8001974 <TIM3_IRQHandler+0x9c>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d142      	bne.n	800196e <TIM3_IRQHandler+0x96>
		if (TIM3->SR & TIM_SR_CC1IF) {
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <TIM3_IRQHandler+0x9c>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d016      	beq.n	8001922 <TIM3_IRQHandler+0x4a>
			TIM3->SR &= ~TIM_SR_CC1IF;
 80018f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <TIM3_IRQHandler+0x9c>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001974 <TIM3_IRQHandler+0x9c>)
 80018fa:	f023 0302 	bic.w	r3, r3, #2
 80018fe:	6113      	str	r3, [r2, #16]
			TIM3->CCR1 = TIM3->CNT + trigTime_ms_global;
 8001900:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <TIM3_IRQHandler+0x9c>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	4a1c      	ldr	r2, [pc, #112]	@ (8001978 <TIM3_IRQHandler+0xa0>)
 8001906:	8812      	ldrh	r2, [r2, #0]
 8001908:	4614      	mov	r4, r2
 800190a:	4a1a      	ldr	r2, [pc, #104]	@ (8001974 <TIM3_IRQHandler+0x9c>)
 800190c:	4423      	add	r3, r4
 800190e:	6353      	str	r3, [r2, #52]	@ 0x34
			millis++;
 8001910:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <TIM3_IRQHandler+0xa4>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	1c50      	adds	r0, r2, #1
 8001918:	f143 0100 	adc.w	r1, r3, #0
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <TIM3_IRQHandler+0xa4>)
 800191e:	e9c3 0100 	strd	r0, r1, [r3]
//			if (isFirstTime) {
//				isFirstTime = 0;
//				millis = 0;
//			}
		}
		if ((TIM3->SR & (1 << 0)) == 1) {
 8001922:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <TIM3_IRQHandler+0x9c>)
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b01      	cmp	r3, #1
 800192c:	d11f      	bne.n	800196e <TIM3_IRQHandler+0x96>
			TIM3->SR &= ~(1 << 0); // clear the uif
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <TIM3_IRQHandler+0x9c>)
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	4a10      	ldr	r2, [pc, #64]	@ (8001974 <TIM3_IRQHandler+0x9c>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6113      	str	r3, [r2, #16]
			counter3++;
 800193a:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <TIM3_IRQHandler+0xa8>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	3301      	adds	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <TIM3_IRQHandler+0xa8>)
 8001946:	801a      	strh	r2, [r3, #0]
			if (counter3 == n3) {
 8001948:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <TIM3_IRQHandler+0xa8>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <TIM3_IRQHandler+0xac>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	429a      	cmp	r2, r3
 8001956:	d10a      	bne.n	800196e <TIM3_IRQHandler+0x96>
				counter3 = 0;
 8001958:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <TIM3_IRQHandler+0xa8>)
 800195a:	2200      	movs	r2, #0
 800195c:	801a      	strh	r2, [r3, #0]
				TIM3->CNT = preload3; // set the preload
 800195e:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <TIM3_IRQHandler+0xb0>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <TIM3_IRQHandler+0x9c>)
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24
				callback3();
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <TIM3_IRQHandler+0xb4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4798      	blx	r3
			}
		}
	}
}
 800196e:	bf00      	nop
 8001970:	bd98      	pop	{r3, r4, r7, pc}
 8001972:	bf00      	nop
 8001974:	40000400 	.word	0x40000400
 8001978:	20000108 	.word	0x20000108
 800197c:	20000100 	.word	0x20000100
 8001980:	200000ea 	.word	0x200000ea
 8001984:	200000e4 	.word	0x200000e4
 8001988:	200000de 	.word	0x200000de
 800198c:	200000f4 	.word	0x200000f4

08001990 <TIM4_IRQHandler>:

void TIM4_IRQHandler() {
 8001990:	b598      	push	{r3, r4, r7, lr}
 8001992:	af00      	add	r7, sp, #0
	if ((TIM4->SR & (1 << 0)) == 1) { // check the uif flag
 8001994:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <TIM4_IRQHandler+0x9c>)
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d142      	bne.n	8001a26 <TIM4_IRQHandler+0x96>
		if (TIM4->SR & TIM_SR_CC1IF) {
 80019a0:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <TIM4_IRQHandler+0x9c>)
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d016      	beq.n	80019da <TIM4_IRQHandler+0x4a>
			TIM4->SR &= ~TIM_SR_CC1IF;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <TIM4_IRQHandler+0x9c>)
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a2c <TIM4_IRQHandler+0x9c>)
 80019b2:	f023 0302 	bic.w	r3, r3, #2
 80019b6:	6113      	str	r3, [r2, #16]
			TIM4->CCR1 = TIM4->CNT + trigTime_ms_global;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <TIM4_IRQHandler+0x9c>)
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <TIM4_IRQHandler+0xa0>)
 80019be:	8812      	ldrh	r2, [r2, #0]
 80019c0:	4614      	mov	r4, r2
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <TIM4_IRQHandler+0x9c>)
 80019c4:	4423      	add	r3, r4
 80019c6:	6353      	str	r3, [r2, #52]	@ 0x34
			millis++;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <TIM4_IRQHandler+0xa4>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	1c50      	adds	r0, r2, #1
 80019d0:	f143 0100 	adc.w	r1, r3, #0
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <TIM4_IRQHandler+0xa4>)
 80019d6:	e9c3 0100 	strd	r0, r1, [r3]
//			if (isFirstTime) {
//				isFirstTime = 0;
//				millis = 0;
//			}
		}
		if ((TIM4->SR & (1 << 0)) == 1) {
 80019da:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <TIM4_IRQHandler+0x9c>)
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d11f      	bne.n	8001a26 <TIM4_IRQHandler+0x96>
			TIM4->SR &= ~(1 << 0); // clear the uif
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <TIM4_IRQHandler+0x9c>)
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	4a10      	ldr	r2, [pc, #64]	@ (8001a2c <TIM4_IRQHandler+0x9c>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6113      	str	r3, [r2, #16]
			counter4++;
 80019f2:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <TIM4_IRQHandler+0xa8>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3301      	adds	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <TIM4_IRQHandler+0xa8>)
 80019fe:	801a      	strh	r2, [r3, #0]
			if (counter4 == n4) {
 8001a00:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <TIM4_IRQHandler+0xa8>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <TIM4_IRQHandler+0xac>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d10a      	bne.n	8001a26 <TIM4_IRQHandler+0x96>
				counter4 = 0;
 8001a10:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <TIM4_IRQHandler+0xa8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	801a      	strh	r2, [r3, #0]
				TIM4->CNT = preload4; // set the preload
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <TIM4_IRQHandler+0xb0>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <TIM4_IRQHandler+0x9c>)
 8001a1e:	625a      	str	r2, [r3, #36]	@ 0x24
				callback4();
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <TIM4_IRQHandler+0xb4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4798      	blx	r3
			}
		}
	}
}
 8001a26:	bf00      	nop
 8001a28:	bd98      	pop	{r3, r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40000800 	.word	0x40000800
 8001a30:	20000108 	.word	0x20000108
 8001a34:	20000100 	.word	0x20000100
 8001a38:	200000ec 	.word	0x200000ec
 8001a3c:	200000e6 	.word	0x200000e6
 8001a40:	200000e0 	.word	0x200000e0
 8001a44:	200000f8 	.word	0x200000f8

08001a48 <__libc_init_array>:
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	4d0c      	ldr	r5, [pc, #48]	@ (8001a80 <__libc_init_array+0x38>)
 8001a4e:	4c0d      	ldr	r4, [pc, #52]	@ (8001a84 <__libc_init_array+0x3c>)
 8001a50:	1b64      	subs	r4, r4, r5
 8001a52:	10a4      	asrs	r4, r4, #2
 8001a54:	42a6      	cmp	r6, r4
 8001a56:	d109      	bne.n	8001a6c <__libc_init_array+0x24>
 8001a58:	f000 f81a 	bl	8001a90 <_init>
 8001a5c:	2600      	movs	r6, #0
 8001a5e:	4d0a      	ldr	r5, [pc, #40]	@ (8001a88 <__libc_init_array+0x40>)
 8001a60:	4c0a      	ldr	r4, [pc, #40]	@ (8001a8c <__libc_init_array+0x44>)
 8001a62:	1b64      	subs	r4, r4, r5
 8001a64:	10a4      	asrs	r4, r4, #2
 8001a66:	42a6      	cmp	r6, r4
 8001a68:	d105      	bne.n	8001a76 <__libc_init_array+0x2e>
 8001a6a:	bd70      	pop	{r4, r5, r6, pc}
 8001a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a70:	4798      	blx	r3
 8001a72:	3601      	adds	r6, #1
 8001a74:	e7ee      	b.n	8001a54 <__libc_init_array+0xc>
 8001a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a7a:	4798      	blx	r3
 8001a7c:	3601      	adds	r6, #1
 8001a7e:	e7f2      	b.n	8001a66 <__libc_init_array+0x1e>
 8001a80:	08001aa8 	.word	0x08001aa8
 8001a84:	08001aa8 	.word	0x08001aa8
 8001a88:	08001aa8 	.word	0x08001aa8
 8001a8c:	08001aac 	.word	0x08001aac

08001a90 <_init>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	bf00      	nop
 8001a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a96:	bc08      	pop	{r3}
 8001a98:	469e      	mov	lr, r3
 8001a9a:	4770      	bx	lr

08001a9c <_fini>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	bf00      	nop
 8001aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aa2:	bc08      	pop	{r3}
 8001aa4:	469e      	mov	lr, r3
 8001aa6:	4770      	bx	lr
