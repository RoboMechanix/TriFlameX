
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005480  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08005590  08005590  00006590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800594c  0800594c  000071d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800594c  0800594c  000071d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800594c  0800594c  000071d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800594c  0800594c  0000694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005950  08005950  00006950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08005954  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200001d8  08005b2c  000071d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08005b2c  00007500  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005812  00000000  00000000  00007201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001609  00000000  00000000  0000ca13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  0000e020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000049b  00000000  00000000  0000e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027ad  00000000  00000000  0000eafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089b1  00000000  00000000  000112a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fd8  00000000  00000000  00019c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2c31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029cc  00000000  00000000  000a2c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000a5640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005578 	.word	0x08005578

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08005578 	.word	0x08005578

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	@ 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	@ 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	@ 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__gesf2>:
 8000f98:	f04f 3cff 	mov.w	ip, #4294967295
 8000f9c:	e006      	b.n	8000fac <__cmpsf2+0x4>
 8000f9e:	bf00      	nop

08000fa0 <__lesf2>:
 8000fa0:	f04f 0c01 	mov.w	ip, #1
 8000fa4:	e002      	b.n	8000fac <__cmpsf2+0x4>
 8000fa6:	bf00      	nop

08000fa8 <__cmpsf2>:
 8000fa8:	f04f 0c01 	mov.w	ip, #1
 8000fac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	bf18      	it	ne
 8000fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fc2:	d011      	beq.n	8000fe8 <__cmpsf2+0x40>
 8000fc4:	b001      	add	sp, #4
 8000fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fca:	bf18      	it	ne
 8000fcc:	ea90 0f01 	teqne	r0, r1
 8000fd0:	bf58      	it	pl
 8000fd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd6:	bf88      	it	hi
 8000fd8:	17c8      	asrhi	r0, r1, #31
 8000fda:	bf38      	it	cc
 8000fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fe0:	bf18      	it	ne
 8000fe2:	f040 0001 	orrne.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fec:	d102      	bne.n	8000ff4 <__cmpsf2+0x4c>
 8000fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ff2:	d105      	bne.n	8001000 <__cmpsf2+0x58>
 8000ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff8:	d1e4      	bne.n	8000fc4 <__cmpsf2+0x1c>
 8000ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffe:	d0e1      	beq.n	8000fc4 <__cmpsf2+0x1c>
 8001000:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_cfrcmple>:
 8001008:	4684      	mov	ip, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4661      	mov	r1, ip
 800100e:	e7ff      	b.n	8001010 <__aeabi_cfcmpeq>

08001010 <__aeabi_cfcmpeq>:
 8001010:	b50f      	push	{r0, r1, r2, r3, lr}
 8001012:	f7ff ffc9 	bl	8000fa8 <__cmpsf2>
 8001016:	2800      	cmp	r0, #0
 8001018:	bf48      	it	mi
 800101a:	f110 0f00 	cmnmi.w	r0, #0
 800101e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001020 <__aeabi_fcmpeq>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff fff4 	bl	8001010 <__aeabi_cfcmpeq>
 8001028:	bf0c      	ite	eq
 800102a:	2001      	moveq	r0, #1
 800102c:	2000      	movne	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmplt>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffea 	bl	8001010 <__aeabi_cfcmpeq>
 800103c:	bf34      	ite	cc
 800103e:	2001      	movcc	r0, #1
 8001040:	2000      	movcs	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmple>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffe0 	bl	8001010 <__aeabi_cfcmpeq>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpge>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffd2 	bl	8001008 <__aeabi_cfrcmple>
 8001064:	bf94      	ite	ls
 8001066:	2001      	movls	r0, #1
 8001068:	2000      	movhi	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpgt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffc8 	bl	8001008 <__aeabi_cfrcmple>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_f2uiz>:
 8001084:	0042      	lsls	r2, r0, #1
 8001086:	d20e      	bcs.n	80010a6 <__aeabi_f2uiz+0x22>
 8001088:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800108c:	d30b      	bcc.n	80010a6 <__aeabi_f2uiz+0x22>
 800108e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001092:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001096:	d409      	bmi.n	80010ac <__aeabi_f2uiz+0x28>
 8001098:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800109c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0000 	mov.w	r0, #0
 80010aa:	4770      	bx	lr
 80010ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010b0:	d101      	bne.n	80010b6 <__aeabi_f2uiz+0x32>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	d102      	bne.n	80010bc <__aeabi_f2uiz+0x38>
 80010b6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ba:	4770      	bx	lr
 80010bc:	f04f 0000 	mov.w	r0, #0
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_d2lz>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	2200      	movs	r2, #0
 80010c8:	2300      	movs	r3, #0
 80010ca:	4604      	mov	r4, r0
 80010cc:	460d      	mov	r5, r1
 80010ce:	f7ff fc6d 	bl	80009ac <__aeabi_dcmplt>
 80010d2:	b928      	cbnz	r0, 80010e0 <__aeabi_d2lz+0x1c>
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010dc:	f000 b80a 	b.w	80010f4 <__aeabi_d2ulz>
 80010e0:	4620      	mov	r0, r4
 80010e2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80010e6:	f000 f805 	bl	80010f4 <__aeabi_d2ulz>
 80010ea:	4240      	negs	r0, r0
 80010ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f0:	bd38      	pop	{r3, r4, r5, pc}
 80010f2:	bf00      	nop

080010f4 <__aeabi_d2ulz>:
 80010f4:	b5d0      	push	{r4, r6, r7, lr}
 80010f6:	2200      	movs	r2, #0
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <__aeabi_d2ulz+0x34>)
 80010fa:	4606      	mov	r6, r0
 80010fc:	460f      	mov	r7, r1
 80010fe:	f7ff f9e3 	bl	80004c8 <__aeabi_dmul>
 8001102:	f7ff fc7b 	bl	80009fc <__aeabi_d2uiz>
 8001106:	4604      	mov	r4, r0
 8001108:	f7ff f964 	bl	80003d4 <__aeabi_ui2d>
 800110c:	2200      	movs	r2, #0
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <__aeabi_d2ulz+0x38>)
 8001110:	f7ff f9da 	bl	80004c8 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4630      	mov	r0, r6
 800111a:	4639      	mov	r1, r7
 800111c:	f7ff f81c 	bl	8000158 <__aeabi_dsub>
 8001120:	f7ff fc6c 	bl	80009fc <__aeabi_d2uiz>
 8001124:	4621      	mov	r1, r4
 8001126:	bdd0      	pop	{r4, r6, r7, pc}
 8001128:	3df00000 	.word	0x3df00000
 800112c:	41f00000 	.word	0x41f00000

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4906      	ldr	r1, [pc, #24]	@ (8001164 <__NVIC_EnableIRQ+0x34>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100

08001168 <delay_ms>:
void UART_Init(void);
char UART_ReadChar(void);
int UART_ReadLine(char *buffer, int max_len);

// Dummy delay (for simulation only)
void delay_ms(uint32_t ms) {
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e003      	b.n	800117e <delay_ms+0x16>
		__asm("NOP");
 8001176:	bf00      	nop
	for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001184:	fb03 f202 	mul.w	r2, r3, r2
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	429a      	cmp	r2, r3
 800118c:	d8f3      	bhi.n	8001176 <delay_ms+0xe>
	}
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
	...

0800119c <main>:

int main(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b098      	sub	sp, #96	@ 0x60
 80011a0:	af0a      	add	r7, sp, #40	@ 0x28
	// Initialize UART
	UART_Init();
 80011a2:	f000 f8bb 	bl	800131c <UART_Init>

	// === Left Motor (TIM3, PA4/PA5) ===
	TIM_TypeDef *leftTimer = TIM3;
 80011a6:	4b51      	ldr	r3, [pc, #324]	@ (80012ec <main+0x150>)
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t leftChannel = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	GPIO_TypeDef *leftDir1Port = GPIOA;
 80011b0:	4b4f      	ldr	r3, [pc, #316]	@ (80012f0 <main+0x154>)
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t leftDir1Pin = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	GPIO_TypeDef *leftDir2Port = GPIOA;
 80011ba:	4b4d      	ldr	r3, [pc, #308]	@ (80012f0 <main+0x154>)
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t leftDir2Pin = 5;
 80011be:	2305      	movs	r3, #5
 80011c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// === Right Motor (TIM4, PB6/PB7) ===
	TIM_TypeDef *rightTimer = TIM4;
 80011c4:	4b4b      	ldr	r3, [pc, #300]	@ (80012f4 <main+0x158>)
 80011c6:	61fb      	str	r3, [r7, #28]
	uint8_t rightChannel = 2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	76fb      	strb	r3, [r7, #27]
	GPIO_TypeDef *rightDir1Port = GPIOA;
 80011cc:	4b48      	ldr	r3, [pc, #288]	@ (80012f0 <main+0x154>)
 80011ce:	617b      	str	r3, [r7, #20]
	uint8_t rightDir1Pin = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	74fb      	strb	r3, [r7, #19]
	GPIO_TypeDef *rightDir2Port = GPIOA;
 80011d4:	4b46      	ldr	r3, [pc, #280]	@ (80012f0 <main+0x154>)
 80011d6:	60fb      	str	r3, [r7, #12]
	uint8_t rightDir2Pin = 3;
 80011d8:	2303      	movs	r3, #3
 80011da:	72fb      	strb	r3, [r7, #11]

	// === Init Car Motors ===
	CAR_init(leftTimer, leftChannel, PWM_FREQ_HZ, leftDir1Port, leftDir2Port,
 80011dc:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 80011e0:	7afb      	ldrb	r3, [r7, #11]
 80011e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80011e4:	7cfb      	ldrb	r3, [r7, #19]
 80011e6:	9308      	str	r3, [sp, #32]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	9307      	str	r3, [sp, #28]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	9306      	str	r3, [sp, #24]
 80011f0:	4b41      	ldr	r3, [pc, #260]	@ (80012f8 <main+0x15c>)
 80011f2:	9305      	str	r3, [sp, #20]
 80011f4:	7efb      	ldrb	r3, [r7, #27]
 80011f6:	9304      	str	r3, [sp, #16]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	9303      	str	r3, [sp, #12]
 80011fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800120e:	4a3a      	ldr	r2, [pc, #232]	@ (80012f8 <main+0x15c>)
 8001210:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001212:	f000 fa57 	bl	80016c4 <CAR_init>
			leftDir1Pin, leftDir2Pin, rightTimer, rightChannel, PWM_FREQ_HZ,
			rightDir1Port, rightDir2Port, rightDir1Pin, rightDir2Pin);

	// === Init Millisecond Timer (TIM2 used for timing) ===
	TIM_initMillis(TIM2, 1);  // 1ms resolution
 8001216:	2101      	movs	r1, #1
 8001218:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800121c:	f001 f81e 	bl	800225c <TIM_initMillis>
	delay_ms(50);
 8001220:	2032      	movs	r0, #50	@ 0x32
 8001222:	f7ff ffa1 	bl	8001168 <delay_ms>

	// === Initialize PD controllers ===
	PD_init(1.0f, 3.0f);        // Distance PD
 8001226:	4935      	ldr	r1, [pc, #212]	@ (80012fc <main+0x160>)
 8001228:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800122c:	f000 fbc4 	bl	80019b8 <PD_init>
	PD_init_angle(2.0f, 1.0f);  // Angle control gains
 8001230:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001234:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001238:	f000 fbaa 	bl	8001990 <PD_init_angle>

	while (1) {
		// Read one line from UART (blocking until '\n')
		if (UART_ReadLine(uart_rx_buffer, UART_BUFFER_SIZE)) {
 800123c:	2140      	movs	r1, #64	@ 0x40
 800123e:	4830      	ldr	r0, [pc, #192]	@ (8001300 <main+0x164>)
 8001240:	f000 f8ea 	bl	8001418 <UART_ReadLine>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d033      	beq.n	80012b2 <main+0x116>
			// uart_rx_buffer contains something like: "123.45,67.89"

			// Parse distance and angle
			char *comma_pos = strchr(uart_rx_buffer, ',');
 800124a:	212c      	movs	r1, #44	@ 0x2c
 800124c:	482c      	ldr	r0, [pc, #176]	@ (8001300 <main+0x164>)
 800124e:	f002 faa4 	bl	800379a <strchr>
 8001252:	6078      	str	r0, [r7, #4]
			if (comma_pos != NULL) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d02b      	beq.n	80012b2 <main+0x116>
				*comma_pos = 0; // Null terminate distance part
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
				distance = atof(uart_rx_buffer)/10;
 8001260:	4827      	ldr	r0, [pc, #156]	@ (8001300 <main+0x164>)
 8001262:	f001 fb83 	bl	800296c <atof>
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b26      	ldr	r3, [pc, #152]	@ (8001304 <main+0x168>)
 800126c:	f7ff fa56 	bl	800071c <__aeabi_ddiv>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fbe0 	bl	8000a3c <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
 800127e:	4a22      	ldr	r2, [pc, #136]	@ (8001308 <main+0x16c>)
 8001280:	6013      	str	r3, [r2, #0]
				angle = atof(comma_pos + 1);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3301      	adds	r3, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fb70 	bl	800296c <atof>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fbd2 	bl	8000a3c <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <main+0x170>)
 800129c:	6013      	str	r3, [r2, #0]
				realangle=angle-90;
 800129e:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <main+0x170>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	491b      	ldr	r1, [pc, #108]	@ (8001310 <main+0x174>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fc1d 	bl	8000ae4 <__aeabi_fsub>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <main+0x178>)
 80012b0:	601a      	str	r2, [r3, #0]

				// Optional: Validate values (e.g., distance > 0)
			}
		}

		current_time_ms = TIM_Millis();
 80012b2:	f001 f82d 	bl	8002310 <TIM_Millis>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4917      	ldr	r1, [pc, #92]	@ (8001318 <main+0x17c>)
 80012bc:	e9c1 2300 	strd	r2, r3, [r1]

		// Use received values instead of simulated
		if(distance!=0)
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <main+0x16c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f04f 0100 	mov.w	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fea9 	bl	8001020 <__aeabi_fcmpeq>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d107      	bne.n	80012e4 <main+0x148>
		PD_update_from_distance(distance, current_time_ms);
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <main+0x16c>)
 80012d6:	6819      	ldr	r1, [r3, #0]
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <main+0x17c>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	4608      	mov	r0, r1
 80012e0:	f000 fb7e 	bl	80019e0 <PD_update_from_distance>
		//PD_update_angle(88, current_time_ms);

		delay_ms(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff ff3f 	bl	8001168 <delay_ms>
		if (UART_ReadLine(uart_rx_buffer, UART_BUFFER_SIZE)) {
 80012ea:	e7a7      	b.n	800123c <main+0xa0>
 80012ec:	40000400 	.word	0x40000400
 80012f0:	40010800 	.word	0x40010800
 80012f4:	40000800 	.word	0x40000800
 80012f8:	447a0000 	.word	0x447a0000
 80012fc:	40400000 	.word	0x40400000
 8001300:	20000200 	.word	0x20000200
 8001304:	40240000 	.word	0x40240000
 8001308:	200001f4 	.word	0x200001f4
 800130c:	200001f8 	.word	0x200001f8
 8001310:	42b40000 	.word	0x42b40000
 8001314:	200001fc 	.word	0x200001fc
 8001318:	20000000 	.word	0x20000000

0800131c <UART_Init>:
volatile uint8_t uart_line_ready = 0;

extern char uart_rx_buffer_copy[UART_BUFFER_SIZE];  // For main() to access safely

// Initialize USART1 with RX interrupt enabled
void UART_Init(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN;
 8001320:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <UART_Init+0x64>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a16      	ldr	r2, [pc, #88]	@ (8001380 <UART_Init+0x64>)
 8001326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]

    GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9 | GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <UART_Init+0x68>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <UART_Init+0x68>)
 8001336:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800133a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x3 << GPIO_CRH_MODE9_Pos) | (0x2 << GPIO_CRH_CNF9_Pos);   // PA9: TX
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <UART_Init+0x68>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a10      	ldr	r2, [pc, #64]	@ (8001384 <UART_Init+0x68>)
 8001342:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001346:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x1 << GPIO_CRH_CNF10_Pos);                                 // PA10: RX
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <UART_Init+0x68>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <UART_Init+0x68>)
 800134e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001352:	6053      	str	r3, [r2, #4]

    USART1->CR1 &= ~USART_CR1_UE;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <UART_Init+0x6c>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a0b      	ldr	r2, [pc, #44]	@ (8001388 <UART_Init+0x6c>)
 800135a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800135e:	60d3      	str	r3, [r2, #12]
    USART1->BRR = 0x0010;  // 500000 baud at 8 MHz
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <UART_Init+0x6c>)
 8001362:	2210      	movs	r2, #16
 8001364:	609a      	str	r2, [r3, #8]
    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <UART_Init+0x6c>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <UART_Init+0x6c>)
 800136c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001370:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 8001374:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(USART1_IRQn);
 8001376:	2025      	movs	r0, #37	@ 0x25
 8001378:	f7ff feda 	bl	8001130 <__NVIC_EnableIRQ>
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	40010800 	.word	0x40010800
 8001388:	40013800 	.word	0x40013800

0800138c <USART1_IRQHandler>:

// Interrupt handler for USART1
void USART1_IRQHandler(void) {
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_ORE) {
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <USART1_IRQHandler+0x7c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <USART1_IRQHandler+0x1a>
        volatile uint32_t tmp = USART1->DR;  // Clear ORE by reading DR
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <USART1_IRQHandler+0x7c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	603b      	str	r3, [r7, #0]
        (void)tmp;
 80013a4:	683b      	ldr	r3, [r7, #0]
    }

    if (USART1->SR & USART_SR_RXNE) {
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <USART1_IRQHandler+0x7c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d026      	beq.n	8001400 <USART1_IRQHandler+0x74>
        char received = (char)(USART1->DR & 0xFF);
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <USART1_IRQHandler+0x7c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	71fb      	strb	r3, [r7, #7]

        if (received == '\r') return;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b0d      	cmp	r3, #13
 80013bc:	d01f      	beq.n	80013fe <USART1_IRQHandler+0x72>

        if (received == '\n') {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b0a      	cmp	r3, #10
 80013c2:	d10b      	bne.n	80013dc <USART1_IRQHandler+0x50>
            uart_rx_buffer[uart_rx_index] = '\0';
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <USART1_IRQHandler+0x80>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a11      	ldr	r2, [pc, #68]	@ (8001410 <USART1_IRQHandler+0x84>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	54d1      	strb	r1, [r2, r3]
            uart_rx_index = 0;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <USART1_IRQHandler+0x80>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
            uart_line_ready = 1;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <USART1_IRQHandler+0x88>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	e011      	b.n	8001400 <USART1_IRQHandler+0x74>
        } else {
            if (uart_rx_index < UART_BUFFER_SIZE - 1) {
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <USART1_IRQHandler+0x80>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80013e2:	dc08      	bgt.n	80013f6 <USART1_IRQHandler+0x6a>
                uart_rx_buffer[uart_rx_index++] = received;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <USART1_IRQHandler+0x80>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <USART1_IRQHandler+0x80>)
 80013ec:	600a      	str	r2, [r1, #0]
 80013ee:	4908      	ldr	r1, [pc, #32]	@ (8001410 <USART1_IRQHandler+0x84>)
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	54ca      	strb	r2, [r1, r3]
 80013f4:	e004      	b.n	8001400 <USART1_IRQHandler+0x74>
            } else {
                uart_rx_index = 0;  // reset on overflow
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <USART1_IRQHandler+0x80>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e000      	b.n	8001400 <USART1_IRQHandler+0x74>
        if (received == '\r') return;
 80013fe:	bf00      	nop
            }
        }
    }
}
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40013800 	.word	0x40013800
 800140c:	20000240 	.word	0x20000240
 8001410:	20000200 	.word	0x20000200
 8001414:	20000244 	.word	0x20000244

08001418 <UART_ReadLine>:

// Safe read line function to be called from main loop
// Returns 1 if a full line is ready
char uart_rx_buffer_copy[UART_BUFFER_SIZE];  // Used by main

int UART_ReadLine(char *buffer, int max_len) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    if (uart_line_ready) {
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <UART_ReadLine+0x54>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d019      	beq.n	8001460 <UART_ReadLine+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
        __disable_irq();
        strncpy((char *)uart_rx_buffer_copy, (char *)uart_rx_buffer, UART_BUFFER_SIZE);
 8001430:	2240      	movs	r2, #64	@ 0x40
 8001432:	490f      	ldr	r1, [pc, #60]	@ (8001470 <UART_ReadLine+0x58>)
 8001434:	480f      	ldr	r0, [pc, #60]	@ (8001474 <UART_ReadLine+0x5c>)
 8001436:	f002 f9cf 	bl	80037d8 <strncpy>
        uart_line_ready = 0;
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <UART_ReadLine+0x54>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001440:	b662      	cpsie	i
}
 8001442:	bf00      	nop
        __enable_irq();

        strncpy(buffer, uart_rx_buffer_copy, max_len);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	490a      	ldr	r1, [pc, #40]	@ (8001474 <UART_ReadLine+0x5c>)
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f002 f9c4 	bl	80037d8 <strncpy>
        buffer[max_len - 1] = '\0'; // Ensure null-termination
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3b01      	subs	r3, #1
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
        return 1;
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <UART_ReadLine+0x4a>
    }
    return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000244 	.word	0x20000244
 8001470:	20000200 	.word	0x20000200
 8001474:	20000248 	.word	0x20000248

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <NMI_Handler+0x4>

08001480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <MemManage_Handler+0x4>

08001490 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <UsageFault_Handler+0x4>

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b0:	f000 f8f6 	bl	80016a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014b4:	f001 f9de 	bl	8002874 <xTaskGetSchedulerState>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d001      	beq.n	80014c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014be:	f001 fa33 	bl	8002928 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  return 1;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <_kill>:

int _kill(int pid, int sig)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014de:	f002 f9d5 	bl	800388c <__errno>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2216      	movs	r2, #22
 80014e6:	601a      	str	r2, [r3, #0]
  return -1;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_exit>:

void _exit (int status)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ffe7 	bl	80014d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001506:	bf00      	nop
 8001508:	e7fd      	b.n	8001506 <_exit+0x12>

0800150a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e00a      	b.n	8001532 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800151c:	f3af 8000 	nop.w
 8001520:	4601      	mov	r1, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	b2ca      	uxtb	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbf0      	blt.n	800151c <_read+0x12>
  }

  return len;
 800153a:	687b      	ldr	r3, [r7, #4]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e009      	b.n	800156a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	dbf1      	blt.n	8001556 <_write+0x12>
  }
  return len;
 8001572:	687b      	ldr	r3, [r7, #4]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_close>:

int _close(int file)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a2:	605a      	str	r2, [r3, #4]
  return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <_isatty>:

int _isatty(int file)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	@ (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f002 f93e 	bl	800388c <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	@ (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20005000 	.word	0x20005000
 800163c:	00000400 	.word	0x00000400
 8001640:	20000288 	.word	0x20000288
 8001644:	20000500 	.word	0x20000500

08001648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff fff8 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480b      	ldr	r0, [pc, #44]	@ (8001688 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800165a:	490c      	ldr	r1, [pc, #48]	@ (800168c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800165c:	4a0c      	ldr	r2, [pc, #48]	@ (8001690 <LoopFillZerobss+0x16>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001670:	4c09      	ldr	r4, [pc, #36]	@ (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f002 f90b 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001682:	f7ff fd8b 	bl	800119c <main>
  bx lr
 8001686:	4770      	bx	lr
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001690:	08005954 	.word	0x08005954
  ldr r2, =_sbss
 8001694:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001698:	20000500 	.word	0x20000500

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>
	...

080016a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_IncTick+0x1c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_IncTick+0x20>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a03      	ldr	r2, [pc, #12]	@ (80016c0 <HAL_IncTick+0x20>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000008 	.word	0x20000008
 80016c0:	2000028c 	.word	0x2000028c

080016c4 <CAR_init>:
uint8_t DirRight2Pin_global;

void CAR_init(TIM_TypeDef *TimxLeft ,uint8_t ChannelLeft, float FrequencyLeft,
              GPIO_TypeDef *DirLeft1, GPIO_TypeDef *DirLeft2, uint8_t DirLeft1Pin, uint8_t DirLeft2Pin,
              TIM_TypeDef *TimxRight ,uint8_t ChannelRight, float FrequencyRight,
              GPIO_TypeDef *DirRight1, GPIO_TypeDef *DirRight2, uint8_t DirRight1Pin, uint8_t DirRight2Pin) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	460b      	mov	r3, r1
 80016d2:	72fb      	strb	r3, [r7, #11]

    // Store GPIO pointers and pin numbers
    DirLeft1_global = DirLeft1;
 80016d4:	4a29      	ldr	r2, [pc, #164]	@ (800177c <CAR_init+0xb8>)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6013      	str	r3, [r2, #0]
    DirLeft2_global = DirLeft2;
 80016da:	4a29      	ldr	r2, [pc, #164]	@ (8001780 <CAR_init+0xbc>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6013      	str	r3, [r2, #0]
    DirRight1_global = DirRight1;
 80016e0:	4a28      	ldr	r2, [pc, #160]	@ (8001784 <CAR_init+0xc0>)
 80016e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016e4:	6013      	str	r3, [r2, #0]
    DirRight2_global = DirRight2;
 80016e6:	4a28      	ldr	r2, [pc, #160]	@ (8001788 <CAR_init+0xc4>)
 80016e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ea:	6013      	str	r3, [r2, #0]

    DirLeft1Pin_global = DirLeft1Pin;
 80016ec:	4a27      	ldr	r2, [pc, #156]	@ (800178c <CAR_init+0xc8>)
 80016ee:	7f3b      	ldrb	r3, [r7, #28]
 80016f0:	7013      	strb	r3, [r2, #0]
    DirLeft2Pin_global = DirLeft2Pin;
 80016f2:	4a27      	ldr	r2, [pc, #156]	@ (8001790 <CAR_init+0xcc>)
 80016f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016f8:	7013      	strb	r3, [r2, #0]
    DirRight1Pin_global = DirRight1Pin;
 80016fa:	4a26      	ldr	r2, [pc, #152]	@ (8001794 <CAR_init+0xd0>)
 80016fc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001700:	7013      	strb	r3, [r2, #0]
    DirRight2Pin_global = DirRight2Pin;
 8001702:	4a25      	ldr	r2, [pc, #148]	@ (8001798 <CAR_init+0xd4>)
 8001704:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001708:	7013      	strb	r3, [r2, #0]

    // Configure all direction pins as outputs
    GPIO_pinMode(DirLeft1, DirLeft1Pin, OUTPUT);
 800170a:	7f3b      	ldrb	r3, [r7, #28]
 800170c:	2203      	movs	r2, #3
 800170e:	4619      	mov	r1, r3
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f000 fa15 	bl	8001b40 <GPIO_pinMode>
    GPIO_pinMode(DirLeft2, DirLeft2Pin, OUTPUT);
 8001716:	f897 3020 	ldrb.w	r3, [r7, #32]
 800171a:	2203      	movs	r2, #3
 800171c:	4619      	mov	r1, r3
 800171e:	69b8      	ldr	r0, [r7, #24]
 8001720:	f000 fa0e 	bl	8001b40 <GPIO_pinMode>
    GPIO_pinMode(DirRight1, DirRight1Pin, OUTPUT);
 8001724:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001728:	2203      	movs	r2, #3
 800172a:	4619      	mov	r1, r3
 800172c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800172e:	f000 fa07 	bl	8001b40 <GPIO_pinMode>
    GPIO_pinMode(DirRight2, DirRight2Pin, OUTPUT);
 8001732:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001736:	2203      	movs	r2, #3
 8001738:	4619      	mov	r1, r3
 800173a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800173c:	f000 fa00 	bl	8001b40 <GPIO_pinMode>

    // Store timer and channel configuration
    TimxLeft_global = TimxLeft;
 8001740:	4a16      	ldr	r2, [pc, #88]	@ (800179c <CAR_init+0xd8>)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6013      	str	r3, [r2, #0]
    TimxRight_global = TimxRight;
 8001746:	4a16      	ldr	r2, [pc, #88]	@ (80017a0 <CAR_init+0xdc>)
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	6013      	str	r3, [r2, #0]
    ChannelLeft_global = ChannelLeft;
 800174c:	4a15      	ldr	r2, [pc, #84]	@ (80017a4 <CAR_init+0xe0>)
 800174e:	7afb      	ldrb	r3, [r7, #11]
 8001750:	7013      	strb	r3, [r2, #0]
    ChannelRight_global = ChannelRight;
 8001752:	4a15      	ldr	r2, [pc, #84]	@ (80017a8 <CAR_init+0xe4>)
 8001754:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001758:	7013      	strb	r3, [r2, #0]

    // Initialize PWM channels
    TIM_initPWM(TimxLeft, ChannelLeft, FrequencyLeft);
 800175a:	7afb      	ldrb	r3, [r7, #11]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4619      	mov	r1, r3
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 fae7 	bl	8001d34 <TIM_initPWM>
    TIM_initPWM(TimxRight, ChannelRight, FrequencyRight);
 8001766:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800176a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800176c:	4619      	mov	r1, r3
 800176e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001770:	f000 fae0 	bl	8001d34 <TIM_initPWM>
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000029c 	.word	0x2000029c
 8001780:	200002a0 	.word	0x200002a0
 8001784:	200002a4 	.word	0x200002a4
 8001788:	200002a8 	.word	0x200002a8
 800178c:	200002ac 	.word	0x200002ac
 8001790:	200002ad 	.word	0x200002ad
 8001794:	200002ae 	.word	0x200002ae
 8001798:	200002af 	.word	0x200002af
 800179c:	20000290 	.word	0x20000290
 80017a0:	20000294 	.word	0x20000294
 80017a4:	20000298 	.word	0x20000298
 80017a8:	20000299 	.word	0x20000299

080017ac <CAR_forward>:

void CAR_forward(float rightSpeed ,float leftSpeed) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
    // Left motor forward
    GPIO_digitalWrite(DirLeft1_global, DirLeft1Pin_global, HIGH);
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <CAR_forward+0x74>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001824 <CAR_forward+0x78>)
 80017bc:	7811      	ldrb	r1, [r2, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fa6f 	bl	8001ca4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirLeft2_global, DirLeft2Pin_global, LOW);
 80017c6:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <CAR_forward+0x7c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a18      	ldr	r2, [pc, #96]	@ (800182c <CAR_forward+0x80>)
 80017cc:	7811      	ldrb	r1, [r2, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fa67 	bl	8001ca4 <GPIO_digitalWrite>
    // Right motor forward
    GPIO_digitalWrite(DirRight1_global, DirRight1Pin_global, HIGH);
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <CAR_forward+0x84>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a16      	ldr	r2, [pc, #88]	@ (8001834 <CAR_forward+0x88>)
 80017dc:	7811      	ldrb	r1, [r2, #0]
 80017de:	2200      	movs	r2, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fa5f 	bl	8001ca4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight2_global, DirRight2Pin_global, LOW);
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <CAR_forward+0x8c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a14      	ldr	r2, [pc, #80]	@ (800183c <CAR_forward+0x90>)
 80017ec:	7811      	ldrb	r1, [r2, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fa57 	bl	8001ca4 <GPIO_digitalWrite>

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, leftSpeed);
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <CAR_forward+0x94>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <CAR_forward+0x98>)
 80017fc:	7811      	ldrb	r1, [r2, #0]
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fc93 	bl	800212c <TIM_writePWM>
    TIM_writePWM(TimxRight_global, ChannelRight_global, rightSpeed);
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <CAR_forward+0x9c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a10      	ldr	r2, [pc, #64]	@ (800184c <CAR_forward+0xa0>)
 800180c:	7811      	ldrb	r1, [r2, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fc8b 	bl	800212c <TIM_writePWM>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000029c 	.word	0x2000029c
 8001824:	200002ac 	.word	0x200002ac
 8001828:	200002a0 	.word	0x200002a0
 800182c:	200002ad 	.word	0x200002ad
 8001830:	200002a4 	.word	0x200002a4
 8001834:	200002ae 	.word	0x200002ae
 8001838:	200002a8 	.word	0x200002a8
 800183c:	200002af 	.word	0x200002af
 8001840:	20000290 	.word	0x20000290
 8001844:	20000298 	.word	0x20000298
 8001848:	20000294 	.word	0x20000294
 800184c:	20000299 	.word	0x20000299

08001850 <CAR_backwards>:

void CAR_backwards(float rightSpeed , float leftSpeed) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
    // Left motor backward
    GPIO_digitalWrite(DirLeft1_global, DirLeft1Pin_global, LOW);
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <CAR_backwards+0x74>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a1a      	ldr	r2, [pc, #104]	@ (80018c8 <CAR_backwards+0x78>)
 8001860:	7811      	ldrb	r1, [r2, #0]
 8001862:	2201      	movs	r2, #1
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fa1d 	bl	8001ca4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirLeft2_global, DirLeft2Pin_global, HIGH);
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <CAR_backwards+0x7c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a18      	ldr	r2, [pc, #96]	@ (80018d0 <CAR_backwards+0x80>)
 8001870:	7811      	ldrb	r1, [r2, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f000 fa15 	bl	8001ca4 <GPIO_digitalWrite>
    // Right motor backward
    GPIO_digitalWrite(DirRight1_global, DirRight1Pin_global, LOW);
 800187a:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <CAR_backwards+0x84>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a16      	ldr	r2, [pc, #88]	@ (80018d8 <CAR_backwards+0x88>)
 8001880:	7811      	ldrb	r1, [r2, #0]
 8001882:	2201      	movs	r2, #1
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fa0d 	bl	8001ca4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight2_global, DirRight2Pin_global, HIGH);
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <CAR_backwards+0x8c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a14      	ldr	r2, [pc, #80]	@ (80018e0 <CAR_backwards+0x90>)
 8001890:	7811      	ldrb	r1, [r2, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fa05 	bl	8001ca4 <GPIO_digitalWrite>

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, leftSpeed);
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <CAR_backwards+0x94>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <CAR_backwards+0x98>)
 80018a0:	7811      	ldrb	r1, [r2, #0]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fc41 	bl	800212c <TIM_writePWM>
    TIM_writePWM(TimxRight_global, ChannelRight_global, rightSpeed);
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <CAR_backwards+0x9c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a10      	ldr	r2, [pc, #64]	@ (80018f0 <CAR_backwards+0xa0>)
 80018b0:	7811      	ldrb	r1, [r2, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fc39 	bl	800212c <TIM_writePWM>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000029c 	.word	0x2000029c
 80018c8:	200002ac 	.word	0x200002ac
 80018cc:	200002a0 	.word	0x200002a0
 80018d0:	200002ad 	.word	0x200002ad
 80018d4:	200002a4 	.word	0x200002a4
 80018d8:	200002ae 	.word	0x200002ae
 80018dc:	200002a8 	.word	0x200002a8
 80018e0:	200002af 	.word	0x200002af
 80018e4:	20000290 	.word	0x20000290
 80018e8:	20000298 	.word	0x20000298
 80018ec:	20000294 	.word	0x20000294
 80018f0:	20000299 	.word	0x20000299

080018f4 <CAR_stop>:

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, leftSpeed);
    TIM_writePWM(TimxRight_global, ChannelRight_global, rightSpeed);
}

void CAR_stop() {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
    // Brake both motors
    GPIO_digitalWrite(DirLeft1_global, DirLeft1Pin_global, LOW);
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <CAR_stop+0x6c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a19      	ldr	r2, [pc, #100]	@ (8001964 <CAR_stop+0x70>)
 80018fe:	7811      	ldrb	r1, [r2, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f9ce 	bl	8001ca4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirLeft2_global, DirLeft2Pin_global, LOW);
 8001908:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <CAR_stop+0x74>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a17      	ldr	r2, [pc, #92]	@ (800196c <CAR_stop+0x78>)
 800190e:	7811      	ldrb	r1, [r2, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f9c6 	bl	8001ca4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight1_global, DirRight1Pin_global, LOW);
 8001918:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <CAR_stop+0x7c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a15      	ldr	r2, [pc, #84]	@ (8001974 <CAR_stop+0x80>)
 800191e:	7811      	ldrb	r1, [r2, #0]
 8001920:	2201      	movs	r2, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f9be 	bl	8001ca4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight2_global, DirRight2Pin_global, LOW);
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <CAR_stop+0x84>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a13      	ldr	r2, [pc, #76]	@ (800197c <CAR_stop+0x88>)
 800192e:	7811      	ldrb	r1, [r2, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f9b6 	bl	8001ca4 <GPIO_digitalWrite>

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, 0);
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <CAR_stop+0x8c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a11      	ldr	r2, [pc, #68]	@ (8001984 <CAR_stop+0x90>)
 800193e:	7811      	ldrb	r1, [r2, #0]
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fbf1 	bl	800212c <TIM_writePWM>
    TIM_writePWM(TimxRight_global, ChannelRight_global, 0);
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <CAR_stop+0x94>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a0f      	ldr	r2, [pc, #60]	@ (800198c <CAR_stop+0x98>)
 8001950:	7811      	ldrb	r1, [r2, #0]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fbe8 	bl	800212c <TIM_writePWM>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000029c 	.word	0x2000029c
 8001964:	200002ac 	.word	0x200002ac
 8001968:	200002a0 	.word	0x200002a0
 800196c:	200002ad 	.word	0x200002ad
 8001970:	200002a4 	.word	0x200002a4
 8001974:	200002ae 	.word	0x200002ae
 8001978:	200002a8 	.word	0x200002a8
 800197c:	200002af 	.word	0x200002af
 8001980:	20000290 	.word	0x20000290
 8001984:	20000298 	.word	0x20000298
 8001988:	20000294 	.word	0x20000294
 800198c:	20000299 	.word	0x20000299

08001990 <PD_init_angle>:
float prev_angle_time = 0;
float servo_output = 0;
#define maxDistance 10 //5cm from target
#define mainAngle 90

void PD_init_angle(float Kp, float Kd) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
    kp_angle = Kp;
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <PD_init_angle+0x20>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6013      	str	r3, [r2, #0]
    kd_angle = Kd;
 80019a0:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <PD_init_angle+0x24>)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6013      	str	r3, [r2, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	200002c4 	.word	0x200002c4
 80019b4:	200002c8 	.word	0x200002c8

080019b8 <PD_init>:
}



void PD_init( float Kp, float Kd)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
kp_global=Kp;
 80019c2:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <PD_init+0x20>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6013      	str	r3, [r2, #0]
kd_global=Kd;
 80019c8:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <PD_init+0x24>)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6013      	str	r3, [r2, #0]

}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	200002b0 	.word	0x200002b0
 80019dc:	200002b4 	.word	0x200002b4

080019e0 <PD_update_from_distance>:
void PD_update_from_distance(float actualDistance, uint64_t time_ms)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	e9c7 2300 	strd	r2, r3, [r7]
    float error = actualDistance - maxDistance;
 80019ec:	494a      	ldr	r1, [pc, #296]	@ (8001b18 <PD_update_from_distance+0x138>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f7ff f878 	bl	8000ae4 <__aeabi_fsub>
 80019f4:	4603      	mov	r3, r0
 80019f6:	61fb      	str	r3, [r7, #28]
    if(error<0){
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	69f8      	ldr	r0, [r7, #28]
 80019fe:	f7ff fb19 	bl	8001034 <__aeabi_fcmplt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <PD_update_from_distance+0x34>
    	kp_global=5;
 8001a08:	4b44      	ldr	r3, [pc, #272]	@ (8001b1c <PD_update_from_distance+0x13c>)
 8001a0a:	4a45      	ldr	r2, [pc, #276]	@ (8001b20 <PD_update_from_distance+0x140>)
 8001a0c:	601a      	str	r2, [r3, #0]
    	kd_global=5;
 8001a0e:	4b45      	ldr	r3, [pc, #276]	@ (8001b24 <PD_update_from_distance+0x144>)
 8001a10:	4a43      	ldr	r2, [pc, #268]	@ (8001b20 <PD_update_from_distance+0x140>)
 8001a12:	601a      	str	r2, [r3, #0]

    }
    float p = kp_global * error;
 8001a14:	4b41      	ldr	r3, [pc, #260]	@ (8001b1c <PD_update_from_distance+0x13c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	69f8      	ldr	r0, [r7, #28]
 8001a1c:	f7ff f96c 	bl	8000cf8 <__aeabi_fmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	61bb      	str	r3, [r7, #24]
    float d = kd_global*(error - prev_error) ;
 8001a24:	4b40      	ldr	r3, [pc, #256]	@ (8001b28 <PD_update_from_distance+0x148>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	69f8      	ldr	r0, [r7, #28]
 8001a2c:	f7ff f85a 	bl	8000ae4 <__aeabi_fsub>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b3b      	ldr	r3, [pc, #236]	@ (8001b24 <PD_update_from_distance+0x144>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f7ff f95c 	bl	8000cf8 <__aeabi_fmul>
 8001a40:	4603      	mov	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]
    prev_error = error;
 8001a44:	4a38      	ldr	r2, [pc, #224]	@ (8001b28 <PD_update_from_distance+0x148>)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	6013      	str	r3, [r2, #0]
    prev_time = time_ms;
 8001a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a4e:	f7ff f90d 	bl	8000c6c <__aeabi_ul2f>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a35      	ldr	r2, [pc, #212]	@ (8001b2c <PD_update_from_distance+0x14c>)
 8001a56:	6013      	str	r3, [r2, #0]

    speed = p + d;
 8001a58:	6979      	ldr	r1, [r7, #20]
 8001a5a:	69b8      	ldr	r0, [r7, #24]
 8001a5c:	f7ff f844 	bl	8000ae8 <__addsf3>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b32      	ldr	r3, [pc, #200]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001a66:	601a      	str	r2, [r3, #0]

    // Clamp speed to [-100, 100]
    if (speed > 100.0f) {
 8001a68:	4b31      	ldr	r3, [pc, #196]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4931      	ldr	r1, [pc, #196]	@ (8001b34 <PD_update_from_distance+0x154>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fafe 	bl	8001070 <__aeabi_fcmpgt>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <PD_update_from_distance+0xa2>
        speed = 100.0f;
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8001b34 <PD_update_from_distance+0x154>)
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e00b      	b.n	8001a9a <PD_update_from_distance+0xba>
    } else if (speed < -100.0f) {
 8001a82:	4b2b      	ldr	r3, [pc, #172]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	492c      	ldr	r1, [pc, #176]	@ (8001b38 <PD_update_from_distance+0x158>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fad3 	bl	8001034 <__aeabi_fcmplt>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <PD_update_from_distance+0xba>
        speed = -100.0f;
 8001a94:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001a96:	4a28      	ldr	r2, [pc, #160]	@ (8001b38 <PD_update_from_distance+0x158>)
 8001a98:	601a      	str	r2, [r3, #0]
//    if (speed > 0.0f && speed < 30.0f) {
//        speed = 30.0f;  // Minimum forward speed
//    } else if (speed < 0.0f && speed > -30.0f) {
//        speed = -30.0f; // Minimum backward speed
//    }
if(fabs(error)<6){
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001aa0:	4926      	ldr	r1, [pc, #152]	@ (8001b3c <PD_update_from_distance+0x15c>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fac6 	bl	8001034 <__aeabi_fcmplt>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <PD_update_from_distance+0xd6>
	speed=0;
 8001aae:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
}
    // Movement logic
    if (speed > 0) {
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fad6 	bl	8001070 <__aeabi_fcmpgt>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d008      	beq.n	8001adc <PD_update_from_distance+0xfc>
        CAR_forward(speed,speed);
 8001aca:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a18      	ldr	r2, [pc, #96]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fe69 	bl	80017ac <CAR_forward>
    } else if (speed < 0) {
        CAR_backwards(-speed,-speed);
    } else {
        CAR_stop();
    }
}
 8001ada:	e018      	b.n	8001b0e <PD_update_from_distance+0x12e>
    } else if (speed < 0) {
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff faa5 	bl	8001034 <__aeabi_fcmplt>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00c      	beq.n	8001b0a <PD_update_from_distance+0x12a>
        CAR_backwards(-speed,-speed);
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <PD_update_from_distance+0x150>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f7ff fea4 	bl	8001850 <CAR_backwards>
}
 8001b08:	e001      	b.n	8001b0e <PD_update_from_distance+0x12e>
        CAR_stop();
 8001b0a:	f7ff fef3 	bl	80018f4 <CAR_stop>
}
 8001b0e:	bf00      	nop
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	41200000 	.word	0x41200000
 8001b1c:	200002b0 	.word	0x200002b0
 8001b20:	40a00000 	.word	0x40a00000
 8001b24:	200002b4 	.word	0x200002b4
 8001b28:	200002b8 	.word	0x200002b8
 8001b2c:	200002bc 	.word	0x200002bc
 8001b30:	200002c0 	.word	0x200002c0
 8001b34:	42c80000 	.word	0x42c80000
 8001b38:	c2c80000 	.word	0xc2c80000
 8001b3c:	40c00000 	.word	0x40c00000

08001b40 <GPIO_pinMode>:
#include "GPIO_interface.h"

void GPIO_pinMode(GPIO_TypeDef *GPIOX, uint8_t pinNumber, GPIO_MODE mode){
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	f200 8099 	bhi.w	8001c8a <GPIO_pinMode+0x14a>
		return;
	}
	// Initialize the clock of port x
    if (GPIOX == GPIOA) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a4e      	ldr	r2, [pc, #312]	@ (8001c94 <GPIO_pinMode+0x154>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d106      	bne.n	8001b6e <GPIO_pinMode+0x2e>
		SET_BIT(RCC->APB2ENR, 2);
 8001b60:	4b4d      	ldr	r3, [pc, #308]	@ (8001c98 <GPIO_pinMode+0x158>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	@ (8001c98 <GPIO_pinMode+0x158>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	e014      	b.n	8001b98 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOB) {
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4a      	ldr	r2, [pc, #296]	@ (8001c9c <GPIO_pinMode+0x15c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d106      	bne.n	8001b84 <GPIO_pinMode+0x44>
		SET_BIT(RCC->APB2ENR, 3);
 8001b76:	4b48      	ldr	r3, [pc, #288]	@ (8001c98 <GPIO_pinMode+0x158>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	4a47      	ldr	r2, [pc, #284]	@ (8001c98 <GPIO_pinMode+0x158>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	6193      	str	r3, [r2, #24]
 8001b82:	e009      	b.n	8001b98 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOC) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a46      	ldr	r2, [pc, #280]	@ (8001ca0 <GPIO_pinMode+0x160>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d105      	bne.n	8001b98 <GPIO_pinMode+0x58>
		SET_BIT(RCC->APB2ENR, 4);
 8001b8c:	4b42      	ldr	r3, [pc, #264]	@ (8001c98 <GPIO_pinMode+0x158>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a41      	ldr	r2, [pc, #260]	@ (8001c98 <GPIO_pinMode+0x158>)
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	6193      	str	r3, [r2, #24]
    }
	volatile uint8_t pinIndex = pinNumber % 8;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	72fb      	strb	r3, [r7, #11]

	volatile uint32_t *CRX;
	if (pinNumber < 8 && pinNumber >= 0){
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	2b07      	cmp	r3, #7
 8001ba6:	d802      	bhi.n	8001bae <GPIO_pinMode+0x6e>
		CRX = &GPIOX->CRL;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e008      	b.n	8001bc0 <GPIO_pinMode+0x80>
	}else if(pinNumber >= 8 && pinNumber < 16){
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	2b07      	cmp	r3, #7
 8001bb2:	d905      	bls.n	8001bc0 <GPIO_pinMode+0x80>
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	d802      	bhi.n	8001bc0 <GPIO_pinMode+0x80>
		CRX = &GPIOX->CRH;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
	}
	// Zero the CRX register's specific pin mode not the whole register
	*CRX &= ~(0xF << (4*(pinIndex)));
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	601a      	str	r2, [r3, #0]
	if (mode == OUTPUT){
 8001bd8:	78bb      	ldrb	r3, [r7, #2]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d10a      	bne.n	8001bf4 <GPIO_pinMode+0xb4>
		*CRX |= (0x2 << (4*(pinIndex)));
 8001bde:	7afb      	ldrb	r3, [r7, #11]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	2202      	movs	r2, #2
 8001be6:	409a      	lsls	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e04b      	b.n	8001c8c <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_FLOAT){
 8001bf4:	78bb      	ldrb	r3, [r7, #2]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d10a      	bne.n	8001c10 <GPIO_pinMode+0xd0>
		*CRX |= (0x4 << (4*(pinIndex)));
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	2204      	movs	r2, #4
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e03d      	b.n	8001c8c <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_PULLUP){
 8001c10:	78bb      	ldrb	r3, [r7, #2]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d113      	bne.n	8001c3e <GPIO_pinMode+0xfe>
		*CRX |= (0x8 << (4*(pinIndex)));
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	601a      	str	r2, [r3, #0]
		SET_BIT(GPIOX->ODR, pinNumber);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	e026      	b.n	8001c8c <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_PULLDOWN){
 8001c3e:	78bb      	ldrb	r3, [r7, #2]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d114      	bne.n	8001c6e <GPIO_pinMode+0x12e>
		*CRX |= (0x8 << (4*(pinIndex)));
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	43d2      	mvns	r2, r2
 8001c66:	401a      	ands	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	e00e      	b.n	8001c8c <GPIO_pinMode+0x14c>
	}else if (mode == AF_PP){
 8001c6e:	78bb      	ldrb	r3, [r7, #2]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d10b      	bne.n	8001c8c <GPIO_pinMode+0x14c>
		*CRX |= (0xB << (4*(pinIndex)));
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220b      	movs	r2, #11
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e000      	b.n	8001c8c <GPIO_pinMode+0x14c>
		return;
 8001c8a:	bf00      	nop

	}
}
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40010800 	.word	0x40010800
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010c00 	.word	0x40010c00
 8001ca0:	40011000 	.word	0x40011000

08001ca4 <GPIO_digitalWrite>:

void GPIO_digitalWrite(GPIO_TypeDef *GPIOX, uint8_t pinNumber, PIN_LEVEL level){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	2b0f      	cmp	r3, #15
 8001cb8:	d81a      	bhi.n	8001cf0 <GPIO_digitalWrite+0x4c>
		return;
	}
	if (level == HIGH){
 8001cba:	78bb      	ldrb	r3, [r7, #2]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <GPIO_digitalWrite+0x30>
		SET_BIT(GPIOX->ODR, pinNumber);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	e00e      	b.n	8001cf2 <GPIO_digitalWrite+0x4e>
	}else if(level == LOW){
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10b      	bne.n	8001cf2 <GPIO_digitalWrite+0x4e>
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce6:	43d2      	mvns	r2, r2
 8001ce8:	401a      	ands	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	e000      	b.n	8001cf2 <GPIO_digitalWrite+0x4e>
		return;
 8001cf0:	bf00      	nop
	}
}
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
	...

08001cfc <__NVIC_EnableIRQ>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4906      	ldr	r1, [pc, #24]	@ (8001d30 <__NVIC_EnableIRQ+0x34>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <TIM_initPWM>:
volatile void (*callback4)();
uint64_t millis = 0;
uint16_t trigTime_ms_global;
int isFirstTime = 1;

void TIM_initPWM(TIM_TypeDef *TIMX, uint8_t channel, float frequency) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	72fb      	strb	r3, [r7, #11]
	if (channel < 1 || channel > 4) {
 8001d42:	7afb      	ldrb	r3, [r7, #11]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 81eb 	beq.w	8002120 <TIM_initPWM+0x3ec>
 8001d4a:	7afb      	ldrb	r3, [r7, #11]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	f200 81e7 	bhi.w	8002120 <TIM_initPWM+0x3ec>
		return;
	}
	// init clock and corresponding pin in the GPIO
	if (TIMX == TIM2) {
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d58:	d150      	bne.n	8001dfc <TIM_initPWM+0xc8>
		SET_BIT(RCC->APB1ENR, 0); // Enable TIM2 clock
 8001d5a:	4b9a      	ldr	r3, [pc, #616]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a99      	ldr	r2, [pc, #612]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // Enable GPIOA clock
 8001d66:	4b97      	ldr	r3, [pc, #604]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	4a96      	ldr	r2, [pc, #600]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6193      	str	r3, [r2, #24]
		switch (channel) {
 8001d72:	7afb      	ldrb	r3, [r7, #11]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	f200 80e8 	bhi.w	8001f4c <TIM_initPWM+0x218>
 8001d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001d84 <TIM_initPWM+0x50>)
 8001d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d82:	bf00      	nop
 8001d84:	08001d95 	.word	0x08001d95
 8001d88:	08001daf 	.word	0x08001daf
 8001d8c:	08001dc9 	.word	0x08001dc9
 8001d90:	08001de3 	.word	0x08001de3
		case 1: // PA0
			GPIOA->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8001d94:	4b8c      	ldr	r3, [pc, #560]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a8b      	ldr	r2, [pc, #556]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001d9a:	f023 030f 	bic.w	r3, r3, #15
 8001d9e:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_CNF0_1); // 2 MHz, AF PP
 8001da0:	4b89      	ldr	r3, [pc, #548]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a88      	ldr	r2, [pc, #544]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001da6:	f043 030a 	orr.w	r3, r3, #10
 8001daa:	6013      	str	r3, [r2, #0]
			break;
 8001dac:	e0ce      	b.n	8001f4c <TIM_initPWM+0x218>
		case 2: // PA1
			GPIOA->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);
 8001dae:	4b86      	ldr	r3, [pc, #536]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a85      	ldr	r2, [pc, #532]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001db4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001db8:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1);
 8001dba:	4b83      	ldr	r3, [pc, #524]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a82      	ldr	r2, [pc, #520]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001dc0:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001dc4:	6013      	str	r3, [r2, #0]
			break;
 8001dc6:	e0c1      	b.n	8001f4c <TIM_initPWM+0x218>
		case 3: // PA2
			GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8001dc8:	4b7f      	ldr	r3, [pc, #508]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a7e      	ldr	r2, [pc, #504]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001dce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001dd2:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_CNF2_1);
 8001dd4:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a7b      	ldr	r2, [pc, #492]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001dda:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 8001dde:	6013      	str	r3, [r2, #0]
			break;
 8001de0:	e0b4      	b.n	8001f4c <TIM_initPWM+0x218>
		case 4: // PA3
			GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8001de2:	4b79      	ldr	r3, [pc, #484]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a78      	ldr	r2, [pc, #480]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001de8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001dec:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE3_1 | GPIO_CRL_CNF3_1);
 8001dee:	4b76      	ldr	r3, [pc, #472]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a75      	ldr	r2, [pc, #468]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001df4:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8001df8:	6013      	str	r3, [r2, #0]
			break;
 8001dfa:	e0a7      	b.n	8001f4c <TIM_initPWM+0x218>
		}
	} else if (TIMX == TIM3) {
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4a73      	ldr	r2, [pc, #460]	@ (8001fcc <TIM_initPWM+0x298>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d14f      	bne.n	8001ea4 <TIM_initPWM+0x170>
		SET_BIT(RCC->APB1ENR, 1); // Enable TIM3 clock
 8001e04:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	4a6e      	ldr	r2, [pc, #440]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN; // Enable GPIOA & GPIOB
 8001e10:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a6b      	ldr	r2, [pc, #428]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001e16:	f043 030c 	orr.w	r3, r3, #12
 8001e1a:	6193      	str	r3, [r2, #24]
		switch (channel) {
 8001e1c:	7afb      	ldrb	r3, [r7, #11]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	f200 8093 	bhi.w	8001f4c <TIM_initPWM+0x218>
 8001e26:	a201      	add	r2, pc, #4	@ (adr r2, 8001e2c <TIM_initPWM+0xf8>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001e3d 	.word	0x08001e3d
 8001e30:	08001e57 	.word	0x08001e57
 8001e34:	08001e71 	.word	0x08001e71
 8001e38:	08001e8b 	.word	0x08001e8b
		case 1: // PA6
			GPIOA->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8001e3c:	4b62      	ldr	r3, [pc, #392]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a61      	ldr	r2, [pc, #388]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001e42:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001e46:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1);
 8001e48:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001e4e:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8001e52:	6013      	str	r3, [r2, #0]
			break;
 8001e54:	e07a      	b.n	8001f4c <TIM_initPWM+0x218>
		case 2: // PA7
			GPIOA->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8001e56:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001e5c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001e60:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1);
 8001e62:	4b59      	ldr	r3, [pc, #356]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a58      	ldr	r2, [pc, #352]	@ (8001fc8 <TIM_initPWM+0x294>)
 8001e68:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 8001e6c:	6013      	str	r3, [r2, #0]
			break;
 8001e6e:	e06d      	b.n	8001f4c <TIM_initPWM+0x218>
		case 3: // PB0
			GPIOB->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8001e70:	4b57      	ldr	r3, [pc, #348]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a56      	ldr	r2, [pc, #344]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001e76:	f023 030f 	bic.w	r3, r3, #15
 8001e7a:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_CNF0_1);
 8001e7c:	4b54      	ldr	r3, [pc, #336]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a53      	ldr	r2, [pc, #332]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001e82:	f043 030a 	orr.w	r3, r3, #10
 8001e86:	6013      	str	r3, [r2, #0]
			break;
 8001e88:	e060      	b.n	8001f4c <TIM_initPWM+0x218>
		case 4: // PB1
			GPIOB->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);
 8001e8a:	4b51      	ldr	r3, [pc, #324]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a50      	ldr	r2, [pc, #320]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001e90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e94:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1);
 8001e96:	4b4e      	ldr	r3, [pc, #312]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a4d      	ldr	r2, [pc, #308]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001e9c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001ea0:	6013      	str	r3, [r2, #0]
			break;
 8001ea2:	e053      	b.n	8001f4c <TIM_initPWM+0x218>
		}
	} else if (TIMX == TIM4) {
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a4b      	ldr	r2, [pc, #300]	@ (8001fd4 <TIM_initPWM+0x2a0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d14f      	bne.n	8001f4c <TIM_initPWM+0x218>
		SET_BIT(RCC->APB1ENR, 2); // Enable TIM4 clock
 8001eac:	4b45      	ldr	r3, [pc, #276]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	4a44      	ldr	r2, [pc, #272]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; // Enable GPIOB clock
 8001eb8:	4b42      	ldr	r3, [pc, #264]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a41      	ldr	r2, [pc, #260]	@ (8001fc4 <TIM_initPWM+0x290>)
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	6193      	str	r3, [r2, #24]
		switch (channel) {
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d83f      	bhi.n	8001f4c <TIM_initPWM+0x218>
 8001ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed4 <TIM_initPWM+0x1a0>)
 8001ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed2:	bf00      	nop
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001eff 	.word	0x08001eff
 8001edc:	08001f19 	.word	0x08001f19
 8001ee0:	08001f33 	.word	0x08001f33
		case 1: // PB6
			GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a39      	ldr	r2, [pc, #228]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001eea:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001eee:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1);
 8001ef0:	4b37      	ldr	r3, [pc, #220]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a36      	ldr	r2, [pc, #216]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001ef6:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8001efa:	6013      	str	r3, [r2, #0]
			break;
 8001efc:	e026      	b.n	8001f4c <TIM_initPWM+0x218>
		case 2: // PB7
			GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8001efe:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a33      	ldr	r2, [pc, #204]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f04:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001f08:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1);
 8001f0a:	4b31      	ldr	r3, [pc, #196]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a30      	ldr	r2, [pc, #192]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f10:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 8001f14:	6013      	str	r3, [r2, #0]
			break;
 8001f16:	e019      	b.n	8001f4c <TIM_initPWM+0x218>
		case 3: // PB8
			GPIOB->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 8001f18:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f1e:	f023 030f 	bic.w	r3, r3, #15
 8001f22:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= (GPIO_CRH_MODE8_1 | GPIO_CRH_CNF8_1);
 8001f24:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a29      	ldr	r2, [pc, #164]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f2a:	f043 030a 	orr.w	r3, r3, #10
 8001f2e:	6053      	str	r3, [r2, #4]
			break;
 8001f30:	e00c      	b.n	8001f4c <TIM_initPWM+0x218>
		case 4: // PB9
			GPIOB->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 8001f32:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4a26      	ldr	r2, [pc, #152]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f3c:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= (GPIO_CRH_MODE9_1 | GPIO_CRH_CNF9_1);
 8001f3e:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4a23      	ldr	r2, [pc, #140]	@ (8001fd0 <TIM_initPWM+0x29c>)
 8001f44:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001f48:	6053      	str	r3, [r2, #4]
			break;
 8001f4a:	bf00      	nop
		}
	}

	// direction upward
	CLEAR_BIT(TIMX->CR1, 4);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 0210 	bic.w	r2, r3, #16
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]
	// mode 'edge aligned'
	CLEAR_BIT(TIMX->CR1, 5);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 0220 	bic.w	r2, r3, #32
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIMX->CR1, 6);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]
	// set the ARR preload
	SET_BIT(TIMX->CR1, 7);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]
	//enable the capture compare corresponding pin
	SET_BIT(TIMX->CCER, (4 * (channel - 1)));
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	7afa      	ldrb	r2, [r7, #11]
 8001f82:	3a01      	subs	r2, #1
 8001f84:	0092      	lsls	r2, r2, #2
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	621a      	str	r2, [r3, #32]
	// choose the polarity of the pin to active high
	CLEAR_BIT(TIMX->CCER, (4 * (channel - 1) + 1));
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	7afa      	ldrb	r2, [r7, #11]
 8001f98:	3a01      	subs	r2, #1
 8001f9a:	0092      	lsls	r2, r2, #2
 8001f9c:	3201      	adds	r2, #1
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa4:	43d2      	mvns	r2, r2
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	621a      	str	r2, [r3, #32]

	volatile uint32_t *CCMRX;
	uint8_t modChannel = 1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	76fb      	strb	r3, [r7, #27]
	if (channel <= 2) {
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d810      	bhi.n	8001fd8 <TIM_initPWM+0x2a4>
		CCMRX = &TIMX->CCMR1;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3318      	adds	r3, #24
 8001fba:	61fb      	str	r3, [r7, #28]
		modChannel = channel;
 8001fbc:	7afb      	ldrb	r3, [r7, #11]
 8001fbe:	76fb      	strb	r3, [r7, #27]
 8001fc0:	e010      	b.n	8001fe4 <TIM_initPWM+0x2b0>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40010c00 	.word	0x40010c00
 8001fd4:	40000800 	.word	0x40000800
	} else {
		CCMRX = &TIMX->CCMR2;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	331c      	adds	r3, #28
 8001fdc:	61fb      	str	r3, [r7, #28]
		modChannel = channel - 2;
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	3b02      	subs	r3, #2
 8001fe2:	76fb      	strb	r3, [r7, #27]
	}
	// set the channel mode to be output
	CLEAR_BIT(*CCMRX, (8 * (modChannel - 1)));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	7efa      	ldrb	r2, [r7, #27]
 8001fea:	3a01      	subs	r2, #1
 8001fec:	00d2      	lsls	r2, r2, #3
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff4:	43d2      	mvns	r2, r2
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(*CCMRX, (8 * (modChannel - 1) + 1));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	7efa      	ldrb	r2, [r7, #27]
 8002002:	3a01      	subs	r2, #1
 8002004:	00d2      	lsls	r2, r2, #3
 8002006:	3201      	adds	r2, #1
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	43d2      	mvns	r2, r2
 8002010:	401a      	ands	r2, r3
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	601a      	str	r2, [r3, #0]
	// set the channel preload enable
	SET_BIT(*CCMRX, (8 * (modChannel - 1) + 3));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	7efa      	ldrb	r2, [r7, #27]
 800201c:	3a01      	subs	r2, #1
 800201e:	00d2      	lsls	r2, r2, #3
 8002020:	3203      	adds	r2, #3
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	431a      	orrs	r2, r3
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	601a      	str	r2, [r3, #0]
	// select PWM mode 1
	CLEAR_BIT(*CCMRX, (8 * (modChannel - 1) + 4));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	7efa      	ldrb	r2, [r7, #27]
 8002034:	3a01      	subs	r2, #1
 8002036:	00d2      	lsls	r2, r2, #3
 8002038:	3204      	adds	r2, #4
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	43d2      	mvns	r2, r2
 8002042:	401a      	ands	r2, r3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	601a      	str	r2, [r3, #0]
	SET_BIT(*CCMRX, (8 * (modChannel - 1) + 5));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	7efa      	ldrb	r2, [r7, #27]
 800204e:	3a01      	subs	r2, #1
 8002050:	00d2      	lsls	r2, r2, #3
 8002052:	3205      	adds	r2, #5
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f202 	lsl.w	r2, r1, r2
 800205a:	431a      	orrs	r2, r3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	601a      	str	r2, [r3, #0]
	SET_BIT(*CCMRX, (8 * (modChannel - 1) + 6));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	7efa      	ldrb	r2, [r7, #27]
 8002066:	3a01      	subs	r2, #1
 8002068:	00d2      	lsls	r2, r2, #3
 800206a:	3206      	adds	r2, #6
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	431a      	orrs	r2, r3
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	601a      	str	r2, [r3, #0]

	// setting the psc with zero
	TIMX->PSC = 0;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	629a      	str	r2, [r3, #40]	@ 0x28
	// calculating prescaler and arr for specific frequency
	float currentARR = (8000000 / ((frequency * (TIMX->PSC + 1)))) - 1;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	3301      	adds	r3, #1
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fddf 	bl	8000c48 <__aeabi_ui2f>
 800208a:	4603      	mov	r3, r0
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fe32 	bl	8000cf8 <__aeabi_fmul>
 8002094:	4603      	mov	r3, r0
 8002096:	4619      	mov	r1, r3
 8002098:	4823      	ldr	r0, [pc, #140]	@ (8002128 <TIM_initPWM+0x3f4>)
 800209a:	f7fe fee1 	bl	8000e60 <__aeabi_fdiv>
 800209e:	4603      	mov	r3, r0
 80020a0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fd1d 	bl	8000ae4 <__aeabi_fsub>
 80020aa:	4603      	mov	r3, r0
 80020ac:	617b      	str	r3, [r7, #20]
	while (currentARR >= 65536) {
 80020ae:	e01c      	b.n	80020ea <TIM_initPWM+0x3b6>
		TIMX->PSC += 1;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	629a      	str	r2, [r3, #40]	@ 0x28
		currentARR = (8000000 / ((frequency * (TIMX->PSC + 1)))) - 1;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	3301      	adds	r3, #1
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fdc1 	bl	8000c48 <__aeabi_ui2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fe14 	bl	8000cf8 <__aeabi_fmul>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4619      	mov	r1, r3
 80020d4:	4814      	ldr	r0, [pc, #80]	@ (8002128 <TIM_initPWM+0x3f4>)
 80020d6:	f7fe fec3 	bl	8000e60 <__aeabi_fdiv>
 80020da:	4603      	mov	r3, r0
 80020dc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fcff 	bl	8000ae4 <__aeabi_fsub>
 80020e6:	4603      	mov	r3, r0
 80020e8:	617b      	str	r3, [r7, #20]
	while (currentARR >= 65536) {
 80020ea:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7fe ffb4 	bl	800105c <__aeabi_fcmpge>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1da      	bne.n	80020b0 <TIM_initPWM+0x37c>
	}
	TIMX->ARR = currentARR;
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7fe ffc2 	bl	8001084 <__aeabi_f2uiz>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	62da      	str	r2, [r3, #44]	@ 0x2c
	SET_BIT(TIMX->EGR, 0);  // UG: Update Generation
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	615a      	str	r2, [r3, #20]
	// start counting
	SET_BIT(TIMX->CR1, 0);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f043 0201 	orr.w	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e000      	b.n	8002122 <TIM_initPWM+0x3ee>
		return;
 8002120:	bf00      	nop
}
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	4af42400 	.word	0x4af42400

0800212c <TIM_writePWM>:

void TIM_writePWM(TIM_TypeDef *TIMX, uint8_t channel, float dutyCycle) {
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	460b      	mov	r3, r1
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	72fb      	strb	r3, [r7, #11]
	if (channel < 1 || channel > 4 || dutyCycle < 0 || dutyCycle > 100) {
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d044      	beq.n	80021ca <TIM_writePWM+0x9e>
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	2b04      	cmp	r3, #4
 8002144:	d841      	bhi.n	80021ca <TIM_writePWM+0x9e>
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe ff72 	bl	8001034 <__aeabi_fcmplt>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d139      	bne.n	80021ca <TIM_writePWM+0x9e>
 8002156:	491f      	ldr	r1, [pc, #124]	@ (80021d4 <TIM_writePWM+0xa8>)
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7fe ff89 	bl	8001070 <__aeabi_fcmpgt>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d132      	bne.n	80021ca <TIM_writePWM+0x9e>
		return;
	}
	volatile uint32_t *CCRX;
	if (channel == 1) {
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d103      	bne.n	8002172 <TIM_writePWM+0x46>
		CCRX = &TIMX->CCR1;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3334      	adds	r3, #52	@ 0x34
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e013      	b.n	800219a <TIM_writePWM+0x6e>
	} else if (channel == 2) {
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d103      	bne.n	8002180 <TIM_writePWM+0x54>
		CCRX = &TIMX->CCR2;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3338      	adds	r3, #56	@ 0x38
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e00c      	b.n	800219a <TIM_writePWM+0x6e>
	} else if (channel == 3) {
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d103      	bne.n	800218e <TIM_writePWM+0x62>
		CCRX = &TIMX->CCR3;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	333c      	adds	r3, #60	@ 0x3c
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e005      	b.n	800219a <TIM_writePWM+0x6e>
	} else if (channel == 4) {
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	2b04      	cmp	r3, #4
 8002192:	d102      	bne.n	800219a <TIM_writePWM+0x6e>
		CCRX = &TIMX->CCR4;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3340      	adds	r3, #64	@ 0x40
 8002198:	617b      	str	r3, [r7, #20]
	}
	*CCRX = (dutyCycle / 100) * (TIMX->ARR);
 800219a:	490e      	ldr	r1, [pc, #56]	@ (80021d4 <TIM_writePWM+0xa8>)
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7fe fe5f 	bl	8000e60 <__aeabi_fdiv>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461c      	mov	r4, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fd4c 	bl	8000c48 <__aeabi_ui2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4619      	mov	r1, r3
 80021b4:	4620      	mov	r0, r4
 80021b6:	f7fe fd9f 	bl	8000cf8 <__aeabi_fmul>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe ff61 	bl	8001084 <__aeabi_f2uiz>
 80021c2:	4602      	mov	r2, r0
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e000      	b.n	80021cc <TIM_writePWM+0xa0>
		return;
 80021ca:	bf00      	nop
}
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	42c80000 	.word	0x42c80000

080021d8 <enableTimerClock>:
		TIM_delay(TIMX, chunk);
		delay_ms -= chunk;
	}
}

void enableTimerClock(TIM_TypeDef *TIMx) {
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	switch ((uint32_t) TIMx) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a1a      	ldr	r2, [pc, #104]	@ (800224c <enableTimerClock+0x74>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00f      	beq.n	8002208 <enableTimerClock+0x30>
 80021e8:	4a18      	ldr	r2, [pc, #96]	@ (800224c <enableTimerClock+0x74>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d828      	bhi.n	8002240 <enableTimerClock+0x68>
 80021ee:	4a18      	ldr	r2, [pc, #96]	@ (8002250 <enableTimerClock+0x78>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d01e      	beq.n	8002232 <enableTimerClock+0x5a>
 80021f4:	4a16      	ldr	r2, [pc, #88]	@ (8002250 <enableTimerClock+0x78>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d822      	bhi.n	8002240 <enableTimerClock+0x68>
 80021fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021fe:	d00a      	beq.n	8002216 <enableTimerClock+0x3e>
 8002200:	4a14      	ldr	r2, [pc, #80]	@ (8002254 <enableTimerClock+0x7c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00e      	beq.n	8002224 <enableTimerClock+0x4c>
		break;
	case (uint32_t) TIM4:
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
		break;
	default:
		break;
 8002206:	e01b      	b.n	8002240 <enableTimerClock+0x68>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8002208:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <enableTimerClock+0x80>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <enableTimerClock+0x80>)
 800220e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002212:	6193      	str	r3, [r2, #24]
		break;
 8002214:	e015      	b.n	8002242 <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <enableTimerClock+0x80>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a0f      	ldr	r2, [pc, #60]	@ (8002258 <enableTimerClock+0x80>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	61d3      	str	r3, [r2, #28]
		break;
 8002222:	e00e      	b.n	8002242 <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <enableTimerClock+0x80>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	4a0b      	ldr	r2, [pc, #44]	@ (8002258 <enableTimerClock+0x80>)
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	61d3      	str	r3, [r2, #28]
		break;
 8002230:	e007      	b.n	8002242 <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <enableTimerClock+0x80>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a08      	ldr	r2, [pc, #32]	@ (8002258 <enableTimerClock+0x80>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	61d3      	str	r3, [r2, #28]
		break;
 800223e:	e000      	b.n	8002242 <enableTimerClock+0x6a>
		break;
 8002240:	bf00      	nop
	}
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40012c00 	.word	0x40012c00
 8002250:	40000800 	.word	0x40000800
 8002254:	40000400 	.word	0x40000400
 8002258:	40021000 	.word	0x40021000

0800225c <TIM_initMillis>:
	}

	// start counting
	SET_BIT(TIMX->CR1, 0);
}
void TIM_initMillis(TIM_TypeDef *TIMX, uint16_t trigTime_ms) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
	enableTimerClock(TIMX);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ffb5 	bl	80021d8 <enableTimerClock>
	TIMX->CR1 = 0;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
	trigTime_ms_global = trigTime_ms;
 8002274:	4a23      	ldr	r2, [pc, #140]	@ (8002304 <TIM_initMillis+0xa8>)
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	8013      	strh	r3, [r2, #0]
	TIMX->CCER |= TIM_CCER_CC1E;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	621a      	str	r2, [r3, #32]
	TIMX->DIER |= TIM_DIER_CC1IE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f043 0202 	orr.w	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60da      	str	r2, [r3, #12]
	TIMX->CCMR1 &= ~TIM_CCMR1_CC1S;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
	TIMX->CNT = 0;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24
	TIMX->PSC = 8000 - 1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
	TIMX->ARR = (60000) - 1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80022b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (TIMX == TIM2) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ba:	d103      	bne.n	80022c4 <TIM_initMillis+0x68>
		NVIC_EnableIRQ(TIM2_IRQn);
 80022bc:	201c      	movs	r0, #28
 80022be:	f7ff fd1d 	bl	8001cfc <__NVIC_EnableIRQ>
 80022c2:	e00e      	b.n	80022e2 <TIM_initMillis+0x86>
	} else if (TIMX == TIM3) {
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a10      	ldr	r2, [pc, #64]	@ (8002308 <TIM_initMillis+0xac>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d103      	bne.n	80022d4 <TIM_initMillis+0x78>
		NVIC_EnableIRQ(TIM3_IRQn);
 80022cc:	201d      	movs	r0, #29
 80022ce:	f7ff fd15 	bl	8001cfc <__NVIC_EnableIRQ>
 80022d2:	e006      	b.n	80022e2 <TIM_initMillis+0x86>
	} else if (TIMX == TIM4) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <TIM_initMillis+0xb0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d102      	bne.n	80022e2 <TIM_initMillis+0x86>
		NVIC_EnableIRQ(TIM4_IRQn);
 80022dc:	201e      	movs	r0, #30
 80022de:	f7ff fd0d 	bl	8001cfc <__NVIC_EnableIRQ>
	}

	TIMX->CR1 |= TIM_CR1_CEN;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	601a      	str	r2, [r3, #0]
	TIMX->CCR1 = TIMX->CNT + trigTime_ms_global;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <TIM_initMillis+0xa8>)
 80022f4:	8812      	ldrh	r2, [r2, #0]
 80022f6:	441a      	add	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	200002f8 	.word	0x200002f8
 8002308:	40000400 	.word	0x40000400
 800230c:	40000800 	.word	0x40000800

08002310 <TIM_Millis>:

uint64_t TIM_Millis() {
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	if (isFirstTime) {
 8002314:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <TIM_Millis+0x30>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <TIM_Millis+0x20>
		isFirstTime = 0;
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <TIM_Millis+0x30>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
		millis = 0;
 8002322:	4908      	ldr	r1, [pc, #32]	@ (8002344 <TIM_Millis+0x34>)
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return millis;
 8002330:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <TIM_Millis+0x34>)
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	2000000c 	.word	0x2000000c
 8002344:	200002f0 	.word	0x200002f0

08002348 <TIM2_IRQHandler>:

void TIM2_IRQHandler() {
 8002348:	b598      	push	{r3, r4, r7, lr}
 800234a:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC1IF) {
 800234c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01a      	beq.n	8002390 <TIM2_IRQHandler+0x48>
		TIM2->SR &= ~TIM_SR_CC1IF;
 800235a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002364:	f023 0302 	bic.w	r3, r3, #2
 8002368:	6113      	str	r3, [r2, #16]
		TIM2->CCR1 = TIM2->CNT + trigTime_ms_global;
 800236a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	4a1d      	ldr	r2, [pc, #116]	@ (80023e8 <TIM2_IRQHandler+0xa0>)
 8002372:	8812      	ldrh	r2, [r2, #0]
 8002374:	4614      	mov	r4, r2
 8002376:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800237a:	4423      	add	r3, r4
 800237c:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 800237e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <TIM2_IRQHandler+0xa4>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	1c50      	adds	r0, r2, #1
 8002386:	f143 0100 	adc.w	r1, r3, #0
 800238a:	4b18      	ldr	r3, [pc, #96]	@ (80023ec <TIM2_IRQHandler+0xa4>)
 800238c:	e9c3 0100 	strd	r0, r1, [r3]
//		if (isFirstTime) {
//			isFirstTime = 0;
//			millis = 0;
//		}
	}
	if ((TIM2->SR & (1 << 0)) == 1) { // check the uif flag
 8002390:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d122      	bne.n	80023e4 <TIM2_IRQHandler+0x9c>
		TIM2->SR &= ~(1 << 0); // clear the uif
 800239e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6113      	str	r3, [r2, #16]
		counter2++;
 80023ae:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <TIM2_IRQHandler+0xa8>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <TIM2_IRQHandler+0xa8>)
 80023ba:	801a      	strh	r2, [r3, #0]
		if (counter2 == n2) {
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <TIM2_IRQHandler+0xa8>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <TIM2_IRQHandler+0xac>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d10b      	bne.n	80023e4 <TIM2_IRQHandler+0x9c>
			counter2 = 0;
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <TIM2_IRQHandler+0xa8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	801a      	strh	r2, [r3, #0]
			TIM2->CNT = preload2; // set the preload
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <TIM2_IRQHandler+0xb0>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24
			callback2();
 80023de:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <TIM2_IRQHandler+0xb4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4798      	blx	r3
		}
	}
}
 80023e4:	bf00      	nop
 80023e6:	bd98      	pop	{r3, r4, r7, pc}
 80023e8:	200002f8 	.word	0x200002f8
 80023ec:	200002f0 	.word	0x200002f0
 80023f0:	200002d8 	.word	0x200002d8
 80023f4:	200002d2 	.word	0x200002d2
 80023f8:	200002cc 	.word	0x200002cc
 80023fc:	200002e0 	.word	0x200002e0

08002400 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 8002400:	b598      	push	{r3, r4, r7, lr}
 8002402:	af00      	add	r7, sp, #0
	if ((TIM3->SR & (1 << 0)) == 1) { // check the uif flag
 8002404:	4b25      	ldr	r3, [pc, #148]	@ (800249c <TIM3_IRQHandler+0x9c>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d142      	bne.n	8002496 <TIM3_IRQHandler+0x96>
		if (TIM3->SR & TIM_SR_CC1IF) {
 8002410:	4b22      	ldr	r3, [pc, #136]	@ (800249c <TIM3_IRQHandler+0x9c>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d016      	beq.n	800244a <TIM3_IRQHandler+0x4a>
			TIM3->SR &= ~TIM_SR_CC1IF;
 800241c:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <TIM3_IRQHandler+0x9c>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	4a1e      	ldr	r2, [pc, #120]	@ (800249c <TIM3_IRQHandler+0x9c>)
 8002422:	f023 0302 	bic.w	r3, r3, #2
 8002426:	6113      	str	r3, [r2, #16]
			TIM3->CCR1 = TIM3->CNT + trigTime_ms_global;
 8002428:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <TIM3_IRQHandler+0x9c>)
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <TIM3_IRQHandler+0xa0>)
 800242e:	8812      	ldrh	r2, [r2, #0]
 8002430:	4614      	mov	r4, r2
 8002432:	4a1a      	ldr	r2, [pc, #104]	@ (800249c <TIM3_IRQHandler+0x9c>)
 8002434:	4423      	add	r3, r4
 8002436:	6353      	str	r3, [r2, #52]	@ 0x34
			millis++;
 8002438:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <TIM3_IRQHandler+0xa4>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	1c50      	adds	r0, r2, #1
 8002440:	f143 0100 	adc.w	r1, r3, #0
 8002444:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <TIM3_IRQHandler+0xa4>)
 8002446:	e9c3 0100 	strd	r0, r1, [r3]
//			if (isFirstTime) {
//				isFirstTime = 0;
//				millis = 0;
//			}
		}
		if ((TIM3->SR & (1 << 0)) == 1) {
 800244a:	4b14      	ldr	r3, [pc, #80]	@ (800249c <TIM3_IRQHandler+0x9c>)
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d11f      	bne.n	8002496 <TIM3_IRQHandler+0x96>
			TIM3->SR &= ~(1 << 0); // clear the uif
 8002456:	4b11      	ldr	r3, [pc, #68]	@ (800249c <TIM3_IRQHandler+0x9c>)
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	4a10      	ldr	r2, [pc, #64]	@ (800249c <TIM3_IRQHandler+0x9c>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6113      	str	r3, [r2, #16]
			counter3++;
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <TIM3_IRQHandler+0xa8>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	3301      	adds	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <TIM3_IRQHandler+0xa8>)
 800246e:	801a      	strh	r2, [r3, #0]
			if (counter3 == n3) {
 8002470:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <TIM3_IRQHandler+0xa8>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29a      	uxth	r2, r3
 8002476:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <TIM3_IRQHandler+0xac>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	429a      	cmp	r2, r3
 800247e:	d10a      	bne.n	8002496 <TIM3_IRQHandler+0x96>
				counter3 = 0;
 8002480:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <TIM3_IRQHandler+0xa8>)
 8002482:	2200      	movs	r2, #0
 8002484:	801a      	strh	r2, [r3, #0]
				TIM3->CNT = preload3; // set the preload
 8002486:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <TIM3_IRQHandler+0xb0>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <TIM3_IRQHandler+0x9c>)
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24
				callback3();
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <TIM3_IRQHandler+0xb4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4798      	blx	r3
			}
		}
	}
}
 8002496:	bf00      	nop
 8002498:	bd98      	pop	{r3, r4, r7, pc}
 800249a:	bf00      	nop
 800249c:	40000400 	.word	0x40000400
 80024a0:	200002f8 	.word	0x200002f8
 80024a4:	200002f0 	.word	0x200002f0
 80024a8:	200002da 	.word	0x200002da
 80024ac:	200002d4 	.word	0x200002d4
 80024b0:	200002ce 	.word	0x200002ce
 80024b4:	200002e4 	.word	0x200002e4

080024b8 <TIM4_IRQHandler>:

void TIM4_IRQHandler() {
 80024b8:	b598      	push	{r3, r4, r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	if ((TIM4->SR & (1 << 0)) == 1) { // check the uif flag
 80024bc:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <TIM4_IRQHandler+0x9c>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d142      	bne.n	800254e <TIM4_IRQHandler+0x96>
		if (TIM4->SR & TIM_SR_CC1IF) {
 80024c8:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <TIM4_IRQHandler+0x9c>)
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d016      	beq.n	8002502 <TIM4_IRQHandler+0x4a>
			TIM4->SR &= ~TIM_SR_CC1IF;
 80024d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <TIM4_IRQHandler+0x9c>)
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002554 <TIM4_IRQHandler+0x9c>)
 80024da:	f023 0302 	bic.w	r3, r3, #2
 80024de:	6113      	str	r3, [r2, #16]
			TIM4->CCR1 = TIM4->CNT + trigTime_ms_global;
 80024e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002554 <TIM4_IRQHandler+0x9c>)
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002558 <TIM4_IRQHandler+0xa0>)
 80024e6:	8812      	ldrh	r2, [r2, #0]
 80024e8:	4614      	mov	r4, r2
 80024ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002554 <TIM4_IRQHandler+0x9c>)
 80024ec:	4423      	add	r3, r4
 80024ee:	6353      	str	r3, [r2, #52]	@ 0x34
			millis++;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	@ (800255c <TIM4_IRQHandler+0xa4>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	1c50      	adds	r0, r2, #1
 80024f8:	f143 0100 	adc.w	r1, r3, #0
 80024fc:	4b17      	ldr	r3, [pc, #92]	@ (800255c <TIM4_IRQHandler+0xa4>)
 80024fe:	e9c3 0100 	strd	r0, r1, [r3]
//			if (isFirstTime) {
//				isFirstTime = 0;
//				millis = 0;
//			}
		}
		if ((TIM4->SR & (1 << 0)) == 1) {
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <TIM4_IRQHandler+0x9c>)
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d11f      	bne.n	800254e <TIM4_IRQHandler+0x96>
			TIM4->SR &= ~(1 << 0); // clear the uif
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <TIM4_IRQHandler+0x9c>)
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	4a10      	ldr	r2, [pc, #64]	@ (8002554 <TIM4_IRQHandler+0x9c>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6113      	str	r3, [r2, #16]
			counter4++;
 800251a:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <TIM4_IRQHandler+0xa8>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <TIM4_IRQHandler+0xa8>)
 8002526:	801a      	strh	r2, [r3, #0]
			if (counter4 == n4) {
 8002528:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <TIM4_IRQHandler+0xa8>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29a      	uxth	r2, r3
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <TIM4_IRQHandler+0xac>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	429a      	cmp	r2, r3
 8002536:	d10a      	bne.n	800254e <TIM4_IRQHandler+0x96>
				counter4 = 0;
 8002538:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <TIM4_IRQHandler+0xa8>)
 800253a:	2200      	movs	r2, #0
 800253c:	801a      	strh	r2, [r3, #0]
				TIM4->CNT = preload4; // set the preload
 800253e:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <TIM4_IRQHandler+0xb0>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29a      	uxth	r2, r3
 8002544:	4b03      	ldr	r3, [pc, #12]	@ (8002554 <TIM4_IRQHandler+0x9c>)
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24
				callback4();
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <TIM4_IRQHandler+0xb4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4798      	blx	r3
			}
		}
	}
}
 800254e:	bf00      	nop
 8002550:	bd98      	pop	{r3, r4, r7, pc}
 8002552:	bf00      	nop
 8002554:	40000800 	.word	0x40000800
 8002558:	200002f8 	.word	0x200002f8
 800255c:	200002f0 	.word	0x200002f0
 8002560:	200002dc 	.word	0x200002dc
 8002564:	200002d6 	.word	0x200002d6
 8002568:	200002d0 	.word	0x200002d0
 800256c:	200002e8 	.word	0x200002e8

08002570 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6852      	ldr	r2, [r2, #4]
 80025d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d103      	bne.n	80025ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1e5a      	subs	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002612:	4b4f      	ldr	r3, [pc, #316]	@ (8002750 <xTaskIncrementTick+0x148>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 808f 	bne.w	800273a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800261c:	4b4d      	ldr	r3, [pc, #308]	@ (8002754 <xTaskIncrementTick+0x14c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002624:	4a4b      	ldr	r2, [pc, #300]	@ (8002754 <xTaskIncrementTick+0x14c>)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d121      	bne.n	8002674 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002630:	4b49      	ldr	r3, [pc, #292]	@ (8002758 <xTaskIncrementTick+0x150>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800263a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800263e:	f383 8811 	msr	BASEPRI, r3
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	f3bf 8f4f 	dsb	sy
 800264a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	e7fd      	b.n	800264e <xTaskIncrementTick+0x46>
 8002652:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <xTaskIncrementTick+0x150>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	4b40      	ldr	r3, [pc, #256]	@ (800275c <xTaskIncrementTick+0x154>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3e      	ldr	r2, [pc, #248]	@ (8002758 <xTaskIncrementTick+0x150>)
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4a3e      	ldr	r2, [pc, #248]	@ (800275c <xTaskIncrementTick+0x154>)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b3e      	ldr	r3, [pc, #248]	@ (8002760 <xTaskIncrementTick+0x158>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	4a3c      	ldr	r2, [pc, #240]	@ (8002760 <xTaskIncrementTick+0x158>)
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	f000 f8e0 	bl	8002834 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002674:	4b3b      	ldr	r3, [pc, #236]	@ (8002764 <xTaskIncrementTick+0x15c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	429a      	cmp	r2, r3
 800267c:	d348      	bcc.n	8002710 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800267e:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <xTaskIncrementTick+0x150>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d104      	bne.n	8002692 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002688:	4b36      	ldr	r3, [pc, #216]	@ (8002764 <xTaskIncrementTick+0x15c>)
 800268a:	f04f 32ff 	mov.w	r2, #4294967295
 800268e:	601a      	str	r2, [r3, #0]
					break;
 8002690:	e03e      	b.n	8002710 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002692:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <xTaskIncrementTick+0x150>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d203      	bcs.n	80026b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80026aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002764 <xTaskIncrementTick+0x15c>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026b0:	e02e      	b.n	8002710 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3304      	adds	r3, #4
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff7d 	bl	80025b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3318      	adds	r3, #24
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff74 	bl	80025b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	2201      	movs	r2, #1
 80026d4:	409a      	lsls	r2, r3
 80026d6:	4b24      	ldr	r3, [pc, #144]	@ (8002768 <xTaskIncrementTick+0x160>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	4a22      	ldr	r2, [pc, #136]	@ (8002768 <xTaskIncrementTick+0x160>)
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4a1f      	ldr	r2, [pc, #124]	@ (800276c <xTaskIncrementTick+0x164>)
 80026ee:	441a      	add	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f7ff ff3a 	bl	8002570 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <xTaskIncrementTick+0x168>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	429a      	cmp	r2, r3
 8002708:	d3b9      	bcc.n	800267e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800270a:	2301      	movs	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800270e:	e7b6      	b.n	800267e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002710:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <xTaskIncrementTick+0x168>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002716:	4915      	ldr	r1, [pc, #84]	@ (800276c <xTaskIncrementTick+0x164>)
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d901      	bls.n	800272c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002728:	2301      	movs	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800272c:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <xTaskIncrementTick+0x16c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d007      	beq.n	8002744 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e004      	b.n	8002744 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800273a:	4b0f      	ldr	r3, [pc, #60]	@ (8002778 <xTaskIncrementTick+0x170>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	4a0d      	ldr	r2, [pc, #52]	@ (8002778 <xTaskIncrementTick+0x170>)
 8002742:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002744:	697b      	ldr	r3, [r7, #20]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200003b0 	.word	0x200003b0
 8002754:	20000394 	.word	0x20000394
 8002758:	2000038c 	.word	0x2000038c
 800275c:	20000390 	.word	0x20000390
 8002760:	200003a8 	.word	0x200003a8
 8002764:	200003ac 	.word	0x200003ac
 8002768:	20000398 	.word	0x20000398
 800276c:	20000300 	.word	0x20000300
 8002770:	200002fc 	.word	0x200002fc
 8002774:	200003a4 	.word	0x200003a4
 8002778:	200003a0 	.word	0x200003a0

0800277c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002782:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <vTaskSwitchContext+0xa4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800278a:	4b26      	ldr	r3, [pc, #152]	@ (8002824 <vTaskSwitchContext+0xa8>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002790:	e040      	b.n	8002814 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002792:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <vTaskSwitchContext+0xa8>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002798:	4b23      	ldr	r3, [pc, #140]	@ (8002828 <vTaskSwitchContext+0xac>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80027a6:	7afb      	ldrb	r3, [r7, #11]
 80027a8:	f1c3 031f 	rsb	r3, r3, #31
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	491f      	ldr	r1, [pc, #124]	@ (800282c <vTaskSwitchContext+0xb0>)
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <vTaskSwitchContext+0x5e>
	__asm volatile
 80027c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	607b      	str	r3, [r7, #4]
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	e7fd      	b.n	80027d6 <vTaskSwitchContext+0x5a>
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4a11      	ldr	r2, [pc, #68]	@ (800282c <vTaskSwitchContext+0xb0>)
 80027e6:	4413      	add	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	3308      	adds	r3, #8
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d104      	bne.n	800280a <vTaskSwitchContext+0x8e>
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a07      	ldr	r2, [pc, #28]	@ (8002830 <vTaskSwitchContext+0xb4>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	200003b0 	.word	0x200003b0
 8002824:	200003a4 	.word	0x200003a4
 8002828:	20000398 	.word	0x20000398
 800282c:	20000300 	.word	0x20000300
 8002830:	200002fc 	.word	0x200002fc

08002834 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800283a:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <prvResetNextTaskUnblockTime+0x38>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002844:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <prvResetNextTaskUnblockTime+0x3c>)
 8002846:	f04f 32ff 	mov.w	r2, #4294967295
 800284a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800284c:	e008      	b.n	8002860 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <prvResetNextTaskUnblockTime+0x38>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <prvResetNextTaskUnblockTime+0x3c>)
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000038c 	.word	0x2000038c
 8002870:	200003ac 	.word	0x200003ac

08002874 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800287a:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <xTaskGetSchedulerState+0x34>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002882:	2301      	movs	r3, #1
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	e008      	b.n	800289a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002888:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <xTaskGetSchedulerState+0x38>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002890:	2302      	movs	r3, #2
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	e001      	b.n	800289a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800289a:	687b      	ldr	r3, [r7, #4]
	}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	2000039c 	.word	0x2000039c
 80028ac:	200003b0 	.word	0x200003b0

080028b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80028b0:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <pxCurrentTCBConst2>)
 80028b2:	6819      	ldr	r1, [r3, #0]
 80028b4:	6808      	ldr	r0, [r1, #0]
 80028b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028ba:	f380 8809 	msr	PSP, r0
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f380 8811 	msr	BASEPRI, r0
 80028ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80028ce:	4770      	bx	lr

080028d0 <pxCurrentTCBConst2>:
 80028d0:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
	...

080028e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80028e0:	f3ef 8009 	mrs	r0, PSP
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <pxCurrentTCBConst>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028f0:	6010      	str	r0, [r2, #0]
 80028f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80028f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80028fa:	f380 8811 	msr	BASEPRI, r0
 80028fe:	f7ff ff3d 	bl	800277c <vTaskSwitchContext>
 8002902:	f04f 0000 	mov.w	r0, #0
 8002906:	f380 8811 	msr	BASEPRI, r0
 800290a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	6808      	ldr	r0, [r1, #0]
 8002912:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002916:	f380 8809 	msr	PSP, r0
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	4770      	bx	lr

08002920 <pxCurrentTCBConst>:
 8002920:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop

08002928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
	__asm volatile
 800292e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	607b      	str	r3, [r7, #4]
}
 8002940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002942:	f7ff fe61 	bl	8002608 <xTaskIncrementTick>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800294c:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <xPortSysTickHandler+0x40>)
 800294e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	2300      	movs	r3, #0
 8002956:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800295e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	e000ed04 	.word	0xe000ed04

0800296c <atof>:
 800296c:	2100      	movs	r1, #0
 800296e:	f000 bdfb 	b.w	8003568 <strtod>

08002972 <sulp>:
 8002972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002976:	460f      	mov	r7, r1
 8002978:	4690      	mov	r8, r2
 800297a:	f001 ff77 	bl	800486c <__ulp>
 800297e:	4604      	mov	r4, r0
 8002980:	460d      	mov	r5, r1
 8002982:	f1b8 0f00 	cmp.w	r8, #0
 8002986:	d011      	beq.n	80029ac <sulp+0x3a>
 8002988:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800298c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8002990:	2b00      	cmp	r3, #0
 8002992:	dd0b      	ble.n	80029ac <sulp+0x3a>
 8002994:	2400      	movs	r4, #0
 8002996:	051b      	lsls	r3, r3, #20
 8002998:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800299c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80029a0:	4622      	mov	r2, r4
 80029a2:	462b      	mov	r3, r5
 80029a4:	f7fd fd90 	bl	80004c8 <__aeabi_dmul>
 80029a8:	4604      	mov	r4, r0
 80029aa:	460d      	mov	r5, r1
 80029ac:	4620      	mov	r0, r4
 80029ae:	4629      	mov	r1, r5
 80029b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029b4:	0000      	movs	r0, r0
	...

080029b8 <_strtod_l>:
 80029b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029bc:	b09f      	sub	sp, #124	@ 0x7c
 80029be:	9217      	str	r2, [sp, #92]	@ 0x5c
 80029c0:	2200      	movs	r2, #0
 80029c2:	460c      	mov	r4, r1
 80029c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80029c6:	f04f 0a00 	mov.w	sl, #0
 80029ca:	f04f 0b00 	mov.w	fp, #0
 80029ce:	460a      	mov	r2, r1
 80029d0:	9005      	str	r0, [sp, #20]
 80029d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80029d4:	7811      	ldrb	r1, [r2, #0]
 80029d6:	292b      	cmp	r1, #43	@ 0x2b
 80029d8:	d048      	beq.n	8002a6c <_strtod_l+0xb4>
 80029da:	d836      	bhi.n	8002a4a <_strtod_l+0x92>
 80029dc:	290d      	cmp	r1, #13
 80029de:	d830      	bhi.n	8002a42 <_strtod_l+0x8a>
 80029e0:	2908      	cmp	r1, #8
 80029e2:	d830      	bhi.n	8002a46 <_strtod_l+0x8e>
 80029e4:	2900      	cmp	r1, #0
 80029e6:	d039      	beq.n	8002a5c <_strtod_l+0xa4>
 80029e8:	2200      	movs	r2, #0
 80029ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80029ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80029ee:	782a      	ldrb	r2, [r5, #0]
 80029f0:	2a30      	cmp	r2, #48	@ 0x30
 80029f2:	f040 80b0 	bne.w	8002b56 <_strtod_l+0x19e>
 80029f6:	786a      	ldrb	r2, [r5, #1]
 80029f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80029fc:	2a58      	cmp	r2, #88	@ 0x58
 80029fe:	d16c      	bne.n	8002ada <_strtod_l+0x122>
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002a04:	4a8f      	ldr	r2, [pc, #572]	@ (8002c44 <_strtod_l+0x28c>)
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	ab1a      	add	r3, sp, #104	@ 0x68
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	9805      	ldr	r0, [sp, #20]
 8002a0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8002a10:	a919      	add	r1, sp, #100	@ 0x64
 8002a12:	f001 f82d 	bl	8003a70 <__gethex>
 8002a16:	f010 060f 	ands.w	r6, r0, #15
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	d005      	beq.n	8002a2a <_strtod_l+0x72>
 8002a1e:	2e06      	cmp	r6, #6
 8002a20:	d126      	bne.n	8002a70 <_strtod_l+0xb8>
 8002a22:	2300      	movs	r3, #0
 8002a24:	3501      	adds	r5, #1
 8002a26:	9519      	str	r5, [sp, #100]	@ 0x64
 8002a28:	930e      	str	r3, [sp, #56]	@ 0x38
 8002a2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 8582 	bne.w	8003536 <_strtod_l+0xb7e>
 8002a32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002a34:	b1bb      	cbz	r3, 8002a66 <_strtod_l+0xae>
 8002a36:	4650      	mov	r0, sl
 8002a38:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8002a3c:	b01f      	add	sp, #124	@ 0x7c
 8002a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a42:	2920      	cmp	r1, #32
 8002a44:	d1d0      	bne.n	80029e8 <_strtod_l+0x30>
 8002a46:	3201      	adds	r2, #1
 8002a48:	e7c3      	b.n	80029d2 <_strtod_l+0x1a>
 8002a4a:	292d      	cmp	r1, #45	@ 0x2d
 8002a4c:	d1cc      	bne.n	80029e8 <_strtod_l+0x30>
 8002a4e:	2101      	movs	r1, #1
 8002a50:	910e      	str	r1, [sp, #56]	@ 0x38
 8002a52:	1c51      	adds	r1, r2, #1
 8002a54:	9119      	str	r1, [sp, #100]	@ 0x64
 8002a56:	7852      	ldrb	r2, [r2, #1]
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	d1c7      	bne.n	80029ec <_strtod_l+0x34>
 8002a5c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8002a5e:	9419      	str	r4, [sp, #100]	@ 0x64
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 8566 	bne.w	8003532 <_strtod_l+0xb7a>
 8002a66:	4650      	mov	r0, sl
 8002a68:	4659      	mov	r1, fp
 8002a6a:	e7e7      	b.n	8002a3c <_strtod_l+0x84>
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	e7ef      	b.n	8002a50 <_strtod_l+0x98>
 8002a70:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8002a72:	b13a      	cbz	r2, 8002a84 <_strtod_l+0xcc>
 8002a74:	2135      	movs	r1, #53	@ 0x35
 8002a76:	a81c      	add	r0, sp, #112	@ 0x70
 8002a78:	f001 ffe8 	bl	8004a4c <__copybits>
 8002a7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002a7e:	9805      	ldr	r0, [sp, #20]
 8002a80:	f001 fbc8 	bl	8004214 <_Bfree>
 8002a84:	3e01      	subs	r6, #1
 8002a86:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8002a88:	2e04      	cmp	r6, #4
 8002a8a:	d806      	bhi.n	8002a9a <_strtod_l+0xe2>
 8002a8c:	e8df f006 	tbb	[pc, r6]
 8002a90:	201d0314 	.word	0x201d0314
 8002a94:	14          	.byte	0x14
 8002a95:	00          	.byte	0x00
 8002a96:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8002a9a:	05e1      	lsls	r1, r4, #23
 8002a9c:	bf48      	it	mi
 8002a9e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8002aa2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8002aa6:	0d1b      	lsrs	r3, r3, #20
 8002aa8:	051b      	lsls	r3, r3, #20
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1bd      	bne.n	8002a2a <_strtod_l+0x72>
 8002aae:	f000 feed 	bl	800388c <__errno>
 8002ab2:	2322      	movs	r3, #34	@ 0x22
 8002ab4:	6003      	str	r3, [r0, #0]
 8002ab6:	e7b8      	b.n	8002a2a <_strtod_l+0x72>
 8002ab8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8002abc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8002ac0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002ac4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8002ac8:	e7e7      	b.n	8002a9a <_strtod_l+0xe2>
 8002aca:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8002c48 <_strtod_l+0x290>
 8002ace:	e7e4      	b.n	8002a9a <_strtod_l+0xe2>
 8002ad0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8002ad4:	f04f 3aff 	mov.w	sl, #4294967295
 8002ad8:	e7df      	b.n	8002a9a <_strtod_l+0xe2>
 8002ada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	9219      	str	r2, [sp, #100]	@ 0x64
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	2b30      	cmp	r3, #48	@ 0x30
 8002ae4:	d0f9      	beq.n	8002ada <_strtod_l+0x122>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d09f      	beq.n	8002a2a <_strtod_l+0x72>
 8002aea:	2301      	movs	r3, #1
 8002aec:	2700      	movs	r7, #0
 8002aee:	220a      	movs	r2, #10
 8002af0:	46b9      	mov	r9, r7
 8002af2:	9308      	str	r3, [sp, #32]
 8002af4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002af6:	970b      	str	r7, [sp, #44]	@ 0x2c
 8002af8:	930c      	str	r3, [sp, #48]	@ 0x30
 8002afa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8002afc:	7805      	ldrb	r5, [r0, #0]
 8002afe:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8002b02:	b2d9      	uxtb	r1, r3
 8002b04:	2909      	cmp	r1, #9
 8002b06:	d928      	bls.n	8002b5a <_strtod_l+0x1a2>
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4950      	ldr	r1, [pc, #320]	@ (8002c4c <_strtod_l+0x294>)
 8002b0c:	f000 fe52 	bl	80037b4 <strncmp>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d032      	beq.n	8002b7a <_strtod_l+0x1c2>
 8002b14:	2000      	movs	r0, #0
 8002b16:	462a      	mov	r2, r5
 8002b18:	4603      	mov	r3, r0
 8002b1a:	464d      	mov	r5, r9
 8002b1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8002b1e:	2a65      	cmp	r2, #101	@ 0x65
 8002b20:	d001      	beq.n	8002b26 <_strtod_l+0x16e>
 8002b22:	2a45      	cmp	r2, #69	@ 0x45
 8002b24:	d114      	bne.n	8002b50 <_strtod_l+0x198>
 8002b26:	b91d      	cbnz	r5, 8002b30 <_strtod_l+0x178>
 8002b28:	9a08      	ldr	r2, [sp, #32]
 8002b2a:	4302      	orrs	r2, r0
 8002b2c:	d096      	beq.n	8002a5c <_strtod_l+0xa4>
 8002b2e:	2500      	movs	r5, #0
 8002b30:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8002b32:	1c62      	adds	r2, r4, #1
 8002b34:	9219      	str	r2, [sp, #100]	@ 0x64
 8002b36:	7862      	ldrb	r2, [r4, #1]
 8002b38:	2a2b      	cmp	r2, #43	@ 0x2b
 8002b3a:	d07a      	beq.n	8002c32 <_strtod_l+0x27a>
 8002b3c:	2a2d      	cmp	r2, #45	@ 0x2d
 8002b3e:	d07e      	beq.n	8002c3e <_strtod_l+0x286>
 8002b40:	f04f 0c00 	mov.w	ip, #0
 8002b44:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8002b48:	2909      	cmp	r1, #9
 8002b4a:	f240 8085 	bls.w	8002c58 <_strtod_l+0x2a0>
 8002b4e:	9419      	str	r4, [sp, #100]	@ 0x64
 8002b50:	f04f 0800 	mov.w	r8, #0
 8002b54:	e0a5      	b.n	8002ca2 <_strtod_l+0x2ea>
 8002b56:	2300      	movs	r3, #0
 8002b58:	e7c8      	b.n	8002aec <_strtod_l+0x134>
 8002b5a:	f1b9 0f08 	cmp.w	r9, #8
 8002b5e:	bfd8      	it	le
 8002b60:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8002b62:	f100 0001 	add.w	r0, r0, #1
 8002b66:	bfd6      	itet	le
 8002b68:	fb02 3301 	mlale	r3, r2, r1, r3
 8002b6c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8002b70:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8002b72:	f109 0901 	add.w	r9, r9, #1
 8002b76:	9019      	str	r0, [sp, #100]	@ 0x64
 8002b78:	e7bf      	b.n	8002afa <_strtod_l+0x142>
 8002b7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8002b80:	785a      	ldrb	r2, [r3, #1]
 8002b82:	f1b9 0f00 	cmp.w	r9, #0
 8002b86:	d03b      	beq.n	8002c00 <_strtod_l+0x248>
 8002b88:	464d      	mov	r5, r9
 8002b8a:	900a      	str	r0, [sp, #40]	@ 0x28
 8002b8c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	d912      	bls.n	8002bba <_strtod_l+0x202>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e7c2      	b.n	8002b1e <_strtod_l+0x166>
 8002b98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8002ba0:	785a      	ldrb	r2, [r3, #1]
 8002ba2:	2a30      	cmp	r2, #48	@ 0x30
 8002ba4:	d0f8      	beq.n	8002b98 <_strtod_l+0x1e0>
 8002ba6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	f200 84c8 	bhi.w	8003540 <_strtod_l+0xb88>
 8002bb0:	900a      	str	r0, [sp, #40]	@ 0x28
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	4605      	mov	r5, r0
 8002bb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002bb8:	930c      	str	r3, [sp, #48]	@ 0x30
 8002bba:	3a30      	subs	r2, #48	@ 0x30
 8002bbc:	f100 0301 	add.w	r3, r0, #1
 8002bc0:	d018      	beq.n	8002bf4 <_strtod_l+0x23c>
 8002bc2:	462e      	mov	r6, r5
 8002bc4:	f04f 0e0a 	mov.w	lr, #10
 8002bc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002bca:	4419      	add	r1, r3
 8002bcc:	910a      	str	r1, [sp, #40]	@ 0x28
 8002bce:	1c71      	adds	r1, r6, #1
 8002bd0:	eba1 0c05 	sub.w	ip, r1, r5
 8002bd4:	4563      	cmp	r3, ip
 8002bd6:	dc15      	bgt.n	8002c04 <_strtod_l+0x24c>
 8002bd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8002bdc:	182b      	adds	r3, r5, r0
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	f105 0501 	add.w	r5, r5, #1
 8002be4:	4405      	add	r5, r0
 8002be6:	dc1a      	bgt.n	8002c1e <_strtod_l+0x266>
 8002be8:	230a      	movs	r3, #10
 8002bea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002bec:	fb03 2301 	mla	r3, r3, r1, r2
 8002bf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	1c51      	adds	r1, r2, #1
 8002bfa:	9119      	str	r1, [sp, #100]	@ 0x64
 8002bfc:	7852      	ldrb	r2, [r2, #1]
 8002bfe:	e7c5      	b.n	8002b8c <_strtod_l+0x1d4>
 8002c00:	4648      	mov	r0, r9
 8002c02:	e7ce      	b.n	8002ba2 <_strtod_l+0x1ea>
 8002c04:	2e08      	cmp	r6, #8
 8002c06:	dc05      	bgt.n	8002c14 <_strtod_l+0x25c>
 8002c08:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8002c0a:	fb0e f606 	mul.w	r6, lr, r6
 8002c0e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8002c10:	460e      	mov	r6, r1
 8002c12:	e7dc      	b.n	8002bce <_strtod_l+0x216>
 8002c14:	2910      	cmp	r1, #16
 8002c16:	bfd8      	it	le
 8002c18:	fb0e f707 	mulle.w	r7, lr, r7
 8002c1c:	e7f8      	b.n	8002c10 <_strtod_l+0x258>
 8002c1e:	2b0f      	cmp	r3, #15
 8002c20:	bfdc      	itt	le
 8002c22:	230a      	movle	r3, #10
 8002c24:	fb03 2707 	mlale	r7, r3, r7, r2
 8002c28:	e7e3      	b.n	8002bf2 <_strtod_l+0x23a>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e77a      	b.n	8002b28 <_strtod_l+0x170>
 8002c32:	f04f 0c00 	mov.w	ip, #0
 8002c36:	1ca2      	adds	r2, r4, #2
 8002c38:	9219      	str	r2, [sp, #100]	@ 0x64
 8002c3a:	78a2      	ldrb	r2, [r4, #2]
 8002c3c:	e782      	b.n	8002b44 <_strtod_l+0x18c>
 8002c3e:	f04f 0c01 	mov.w	ip, #1
 8002c42:	e7f8      	b.n	8002c36 <_strtod_l+0x27e>
 8002c44:	0800570c 	.word	0x0800570c
 8002c48:	7ff00000 	.word	0x7ff00000
 8002c4c:	08005590 	.word	0x08005590
 8002c50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002c52:	1c51      	adds	r1, r2, #1
 8002c54:	9119      	str	r1, [sp, #100]	@ 0x64
 8002c56:	7852      	ldrb	r2, [r2, #1]
 8002c58:	2a30      	cmp	r2, #48	@ 0x30
 8002c5a:	d0f9      	beq.n	8002c50 <_strtod_l+0x298>
 8002c5c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8002c60:	2908      	cmp	r1, #8
 8002c62:	f63f af75 	bhi.w	8002b50 <_strtod_l+0x198>
 8002c66:	f04f 080a 	mov.w	r8, #10
 8002c6a:	3a30      	subs	r2, #48	@ 0x30
 8002c6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002c6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002c70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8002c72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002c74:	1c56      	adds	r6, r2, #1
 8002c76:	9619      	str	r6, [sp, #100]	@ 0x64
 8002c78:	7852      	ldrb	r2, [r2, #1]
 8002c7a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8002c7e:	f1be 0f09 	cmp.w	lr, #9
 8002c82:	d939      	bls.n	8002cf8 <_strtod_l+0x340>
 8002c84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002c86:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8002c8a:	1a76      	subs	r6, r6, r1
 8002c8c:	2e08      	cmp	r6, #8
 8002c8e:	dc03      	bgt.n	8002c98 <_strtod_l+0x2e0>
 8002c90:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002c92:	4588      	cmp	r8, r1
 8002c94:	bfa8      	it	ge
 8002c96:	4688      	movge	r8, r1
 8002c98:	f1bc 0f00 	cmp.w	ip, #0
 8002c9c:	d001      	beq.n	8002ca2 <_strtod_l+0x2ea>
 8002c9e:	f1c8 0800 	rsb	r8, r8, #0
 8002ca2:	2d00      	cmp	r5, #0
 8002ca4:	d14e      	bne.n	8002d44 <_strtod_l+0x38c>
 8002ca6:	9908      	ldr	r1, [sp, #32]
 8002ca8:	4308      	orrs	r0, r1
 8002caa:	f47f aebe 	bne.w	8002a2a <_strtod_l+0x72>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f47f aed4 	bne.w	8002a5c <_strtod_l+0xa4>
 8002cb4:	2a69      	cmp	r2, #105	@ 0x69
 8002cb6:	d028      	beq.n	8002d0a <_strtod_l+0x352>
 8002cb8:	dc25      	bgt.n	8002d06 <_strtod_l+0x34e>
 8002cba:	2a49      	cmp	r2, #73	@ 0x49
 8002cbc:	d025      	beq.n	8002d0a <_strtod_l+0x352>
 8002cbe:	2a4e      	cmp	r2, #78	@ 0x4e
 8002cc0:	f47f aecc 	bne.w	8002a5c <_strtod_l+0xa4>
 8002cc4:	4999      	ldr	r1, [pc, #612]	@ (8002f2c <_strtod_l+0x574>)
 8002cc6:	a819      	add	r0, sp, #100	@ 0x64
 8002cc8:	f001 f8f4 	bl	8003eb4 <__match>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	f43f aec5 	beq.w	8002a5c <_strtod_l+0xa4>
 8002cd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b28      	cmp	r3, #40	@ 0x28
 8002cd8:	d12e      	bne.n	8002d38 <_strtod_l+0x380>
 8002cda:	4995      	ldr	r1, [pc, #596]	@ (8002f30 <_strtod_l+0x578>)
 8002cdc:	aa1c      	add	r2, sp, #112	@ 0x70
 8002cde:	a819      	add	r0, sp, #100	@ 0x64
 8002ce0:	f001 f8fc 	bl	8003edc <__hexnan>
 8002ce4:	2805      	cmp	r0, #5
 8002ce6:	d127      	bne.n	8002d38 <_strtod_l+0x380>
 8002ce8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8002cea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8002cee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8002cf2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8002cf6:	e698      	b.n	8002a2a <_strtod_l+0x72>
 8002cf8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002cfa:	fb08 2101 	mla	r1, r8, r1, r2
 8002cfe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8002d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d04:	e7b5      	b.n	8002c72 <_strtod_l+0x2ba>
 8002d06:	2a6e      	cmp	r2, #110	@ 0x6e
 8002d08:	e7da      	b.n	8002cc0 <_strtod_l+0x308>
 8002d0a:	498a      	ldr	r1, [pc, #552]	@ (8002f34 <_strtod_l+0x57c>)
 8002d0c:	a819      	add	r0, sp, #100	@ 0x64
 8002d0e:	f001 f8d1 	bl	8003eb4 <__match>
 8002d12:	2800      	cmp	r0, #0
 8002d14:	f43f aea2 	beq.w	8002a5c <_strtod_l+0xa4>
 8002d18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002d1a:	4987      	ldr	r1, [pc, #540]	@ (8002f38 <_strtod_l+0x580>)
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	a819      	add	r0, sp, #100	@ 0x64
 8002d20:	9319      	str	r3, [sp, #100]	@ 0x64
 8002d22:	f001 f8c7 	bl	8003eb4 <__match>
 8002d26:	b910      	cbnz	r0, 8002d2e <_strtod_l+0x376>
 8002d28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8002d2e:	f04f 0a00 	mov.w	sl, #0
 8002d32:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8002f3c <_strtod_l+0x584>
 8002d36:	e678      	b.n	8002a2a <_strtod_l+0x72>
 8002d38:	4881      	ldr	r0, [pc, #516]	@ (8002f40 <_strtod_l+0x588>)
 8002d3a:	f000 fde3 	bl	8003904 <nan>
 8002d3e:	4682      	mov	sl, r0
 8002d40:	468b      	mov	fp, r1
 8002d42:	e672      	b.n	8002a2a <_strtod_l+0x72>
 8002d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d46:	f1b9 0f00 	cmp.w	r9, #0
 8002d4a:	bf08      	it	eq
 8002d4c:	46a9      	moveq	r9, r5
 8002d4e:	eba8 0303 	sub.w	r3, r8, r3
 8002d52:	2d10      	cmp	r5, #16
 8002d54:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002d56:	462c      	mov	r4, r5
 8002d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d5a:	bfa8      	it	ge
 8002d5c:	2410      	movge	r4, #16
 8002d5e:	f7fd fb39 	bl	80003d4 <__aeabi_ui2d>
 8002d62:	2d09      	cmp	r5, #9
 8002d64:	4682      	mov	sl, r0
 8002d66:	468b      	mov	fp, r1
 8002d68:	dc11      	bgt.n	8002d8e <_strtod_l+0x3d6>
 8002d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f43f ae5c 	beq.w	8002a2a <_strtod_l+0x72>
 8002d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d74:	dd76      	ble.n	8002e64 <_strtod_l+0x4ac>
 8002d76:	2b16      	cmp	r3, #22
 8002d78:	dc5d      	bgt.n	8002e36 <_strtod_l+0x47e>
 8002d7a:	4972      	ldr	r1, [pc, #456]	@ (8002f44 <_strtod_l+0x58c>)
 8002d7c:	4652      	mov	r2, sl
 8002d7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002d82:	465b      	mov	r3, fp
 8002d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d88:	f7fd fb9e 	bl	80004c8 <__aeabi_dmul>
 8002d8c:	e7d7      	b.n	8002d3e <_strtod_l+0x386>
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f44 <_strtod_l+0x58c>)
 8002d90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002d94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8002d98:	f7fd fb96 	bl	80004c8 <__aeabi_dmul>
 8002d9c:	4682      	mov	sl, r0
 8002d9e:	4638      	mov	r0, r7
 8002da0:	468b      	mov	fp, r1
 8002da2:	f7fd fb17 	bl	80003d4 <__aeabi_ui2d>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4650      	mov	r0, sl
 8002dac:	4659      	mov	r1, fp
 8002dae:	f7fd f9d5 	bl	800015c <__adddf3>
 8002db2:	2d0f      	cmp	r5, #15
 8002db4:	4682      	mov	sl, r0
 8002db6:	468b      	mov	fp, r1
 8002db8:	ddd7      	ble.n	8002d6a <_strtod_l+0x3b2>
 8002dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dbc:	1b2c      	subs	r4, r5, r4
 8002dbe:	441c      	add	r4, r3
 8002dc0:	2c00      	cmp	r4, #0
 8002dc2:	f340 8093 	ble.w	8002eec <_strtod_l+0x534>
 8002dc6:	f014 030f 	ands.w	r3, r4, #15
 8002dca:	d00a      	beq.n	8002de2 <_strtod_l+0x42a>
 8002dcc:	495d      	ldr	r1, [pc, #372]	@ (8002f44 <_strtod_l+0x58c>)
 8002dce:	4652      	mov	r2, sl
 8002dd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dd8:	465b      	mov	r3, fp
 8002dda:	f7fd fb75 	bl	80004c8 <__aeabi_dmul>
 8002dde:	4682      	mov	sl, r0
 8002de0:	468b      	mov	fp, r1
 8002de2:	f034 040f 	bics.w	r4, r4, #15
 8002de6:	d073      	beq.n	8002ed0 <_strtod_l+0x518>
 8002de8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8002dec:	dd49      	ble.n	8002e82 <_strtod_l+0x4ca>
 8002dee:	2400      	movs	r4, #0
 8002df0:	46a0      	mov	r8, r4
 8002df2:	46a1      	mov	r9, r4
 8002df4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002df6:	2322      	movs	r3, #34	@ 0x22
 8002df8:	f04f 0a00 	mov.w	sl, #0
 8002dfc:	9a05      	ldr	r2, [sp, #20]
 8002dfe:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8002f3c <_strtod_l+0x584>
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f43f ae0f 	beq.w	8002a2a <_strtod_l+0x72>
 8002e0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002e0e:	9805      	ldr	r0, [sp, #20]
 8002e10:	f001 fa00 	bl	8004214 <_Bfree>
 8002e14:	4649      	mov	r1, r9
 8002e16:	9805      	ldr	r0, [sp, #20]
 8002e18:	f001 f9fc 	bl	8004214 <_Bfree>
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	9805      	ldr	r0, [sp, #20]
 8002e20:	f001 f9f8 	bl	8004214 <_Bfree>
 8002e24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002e26:	9805      	ldr	r0, [sp, #20]
 8002e28:	f001 f9f4 	bl	8004214 <_Bfree>
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	9805      	ldr	r0, [sp, #20]
 8002e30:	f001 f9f0 	bl	8004214 <_Bfree>
 8002e34:	e5f9      	b.n	8002a2a <_strtod_l+0x72>
 8002e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	dbbc      	blt.n	8002dba <_strtod_l+0x402>
 8002e40:	4c40      	ldr	r4, [pc, #256]	@ (8002f44 <_strtod_l+0x58c>)
 8002e42:	f1c5 050f 	rsb	r5, r5, #15
 8002e46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8002e4a:	4652      	mov	r2, sl
 8002e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e50:	465b      	mov	r3, fp
 8002e52:	f7fd fb39 	bl	80004c8 <__aeabi_dmul>
 8002e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e58:	1b5d      	subs	r5, r3, r5
 8002e5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8002e5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002e62:	e791      	b.n	8002d88 <_strtod_l+0x3d0>
 8002e64:	3316      	adds	r3, #22
 8002e66:	dba8      	blt.n	8002dba <_strtod_l+0x402>
 8002e68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002e6a:	4650      	mov	r0, sl
 8002e6c:	eba3 0808 	sub.w	r8, r3, r8
 8002e70:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <_strtod_l+0x58c>)
 8002e72:	4659      	mov	r1, fp
 8002e74:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8002e78:	e9d8 2300 	ldrd	r2, r3, [r8]
 8002e7c:	f7fd fc4e 	bl	800071c <__aeabi_ddiv>
 8002e80:	e75d      	b.n	8002d3e <_strtod_l+0x386>
 8002e82:	2300      	movs	r3, #0
 8002e84:	4650      	mov	r0, sl
 8002e86:	4659      	mov	r1, fp
 8002e88:	461e      	mov	r6, r3
 8002e8a:	4f2f      	ldr	r7, [pc, #188]	@ (8002f48 <_strtod_l+0x590>)
 8002e8c:	1124      	asrs	r4, r4, #4
 8002e8e:	2c01      	cmp	r4, #1
 8002e90:	dc21      	bgt.n	8002ed6 <_strtod_l+0x51e>
 8002e92:	b10b      	cbz	r3, 8002e98 <_strtod_l+0x4e0>
 8002e94:	4682      	mov	sl, r0
 8002e96:	468b      	mov	fp, r1
 8002e98:	492b      	ldr	r1, [pc, #172]	@ (8002f48 <_strtod_l+0x590>)
 8002e9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8002e9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8002ea2:	4652      	mov	r2, sl
 8002ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ea8:	465b      	mov	r3, fp
 8002eaa:	f7fd fb0d 	bl	80004c8 <__aeabi_dmul>
 8002eae:	4b23      	ldr	r3, [pc, #140]	@ (8002f3c <_strtod_l+0x584>)
 8002eb0:	460a      	mov	r2, r1
 8002eb2:	400b      	ands	r3, r1
 8002eb4:	4925      	ldr	r1, [pc, #148]	@ (8002f4c <_strtod_l+0x594>)
 8002eb6:	4682      	mov	sl, r0
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d898      	bhi.n	8002dee <_strtod_l+0x436>
 8002ebc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8002ec0:	428b      	cmp	r3, r1
 8002ec2:	bf86      	itte	hi
 8002ec4:	f04f 3aff 	movhi.w	sl, #4294967295
 8002ec8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8002f50 <_strtod_l+0x598>
 8002ecc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	9308      	str	r3, [sp, #32]
 8002ed4:	e076      	b.n	8002fc4 <_strtod_l+0x60c>
 8002ed6:	07e2      	lsls	r2, r4, #31
 8002ed8:	d504      	bpl.n	8002ee4 <_strtod_l+0x52c>
 8002eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ede:	f7fd faf3 	bl	80004c8 <__aeabi_dmul>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	3601      	adds	r6, #1
 8002ee6:	1064      	asrs	r4, r4, #1
 8002ee8:	3708      	adds	r7, #8
 8002eea:	e7d0      	b.n	8002e8e <_strtod_l+0x4d6>
 8002eec:	d0f0      	beq.n	8002ed0 <_strtod_l+0x518>
 8002eee:	4264      	negs	r4, r4
 8002ef0:	f014 020f 	ands.w	r2, r4, #15
 8002ef4:	d00a      	beq.n	8002f0c <_strtod_l+0x554>
 8002ef6:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <_strtod_l+0x58c>)
 8002ef8:	4650      	mov	r0, sl
 8002efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002efe:	4659      	mov	r1, fp
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fc0a 	bl	800071c <__aeabi_ddiv>
 8002f08:	4682      	mov	sl, r0
 8002f0a:	468b      	mov	fp, r1
 8002f0c:	1124      	asrs	r4, r4, #4
 8002f0e:	d0df      	beq.n	8002ed0 <_strtod_l+0x518>
 8002f10:	2c1f      	cmp	r4, #31
 8002f12:	dd1f      	ble.n	8002f54 <_strtod_l+0x59c>
 8002f14:	2400      	movs	r4, #0
 8002f16:	46a0      	mov	r8, r4
 8002f18:	46a1      	mov	r9, r4
 8002f1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002f1c:	2322      	movs	r3, #34	@ 0x22
 8002f1e:	9a05      	ldr	r2, [sp, #20]
 8002f20:	f04f 0a00 	mov.w	sl, #0
 8002f24:	f04f 0b00 	mov.w	fp, #0
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e76b      	b.n	8002e04 <_strtod_l+0x44c>
 8002f2c:	0800559b 	.word	0x0800559b
 8002f30:	080056f8 	.word	0x080056f8
 8002f34:	08005592 	.word	0x08005592
 8002f38:	08005595 	.word	0x08005595
 8002f3c:	7ff00000 	.word	0x7ff00000
 8002f40:	080056c2 	.word	0x080056c2
 8002f44:	08005780 	.word	0x08005780
 8002f48:	08005758 	.word	0x08005758
 8002f4c:	7ca00000 	.word	0x7ca00000
 8002f50:	7fefffff 	.word	0x7fefffff
 8002f54:	f014 0310 	ands.w	r3, r4, #16
 8002f58:	bf18      	it	ne
 8002f5a:	236a      	movne	r3, #106	@ 0x6a
 8002f5c:	4650      	mov	r0, sl
 8002f5e:	9308      	str	r3, [sp, #32]
 8002f60:	4659      	mov	r1, fp
 8002f62:	2300      	movs	r3, #0
 8002f64:	4e77      	ldr	r6, [pc, #476]	@ (8003144 <_strtod_l+0x78c>)
 8002f66:	07e7      	lsls	r7, r4, #31
 8002f68:	d504      	bpl.n	8002f74 <_strtod_l+0x5bc>
 8002f6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002f6e:	f7fd faab 	bl	80004c8 <__aeabi_dmul>
 8002f72:	2301      	movs	r3, #1
 8002f74:	1064      	asrs	r4, r4, #1
 8002f76:	f106 0608 	add.w	r6, r6, #8
 8002f7a:	d1f4      	bne.n	8002f66 <_strtod_l+0x5ae>
 8002f7c:	b10b      	cbz	r3, 8002f82 <_strtod_l+0x5ca>
 8002f7e:	4682      	mov	sl, r0
 8002f80:	468b      	mov	fp, r1
 8002f82:	9b08      	ldr	r3, [sp, #32]
 8002f84:	b1b3      	cbz	r3, 8002fb4 <_strtod_l+0x5fc>
 8002f86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8002f8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	4659      	mov	r1, fp
 8002f92:	dd0f      	ble.n	8002fb4 <_strtod_l+0x5fc>
 8002f94:	2b1f      	cmp	r3, #31
 8002f96:	dd58      	ble.n	800304a <_strtod_l+0x692>
 8002f98:	2b34      	cmp	r3, #52	@ 0x34
 8002f9a:	bfd8      	it	le
 8002f9c:	f04f 33ff 	movle.w	r3, #4294967295
 8002fa0:	f04f 0a00 	mov.w	sl, #0
 8002fa4:	bfcf      	iteee	gt
 8002fa6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8002faa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8002fae:	4093      	lslle	r3, r2
 8002fb0:	ea03 0b01 	andle.w	fp, r3, r1
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	4650      	mov	r0, sl
 8002fba:	4659      	mov	r1, fp
 8002fbc:	f7fd fcec 	bl	8000998 <__aeabi_dcmpeq>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d1a7      	bne.n	8002f14 <_strtod_l+0x55c>
 8002fc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002fc6:	464a      	mov	r2, r9
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8002fcc:	462b      	mov	r3, r5
 8002fce:	9805      	ldr	r0, [sp, #20]
 8002fd0:	f001 f988 	bl	80042e4 <__s2b>
 8002fd4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	f43f af09 	beq.w	8002dee <_strtod_l+0x436>
 8002fdc:	2400      	movs	r4, #0
 8002fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002fe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002fe2:	2a00      	cmp	r2, #0
 8002fe4:	eba3 0308 	sub.w	r3, r3, r8
 8002fe8:	bfa8      	it	ge
 8002fea:	2300      	movge	r3, #0
 8002fec:	46a0      	mov	r8, r4
 8002fee:	9312      	str	r3, [sp, #72]	@ 0x48
 8002ff0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8002ff4:	9316      	str	r3, [sp, #88]	@ 0x58
 8002ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002ff8:	9805      	ldr	r0, [sp, #20]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	f001 f8ca 	bl	8004194 <_Balloc>
 8003000:	4681      	mov	r9, r0
 8003002:	2800      	cmp	r0, #0
 8003004:	f43f aef7 	beq.w	8002df6 <_strtod_l+0x43e>
 8003008:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800300a:	300c      	adds	r0, #12
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	f103 010c 	add.w	r1, r3, #12
 8003012:	3202      	adds	r2, #2
 8003014:	0092      	lsls	r2, r2, #2
 8003016:	f000 fc66 	bl	80038e6 <memcpy>
 800301a:	ab1c      	add	r3, sp, #112	@ 0x70
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	4652      	mov	r2, sl
 8003024:	465b      	mov	r3, fp
 8003026:	9805      	ldr	r0, [sp, #20]
 8003028:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800302c:	f001 fc86 	bl	800493c <__d2b>
 8003030:	901a      	str	r0, [sp, #104]	@ 0x68
 8003032:	2800      	cmp	r0, #0
 8003034:	f43f aedf 	beq.w	8002df6 <_strtod_l+0x43e>
 8003038:	2101      	movs	r1, #1
 800303a:	9805      	ldr	r0, [sp, #20]
 800303c:	f001 f9e8 	bl	8004410 <__i2b>
 8003040:	4680      	mov	r8, r0
 8003042:	b948      	cbnz	r0, 8003058 <_strtod_l+0x6a0>
 8003044:	f04f 0800 	mov.w	r8, #0
 8003048:	e6d5      	b.n	8002df6 <_strtod_l+0x43e>
 800304a:	f04f 32ff 	mov.w	r2, #4294967295
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	ea03 0a0a 	and.w	sl, r3, sl
 8003056:	e7ad      	b.n	8002fb4 <_strtod_l+0x5fc>
 8003058:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800305a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800305c:	2d00      	cmp	r5, #0
 800305e:	bfab      	itete	ge
 8003060:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8003062:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8003064:	18ef      	addge	r7, r5, r3
 8003066:	1b5e      	sublt	r6, r3, r5
 8003068:	9b08      	ldr	r3, [sp, #32]
 800306a:	bfa8      	it	ge
 800306c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800306e:	eba5 0503 	sub.w	r5, r5, r3
 8003072:	4415      	add	r5, r2
 8003074:	4b34      	ldr	r3, [pc, #208]	@ (8003148 <_strtod_l+0x790>)
 8003076:	f105 35ff 	add.w	r5, r5, #4294967295
 800307a:	bfb8      	it	lt
 800307c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800307e:	429d      	cmp	r5, r3
 8003080:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8003084:	da50      	bge.n	8003128 <_strtod_l+0x770>
 8003086:	1b5b      	subs	r3, r3, r5
 8003088:	2b1f      	cmp	r3, #31
 800308a:	f04f 0101 	mov.w	r1, #1
 800308e:	eba2 0203 	sub.w	r2, r2, r3
 8003092:	dc3d      	bgt.n	8003110 <_strtod_l+0x758>
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	9313      	str	r3, [sp, #76]	@ 0x4c
 800309a:	2300      	movs	r3, #0
 800309c:	9310      	str	r3, [sp, #64]	@ 0x40
 800309e:	18bd      	adds	r5, r7, r2
 80030a0:	9b08      	ldr	r3, [sp, #32]
 80030a2:	42af      	cmp	r7, r5
 80030a4:	4416      	add	r6, r2
 80030a6:	441e      	add	r6, r3
 80030a8:	463b      	mov	r3, r7
 80030aa:	bfa8      	it	ge
 80030ac:	462b      	movge	r3, r5
 80030ae:	42b3      	cmp	r3, r6
 80030b0:	bfa8      	it	ge
 80030b2:	4633      	movge	r3, r6
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bfc2      	ittt	gt
 80030b8:	1aed      	subgt	r5, r5, r3
 80030ba:	1af6      	subgt	r6, r6, r3
 80030bc:	1aff      	subgt	r7, r7, r3
 80030be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	dd16      	ble.n	80030f2 <_strtod_l+0x73a>
 80030c4:	4641      	mov	r1, r8
 80030c6:	461a      	mov	r2, r3
 80030c8:	9805      	ldr	r0, [sp, #20]
 80030ca:	f001 fa59 	bl	8004580 <__pow5mult>
 80030ce:	4680      	mov	r8, r0
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d0b7      	beq.n	8003044 <_strtod_l+0x68c>
 80030d4:	4601      	mov	r1, r0
 80030d6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80030d8:	9805      	ldr	r0, [sp, #20]
 80030da:	f001 f9af 	bl	800443c <__multiply>
 80030de:	900a      	str	r0, [sp, #40]	@ 0x28
 80030e0:	2800      	cmp	r0, #0
 80030e2:	f43f ae88 	beq.w	8002df6 <_strtod_l+0x43e>
 80030e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80030e8:	9805      	ldr	r0, [sp, #20]
 80030ea:	f001 f893 	bl	8004214 <_Bfree>
 80030ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80030f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80030f2:	2d00      	cmp	r5, #0
 80030f4:	dc1d      	bgt.n	8003132 <_strtod_l+0x77a>
 80030f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	dd27      	ble.n	800314c <_strtod_l+0x794>
 80030fc:	4649      	mov	r1, r9
 80030fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003100:	9805      	ldr	r0, [sp, #20]
 8003102:	f001 fa3d 	bl	8004580 <__pow5mult>
 8003106:	4681      	mov	r9, r0
 8003108:	bb00      	cbnz	r0, 800314c <_strtod_l+0x794>
 800310a:	f04f 0900 	mov.w	r9, #0
 800310e:	e672      	b.n	8002df6 <_strtod_l+0x43e>
 8003110:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8003114:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8003118:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800311c:	35e2      	adds	r5, #226	@ 0xe2
 800311e:	fa01 f305 	lsl.w	r3, r1, r5
 8003122:	9310      	str	r3, [sp, #64]	@ 0x40
 8003124:	9113      	str	r1, [sp, #76]	@ 0x4c
 8003126:	e7ba      	b.n	800309e <_strtod_l+0x6e6>
 8003128:	2300      	movs	r3, #0
 800312a:	9310      	str	r3, [sp, #64]	@ 0x40
 800312c:	2301      	movs	r3, #1
 800312e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003130:	e7b5      	b.n	800309e <_strtod_l+0x6e6>
 8003132:	462a      	mov	r2, r5
 8003134:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003136:	9805      	ldr	r0, [sp, #20]
 8003138:	f001 fa7c 	bl	8004634 <__lshift>
 800313c:	901a      	str	r0, [sp, #104]	@ 0x68
 800313e:	2800      	cmp	r0, #0
 8003140:	d1d9      	bne.n	80030f6 <_strtod_l+0x73e>
 8003142:	e658      	b.n	8002df6 <_strtod_l+0x43e>
 8003144:	08005720 	.word	0x08005720
 8003148:	fffffc02 	.word	0xfffffc02
 800314c:	2e00      	cmp	r6, #0
 800314e:	dd07      	ble.n	8003160 <_strtod_l+0x7a8>
 8003150:	4649      	mov	r1, r9
 8003152:	4632      	mov	r2, r6
 8003154:	9805      	ldr	r0, [sp, #20]
 8003156:	f001 fa6d 	bl	8004634 <__lshift>
 800315a:	4681      	mov	r9, r0
 800315c:	2800      	cmp	r0, #0
 800315e:	d0d4      	beq.n	800310a <_strtod_l+0x752>
 8003160:	2f00      	cmp	r7, #0
 8003162:	dd08      	ble.n	8003176 <_strtod_l+0x7be>
 8003164:	4641      	mov	r1, r8
 8003166:	463a      	mov	r2, r7
 8003168:	9805      	ldr	r0, [sp, #20]
 800316a:	f001 fa63 	bl	8004634 <__lshift>
 800316e:	4680      	mov	r8, r0
 8003170:	2800      	cmp	r0, #0
 8003172:	f43f ae40 	beq.w	8002df6 <_strtod_l+0x43e>
 8003176:	464a      	mov	r2, r9
 8003178:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800317a:	9805      	ldr	r0, [sp, #20]
 800317c:	f001 fae2 	bl	8004744 <__mdiff>
 8003180:	4604      	mov	r4, r0
 8003182:	2800      	cmp	r0, #0
 8003184:	f43f ae37 	beq.w	8002df6 <_strtod_l+0x43e>
 8003188:	68c3      	ldr	r3, [r0, #12]
 800318a:	4641      	mov	r1, r8
 800318c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800318e:	2300      	movs	r3, #0
 8003190:	60c3      	str	r3, [r0, #12]
 8003192:	f001 fabb 	bl	800470c <__mcmp>
 8003196:	2800      	cmp	r0, #0
 8003198:	da3d      	bge.n	8003216 <_strtod_l+0x85e>
 800319a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800319c:	ea53 030a 	orrs.w	r3, r3, sl
 80031a0:	d163      	bne.n	800326a <_strtod_l+0x8b2>
 80031a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d15f      	bne.n	800326a <_strtod_l+0x8b2>
 80031aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80031ae:	0d1b      	lsrs	r3, r3, #20
 80031b0:	051b      	lsls	r3, r3, #20
 80031b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80031b6:	d958      	bls.n	800326a <_strtod_l+0x8b2>
 80031b8:	6963      	ldr	r3, [r4, #20]
 80031ba:	b913      	cbnz	r3, 80031c2 <_strtod_l+0x80a>
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	dd53      	ble.n	800326a <_strtod_l+0x8b2>
 80031c2:	4621      	mov	r1, r4
 80031c4:	2201      	movs	r2, #1
 80031c6:	9805      	ldr	r0, [sp, #20]
 80031c8:	f001 fa34 	bl	8004634 <__lshift>
 80031cc:	4641      	mov	r1, r8
 80031ce:	4604      	mov	r4, r0
 80031d0:	f001 fa9c 	bl	800470c <__mcmp>
 80031d4:	2800      	cmp	r0, #0
 80031d6:	dd48      	ble.n	800326a <_strtod_l+0x8b2>
 80031d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80031dc:	9a08      	ldr	r2, [sp, #32]
 80031de:	0d1b      	lsrs	r3, r3, #20
 80031e0:	051b      	lsls	r3, r3, #20
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	d062      	beq.n	80032ac <_strtod_l+0x8f4>
 80031e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80031ea:	d85f      	bhi.n	80032ac <_strtod_l+0x8f4>
 80031ec:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80031f0:	f67f ae94 	bls.w	8002f1c <_strtod_l+0x564>
 80031f4:	4650      	mov	r0, sl
 80031f6:	4659      	mov	r1, fp
 80031f8:	4ba3      	ldr	r3, [pc, #652]	@ (8003488 <_strtod_l+0xad0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	f7fd f964 	bl	80004c8 <__aeabi_dmul>
 8003200:	4ba2      	ldr	r3, [pc, #648]	@ (800348c <_strtod_l+0xad4>)
 8003202:	4682      	mov	sl, r0
 8003204:	400b      	ands	r3, r1
 8003206:	468b      	mov	fp, r1
 8003208:	2b00      	cmp	r3, #0
 800320a:	f47f adff 	bne.w	8002e0c <_strtod_l+0x454>
 800320e:	2322      	movs	r3, #34	@ 0x22
 8003210:	9a05      	ldr	r2, [sp, #20]
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e5fa      	b.n	8002e0c <_strtod_l+0x454>
 8003216:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800321a:	d165      	bne.n	80032e8 <_strtod_l+0x930>
 800321c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800321e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003222:	b35a      	cbz	r2, 800327c <_strtod_l+0x8c4>
 8003224:	4a9a      	ldr	r2, [pc, #616]	@ (8003490 <_strtod_l+0xad8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d12b      	bne.n	8003282 <_strtod_l+0x8ca>
 800322a:	9b08      	ldr	r3, [sp, #32]
 800322c:	4651      	mov	r1, sl
 800322e:	b303      	cbz	r3, 8003272 <_strtod_l+0x8ba>
 8003230:	465a      	mov	r2, fp
 8003232:	4b96      	ldr	r3, [pc, #600]	@ (800348c <_strtod_l+0xad4>)
 8003234:	4013      	ands	r3, r2
 8003236:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800323a:	f04f 32ff 	mov.w	r2, #4294967295
 800323e:	d81b      	bhi.n	8003278 <_strtod_l+0x8c0>
 8003240:	0d1b      	lsrs	r3, r3, #20
 8003242:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	4299      	cmp	r1, r3
 800324c:	d119      	bne.n	8003282 <_strtod_l+0x8ca>
 800324e:	4b91      	ldr	r3, [pc, #580]	@ (8003494 <_strtod_l+0xadc>)
 8003250:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003252:	429a      	cmp	r2, r3
 8003254:	d102      	bne.n	800325c <_strtod_l+0x8a4>
 8003256:	3101      	adds	r1, #1
 8003258:	f43f adcd 	beq.w	8002df6 <_strtod_l+0x43e>
 800325c:	f04f 0a00 	mov.w	sl, #0
 8003260:	4b8a      	ldr	r3, [pc, #552]	@ (800348c <_strtod_l+0xad4>)
 8003262:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003264:	401a      	ands	r2, r3
 8003266:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800326a:	9b08      	ldr	r3, [sp, #32]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1c1      	bne.n	80031f4 <_strtod_l+0x83c>
 8003270:	e5cc      	b.n	8002e0c <_strtod_l+0x454>
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	e7e8      	b.n	800324a <_strtod_l+0x892>
 8003278:	4613      	mov	r3, r2
 800327a:	e7e6      	b.n	800324a <_strtod_l+0x892>
 800327c:	ea53 030a 	orrs.w	r3, r3, sl
 8003280:	d0aa      	beq.n	80031d8 <_strtod_l+0x820>
 8003282:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003284:	b1db      	cbz	r3, 80032be <_strtod_l+0x906>
 8003286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003288:	4213      	tst	r3, r2
 800328a:	d0ee      	beq.n	800326a <_strtod_l+0x8b2>
 800328c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800328e:	4650      	mov	r0, sl
 8003290:	4659      	mov	r1, fp
 8003292:	9a08      	ldr	r2, [sp, #32]
 8003294:	b1bb      	cbz	r3, 80032c6 <_strtod_l+0x90e>
 8003296:	f7ff fb6c 	bl	8002972 <sulp>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80032a2:	f7fc ff5b 	bl	800015c <__adddf3>
 80032a6:	4682      	mov	sl, r0
 80032a8:	468b      	mov	fp, r1
 80032aa:	e7de      	b.n	800326a <_strtod_l+0x8b2>
 80032ac:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80032b0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80032b4:	f04f 3aff 	mov.w	sl, #4294967295
 80032b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80032bc:	e7d5      	b.n	800326a <_strtod_l+0x8b2>
 80032be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80032c0:	ea13 0f0a 	tst.w	r3, sl
 80032c4:	e7e1      	b.n	800328a <_strtod_l+0x8d2>
 80032c6:	f7ff fb54 	bl	8002972 <sulp>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80032d2:	f7fc ff41 	bl	8000158 <__aeabi_dsub>
 80032d6:	2200      	movs	r2, #0
 80032d8:	2300      	movs	r3, #0
 80032da:	4682      	mov	sl, r0
 80032dc:	468b      	mov	fp, r1
 80032de:	f7fd fb5b 	bl	8000998 <__aeabi_dcmpeq>
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d0c1      	beq.n	800326a <_strtod_l+0x8b2>
 80032e6:	e619      	b.n	8002f1c <_strtod_l+0x564>
 80032e8:	4641      	mov	r1, r8
 80032ea:	4620      	mov	r0, r4
 80032ec:	f001 fb7e 	bl	80049ec <__ratio>
 80032f0:	2200      	movs	r2, #0
 80032f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80032f6:	4606      	mov	r6, r0
 80032f8:	460f      	mov	r7, r1
 80032fa:	f7fd fb61 	bl	80009c0 <__aeabi_dcmple>
 80032fe:	2800      	cmp	r0, #0
 8003300:	d06d      	beq.n	80033de <_strtod_l+0xa26>
 8003302:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d178      	bne.n	80033fa <_strtod_l+0xa42>
 8003308:	f1ba 0f00 	cmp.w	sl, #0
 800330c:	d156      	bne.n	80033bc <_strtod_l+0xa04>
 800330e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003314:	2b00      	cmp	r3, #0
 8003316:	d158      	bne.n	80033ca <_strtod_l+0xa12>
 8003318:	2200      	movs	r2, #0
 800331a:	4630      	mov	r0, r6
 800331c:	4639      	mov	r1, r7
 800331e:	4b5e      	ldr	r3, [pc, #376]	@ (8003498 <_strtod_l+0xae0>)
 8003320:	f7fd fb44 	bl	80009ac <__aeabi_dcmplt>
 8003324:	2800      	cmp	r0, #0
 8003326:	d157      	bne.n	80033d8 <_strtod_l+0xa20>
 8003328:	4630      	mov	r0, r6
 800332a:	4639      	mov	r1, r7
 800332c:	2200      	movs	r2, #0
 800332e:	4b5b      	ldr	r3, [pc, #364]	@ (800349c <_strtod_l+0xae4>)
 8003330:	f7fd f8ca 	bl	80004c8 <__aeabi_dmul>
 8003334:	4606      	mov	r6, r0
 8003336:	460f      	mov	r7, r1
 8003338:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800333c:	9606      	str	r6, [sp, #24]
 800333e:	9307      	str	r3, [sp, #28]
 8003340:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003344:	4d51      	ldr	r5, [pc, #324]	@ (800348c <_strtod_l+0xad4>)
 8003346:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800334a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800334c:	401d      	ands	r5, r3
 800334e:	4b54      	ldr	r3, [pc, #336]	@ (80034a0 <_strtod_l+0xae8>)
 8003350:	429d      	cmp	r5, r3
 8003352:	f040 80ab 	bne.w	80034ac <_strtod_l+0xaf4>
 8003356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003358:	4650      	mov	r0, sl
 800335a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800335e:	4659      	mov	r1, fp
 8003360:	f001 fa84 	bl	800486c <__ulp>
 8003364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003368:	f7fd f8ae 	bl	80004c8 <__aeabi_dmul>
 800336c:	4652      	mov	r2, sl
 800336e:	465b      	mov	r3, fp
 8003370:	f7fc fef4 	bl	800015c <__adddf3>
 8003374:	460b      	mov	r3, r1
 8003376:	4945      	ldr	r1, [pc, #276]	@ (800348c <_strtod_l+0xad4>)
 8003378:	4a4a      	ldr	r2, [pc, #296]	@ (80034a4 <_strtod_l+0xaec>)
 800337a:	4019      	ands	r1, r3
 800337c:	4291      	cmp	r1, r2
 800337e:	4682      	mov	sl, r0
 8003380:	d942      	bls.n	8003408 <_strtod_l+0xa50>
 8003382:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003384:	4b43      	ldr	r3, [pc, #268]	@ (8003494 <_strtod_l+0xadc>)
 8003386:	429a      	cmp	r2, r3
 8003388:	d103      	bne.n	8003392 <_strtod_l+0x9da>
 800338a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800338c:	3301      	adds	r3, #1
 800338e:	f43f ad32 	beq.w	8002df6 <_strtod_l+0x43e>
 8003392:	f04f 3aff 	mov.w	sl, #4294967295
 8003396:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8003494 <_strtod_l+0xadc>
 800339a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800339c:	9805      	ldr	r0, [sp, #20]
 800339e:	f000 ff39 	bl	8004214 <_Bfree>
 80033a2:	4649      	mov	r1, r9
 80033a4:	9805      	ldr	r0, [sp, #20]
 80033a6:	f000 ff35 	bl	8004214 <_Bfree>
 80033aa:	4641      	mov	r1, r8
 80033ac:	9805      	ldr	r0, [sp, #20]
 80033ae:	f000 ff31 	bl	8004214 <_Bfree>
 80033b2:	4621      	mov	r1, r4
 80033b4:	9805      	ldr	r0, [sp, #20]
 80033b6:	f000 ff2d 	bl	8004214 <_Bfree>
 80033ba:	e61c      	b.n	8002ff6 <_strtod_l+0x63e>
 80033bc:	f1ba 0f01 	cmp.w	sl, #1
 80033c0:	d103      	bne.n	80033ca <_strtod_l+0xa12>
 80033c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f43f ada9 	beq.w	8002f1c <_strtod_l+0x564>
 80033ca:	2200      	movs	r2, #0
 80033cc:	4b36      	ldr	r3, [pc, #216]	@ (80034a8 <_strtod_l+0xaf0>)
 80033ce:	2600      	movs	r6, #0
 80033d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80033d4:	4f30      	ldr	r7, [pc, #192]	@ (8003498 <_strtod_l+0xae0>)
 80033d6:	e7b3      	b.n	8003340 <_strtod_l+0x988>
 80033d8:	2600      	movs	r6, #0
 80033da:	4f30      	ldr	r7, [pc, #192]	@ (800349c <_strtod_l+0xae4>)
 80033dc:	e7ac      	b.n	8003338 <_strtod_l+0x980>
 80033de:	4630      	mov	r0, r6
 80033e0:	4639      	mov	r1, r7
 80033e2:	4b2e      	ldr	r3, [pc, #184]	@ (800349c <_strtod_l+0xae4>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	f7fd f86f 	bl	80004c8 <__aeabi_dmul>
 80033ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80033ec:	4606      	mov	r6, r0
 80033ee:	460f      	mov	r7, r1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0a1      	beq.n	8003338 <_strtod_l+0x980>
 80033f4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80033f8:	e7a2      	b.n	8003340 <_strtod_l+0x988>
 80033fa:	2200      	movs	r2, #0
 80033fc:	4b26      	ldr	r3, [pc, #152]	@ (8003498 <_strtod_l+0xae0>)
 80033fe:	4616      	mov	r6, r2
 8003400:	461f      	mov	r7, r3
 8003402:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003406:	e79b      	b.n	8003340 <_strtod_l+0x988>
 8003408:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800340c:	9b08      	ldr	r3, [sp, #32]
 800340e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1c1      	bne.n	800339a <_strtod_l+0x9e2>
 8003416:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800341a:	0d1b      	lsrs	r3, r3, #20
 800341c:	051b      	lsls	r3, r3, #20
 800341e:	429d      	cmp	r5, r3
 8003420:	d1bb      	bne.n	800339a <_strtod_l+0x9e2>
 8003422:	4630      	mov	r0, r6
 8003424:	4639      	mov	r1, r7
 8003426:	f7fd fe4d 	bl	80010c4 <__aeabi_d2lz>
 800342a:	f7fd f81f 	bl	800046c <__aeabi_l2d>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4630      	mov	r0, r6
 8003434:	4639      	mov	r1, r7
 8003436:	f7fc fe8f 	bl	8000158 <__aeabi_dsub>
 800343a:	460b      	mov	r3, r1
 800343c:	4602      	mov	r2, r0
 800343e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8003442:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003446:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003448:	ea46 060a 	orr.w	r6, r6, sl
 800344c:	431e      	orrs	r6, r3
 800344e:	d06a      	beq.n	8003526 <_strtod_l+0xb6e>
 8003450:	a309      	add	r3, pc, #36	@ (adr r3, 8003478 <_strtod_l+0xac0>)
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f7fd faa9 	bl	80009ac <__aeabi_dcmplt>
 800345a:	2800      	cmp	r0, #0
 800345c:	f47f acd6 	bne.w	8002e0c <_strtod_l+0x454>
 8003460:	a307      	add	r3, pc, #28	@ (adr r3, 8003480 <_strtod_l+0xac8>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800346a:	f7fd fabd 	bl	80009e8 <__aeabi_dcmpgt>
 800346e:	2800      	cmp	r0, #0
 8003470:	d093      	beq.n	800339a <_strtod_l+0x9e2>
 8003472:	e4cb      	b.n	8002e0c <_strtod_l+0x454>
 8003474:	f3af 8000 	nop.w
 8003478:	94a03595 	.word	0x94a03595
 800347c:	3fdfffff 	.word	0x3fdfffff
 8003480:	35afe535 	.word	0x35afe535
 8003484:	3fe00000 	.word	0x3fe00000
 8003488:	39500000 	.word	0x39500000
 800348c:	7ff00000 	.word	0x7ff00000
 8003490:	000fffff 	.word	0x000fffff
 8003494:	7fefffff 	.word	0x7fefffff
 8003498:	3ff00000 	.word	0x3ff00000
 800349c:	3fe00000 	.word	0x3fe00000
 80034a0:	7fe00000 	.word	0x7fe00000
 80034a4:	7c9fffff 	.word	0x7c9fffff
 80034a8:	bff00000 	.word	0xbff00000
 80034ac:	9b08      	ldr	r3, [sp, #32]
 80034ae:	b323      	cbz	r3, 80034fa <_strtod_l+0xb42>
 80034b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80034b4:	d821      	bhi.n	80034fa <_strtod_l+0xb42>
 80034b6:	a328      	add	r3, pc, #160	@ (adr r3, 8003558 <_strtod_l+0xba0>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	4630      	mov	r0, r6
 80034be:	4639      	mov	r1, r7
 80034c0:	f7fd fa7e 	bl	80009c0 <__aeabi_dcmple>
 80034c4:	b1a0      	cbz	r0, 80034f0 <_strtod_l+0xb38>
 80034c6:	4639      	mov	r1, r7
 80034c8:	4630      	mov	r0, r6
 80034ca:	f7fd fa97 	bl	80009fc <__aeabi_d2uiz>
 80034ce:	2801      	cmp	r0, #1
 80034d0:	bf38      	it	cc
 80034d2:	2001      	movcc	r0, #1
 80034d4:	f7fc ff7e 	bl	80003d4 <__aeabi_ui2d>
 80034d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80034da:	4606      	mov	r6, r0
 80034dc:	460f      	mov	r7, r1
 80034de:	b9fb      	cbnz	r3, 8003520 <_strtod_l+0xb68>
 80034e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80034e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80034e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80034e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80034ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80034f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80034f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80034f6:	1b5b      	subs	r3, r3, r5
 80034f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80034fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80034fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8003502:	f001 f9b3 	bl	800486c <__ulp>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4650      	mov	r0, sl
 800350c:	4659      	mov	r1, fp
 800350e:	f7fc ffdb 	bl	80004c8 <__aeabi_dmul>
 8003512:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003516:	f7fc fe21 	bl	800015c <__adddf3>
 800351a:	4682      	mov	sl, r0
 800351c:	468b      	mov	fp, r1
 800351e:	e775      	b.n	800340c <_strtod_l+0xa54>
 8003520:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8003524:	e7e0      	b.n	80034e8 <_strtod_l+0xb30>
 8003526:	a30e      	add	r3, pc, #56	@ (adr r3, 8003560 <_strtod_l+0xba8>)
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f7fd fa3e 	bl	80009ac <__aeabi_dcmplt>
 8003530:	e79d      	b.n	800346e <_strtod_l+0xab6>
 8003532:	2300      	movs	r3, #0
 8003534:	930e      	str	r3, [sp, #56]	@ 0x38
 8003536:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003538:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	f7ff ba79 	b.w	8002a32 <_strtod_l+0x7a>
 8003540:	2a65      	cmp	r2, #101	@ 0x65
 8003542:	f43f ab72 	beq.w	8002c2a <_strtod_l+0x272>
 8003546:	2a45      	cmp	r2, #69	@ 0x45
 8003548:	f43f ab6f 	beq.w	8002c2a <_strtod_l+0x272>
 800354c:	2301      	movs	r3, #1
 800354e:	f7ff bbaa 	b.w	8002ca6 <_strtod_l+0x2ee>
 8003552:	bf00      	nop
 8003554:	f3af 8000 	nop.w
 8003558:	ffc00000 	.word	0xffc00000
 800355c:	41dfffff 	.word	0x41dfffff
 8003560:	94a03595 	.word	0x94a03595
 8003564:	3fcfffff 	.word	0x3fcfffff

08003568 <strtod>:
 8003568:	460a      	mov	r2, r1
 800356a:	4601      	mov	r1, r0
 800356c:	4802      	ldr	r0, [pc, #8]	@ (8003578 <strtod+0x10>)
 800356e:	4b03      	ldr	r3, [pc, #12]	@ (800357c <strtod+0x14>)
 8003570:	6800      	ldr	r0, [r0, #0]
 8003572:	f7ff ba21 	b.w	80029b8 <_strtod_l>
 8003576:	bf00      	nop
 8003578:	20000188 	.word	0x20000188
 800357c:	2000001c 	.word	0x2000001c

08003580 <std>:
 8003580:	2300      	movs	r3, #0
 8003582:	b510      	push	{r4, lr}
 8003584:	4604      	mov	r4, r0
 8003586:	e9c0 3300 	strd	r3, r3, [r0]
 800358a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800358e:	6083      	str	r3, [r0, #8]
 8003590:	8181      	strh	r1, [r0, #12]
 8003592:	6643      	str	r3, [r0, #100]	@ 0x64
 8003594:	81c2      	strh	r2, [r0, #14]
 8003596:	6183      	str	r3, [r0, #24]
 8003598:	4619      	mov	r1, r3
 800359a:	2208      	movs	r2, #8
 800359c:	305c      	adds	r0, #92	@ 0x5c
 800359e:	f000 f8f4 	bl	800378a <memset>
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <std+0x58>)
 80035a4:	6224      	str	r4, [r4, #32]
 80035a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80035a8:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <std+0x5c>)
 80035aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80035ac:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <std+0x60>)
 80035ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <std+0x64>)
 80035b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80035b4:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <std+0x68>)
 80035b6:	429c      	cmp	r4, r3
 80035b8:	d006      	beq.n	80035c8 <std+0x48>
 80035ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80035be:	4294      	cmp	r4, r2
 80035c0:	d002      	beq.n	80035c8 <std+0x48>
 80035c2:	33d0      	adds	r3, #208	@ 0xd0
 80035c4:	429c      	cmp	r4, r3
 80035c6:	d105      	bne.n	80035d4 <std+0x54>
 80035c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d0:	f000 b986 	b.w	80038e0 <__retarget_lock_init_recursive>
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	bf00      	nop
 80035d8:	08003705 	.word	0x08003705
 80035dc:	08003727 	.word	0x08003727
 80035e0:	0800375f 	.word	0x0800375f
 80035e4:	08003783 	.word	0x08003783
 80035e8:	200003b4 	.word	0x200003b4

080035ec <stdio_exit_handler>:
 80035ec:	4a02      	ldr	r2, [pc, #8]	@ (80035f8 <stdio_exit_handler+0xc>)
 80035ee:	4903      	ldr	r1, [pc, #12]	@ (80035fc <stdio_exit_handler+0x10>)
 80035f0:	4803      	ldr	r0, [pc, #12]	@ (8003600 <stdio_exit_handler+0x14>)
 80035f2:	f000 b869 	b.w	80036c8 <_fwalk_sglue>
 80035f6:	bf00      	nop
 80035f8:	20000010 	.word	0x20000010
 80035fc:	08004bf1 	.word	0x08004bf1
 8003600:	2000018c 	.word	0x2000018c

08003604 <cleanup_stdio>:
 8003604:	6841      	ldr	r1, [r0, #4]
 8003606:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <cleanup_stdio+0x34>)
 8003608:	b510      	push	{r4, lr}
 800360a:	4299      	cmp	r1, r3
 800360c:	4604      	mov	r4, r0
 800360e:	d001      	beq.n	8003614 <cleanup_stdio+0x10>
 8003610:	f001 faee 	bl	8004bf0 <_fflush_r>
 8003614:	68a1      	ldr	r1, [r4, #8]
 8003616:	4b09      	ldr	r3, [pc, #36]	@ (800363c <cleanup_stdio+0x38>)
 8003618:	4299      	cmp	r1, r3
 800361a:	d002      	beq.n	8003622 <cleanup_stdio+0x1e>
 800361c:	4620      	mov	r0, r4
 800361e:	f001 fae7 	bl	8004bf0 <_fflush_r>
 8003622:	68e1      	ldr	r1, [r4, #12]
 8003624:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <cleanup_stdio+0x3c>)
 8003626:	4299      	cmp	r1, r3
 8003628:	d004      	beq.n	8003634 <cleanup_stdio+0x30>
 800362a:	4620      	mov	r0, r4
 800362c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003630:	f001 bade 	b.w	8004bf0 <_fflush_r>
 8003634:	bd10      	pop	{r4, pc}
 8003636:	bf00      	nop
 8003638:	200003b4 	.word	0x200003b4
 800363c:	2000041c 	.word	0x2000041c
 8003640:	20000484 	.word	0x20000484

08003644 <global_stdio_init.part.0>:
 8003644:	b510      	push	{r4, lr}
 8003646:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <global_stdio_init.part.0+0x30>)
 8003648:	4c0b      	ldr	r4, [pc, #44]	@ (8003678 <global_stdio_init.part.0+0x34>)
 800364a:	4a0c      	ldr	r2, [pc, #48]	@ (800367c <global_stdio_init.part.0+0x38>)
 800364c:	4620      	mov	r0, r4
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	2104      	movs	r1, #4
 8003652:	2200      	movs	r2, #0
 8003654:	f7ff ff94 	bl	8003580 <std>
 8003658:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800365c:	2201      	movs	r2, #1
 800365e:	2109      	movs	r1, #9
 8003660:	f7ff ff8e 	bl	8003580 <std>
 8003664:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003668:	2202      	movs	r2, #2
 800366a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800366e:	2112      	movs	r1, #18
 8003670:	f7ff bf86 	b.w	8003580 <std>
 8003674:	200004ec 	.word	0x200004ec
 8003678:	200003b4 	.word	0x200003b4
 800367c:	080035ed 	.word	0x080035ed

08003680 <__sfp_lock_acquire>:
 8003680:	4801      	ldr	r0, [pc, #4]	@ (8003688 <__sfp_lock_acquire+0x8>)
 8003682:	f000 b92e 	b.w	80038e2 <__retarget_lock_acquire_recursive>
 8003686:	bf00      	nop
 8003688:	200004f5 	.word	0x200004f5

0800368c <__sfp_lock_release>:
 800368c:	4801      	ldr	r0, [pc, #4]	@ (8003694 <__sfp_lock_release+0x8>)
 800368e:	f000 b929 	b.w	80038e4 <__retarget_lock_release_recursive>
 8003692:	bf00      	nop
 8003694:	200004f5 	.word	0x200004f5

08003698 <__sinit>:
 8003698:	b510      	push	{r4, lr}
 800369a:	4604      	mov	r4, r0
 800369c:	f7ff fff0 	bl	8003680 <__sfp_lock_acquire>
 80036a0:	6a23      	ldr	r3, [r4, #32]
 80036a2:	b11b      	cbz	r3, 80036ac <__sinit+0x14>
 80036a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a8:	f7ff bff0 	b.w	800368c <__sfp_lock_release>
 80036ac:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <__sinit+0x28>)
 80036ae:	6223      	str	r3, [r4, #32]
 80036b0:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <__sinit+0x2c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f5      	bne.n	80036a4 <__sinit+0xc>
 80036b8:	f7ff ffc4 	bl	8003644 <global_stdio_init.part.0>
 80036bc:	e7f2      	b.n	80036a4 <__sinit+0xc>
 80036be:	bf00      	nop
 80036c0:	08003605 	.word	0x08003605
 80036c4:	200004ec 	.word	0x200004ec

080036c8 <_fwalk_sglue>:
 80036c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036cc:	4607      	mov	r7, r0
 80036ce:	4688      	mov	r8, r1
 80036d0:	4614      	mov	r4, r2
 80036d2:	2600      	movs	r6, #0
 80036d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036d8:	f1b9 0901 	subs.w	r9, r9, #1
 80036dc:	d505      	bpl.n	80036ea <_fwalk_sglue+0x22>
 80036de:	6824      	ldr	r4, [r4, #0]
 80036e0:	2c00      	cmp	r4, #0
 80036e2:	d1f7      	bne.n	80036d4 <_fwalk_sglue+0xc>
 80036e4:	4630      	mov	r0, r6
 80036e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ea:	89ab      	ldrh	r3, [r5, #12]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d907      	bls.n	8003700 <_fwalk_sglue+0x38>
 80036f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036f4:	3301      	adds	r3, #1
 80036f6:	d003      	beq.n	8003700 <_fwalk_sglue+0x38>
 80036f8:	4629      	mov	r1, r5
 80036fa:	4638      	mov	r0, r7
 80036fc:	47c0      	blx	r8
 80036fe:	4306      	orrs	r6, r0
 8003700:	3568      	adds	r5, #104	@ 0x68
 8003702:	e7e9      	b.n	80036d8 <_fwalk_sglue+0x10>

08003704 <__sread>:
 8003704:	b510      	push	{r4, lr}
 8003706:	460c      	mov	r4, r1
 8003708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800370c:	f000 f89a 	bl	8003844 <_read_r>
 8003710:	2800      	cmp	r0, #0
 8003712:	bfab      	itete	ge
 8003714:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003716:	89a3      	ldrhlt	r3, [r4, #12]
 8003718:	181b      	addge	r3, r3, r0
 800371a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800371e:	bfac      	ite	ge
 8003720:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003722:	81a3      	strhlt	r3, [r4, #12]
 8003724:	bd10      	pop	{r4, pc}

08003726 <__swrite>:
 8003726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800372a:	461f      	mov	r7, r3
 800372c:	898b      	ldrh	r3, [r1, #12]
 800372e:	4605      	mov	r5, r0
 8003730:	05db      	lsls	r3, r3, #23
 8003732:	460c      	mov	r4, r1
 8003734:	4616      	mov	r6, r2
 8003736:	d505      	bpl.n	8003744 <__swrite+0x1e>
 8003738:	2302      	movs	r3, #2
 800373a:	2200      	movs	r2, #0
 800373c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003740:	f000 f86e 	bl	8003820 <_lseek_r>
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	4632      	mov	r2, r6
 8003748:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800374c:	81a3      	strh	r3, [r4, #12]
 800374e:	4628      	mov	r0, r5
 8003750:	463b      	mov	r3, r7
 8003752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800375a:	f000 b885 	b.w	8003868 <_write_r>

0800375e <__sseek>:
 800375e:	b510      	push	{r4, lr}
 8003760:	460c      	mov	r4, r1
 8003762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003766:	f000 f85b 	bl	8003820 <_lseek_r>
 800376a:	1c43      	adds	r3, r0, #1
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	bf15      	itete	ne
 8003770:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003772:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003776:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800377a:	81a3      	strheq	r3, [r4, #12]
 800377c:	bf18      	it	ne
 800377e:	81a3      	strhne	r3, [r4, #12]
 8003780:	bd10      	pop	{r4, pc}

08003782 <__sclose>:
 8003782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003786:	f000 b83b 	b.w	8003800 <_close_r>

0800378a <memset>:
 800378a:	4603      	mov	r3, r0
 800378c:	4402      	add	r2, r0
 800378e:	4293      	cmp	r3, r2
 8003790:	d100      	bne.n	8003794 <memset+0xa>
 8003792:	4770      	bx	lr
 8003794:	f803 1b01 	strb.w	r1, [r3], #1
 8003798:	e7f9      	b.n	800378e <memset+0x4>

0800379a <strchr>:
 800379a:	4603      	mov	r3, r0
 800379c:	b2c9      	uxtb	r1, r1
 800379e:	4618      	mov	r0, r3
 80037a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037a4:	b112      	cbz	r2, 80037ac <strchr+0x12>
 80037a6:	428a      	cmp	r2, r1
 80037a8:	d1f9      	bne.n	800379e <strchr+0x4>
 80037aa:	4770      	bx	lr
 80037ac:	2900      	cmp	r1, #0
 80037ae:	bf18      	it	ne
 80037b0:	2000      	movne	r0, #0
 80037b2:	4770      	bx	lr

080037b4 <strncmp>:
 80037b4:	b510      	push	{r4, lr}
 80037b6:	b16a      	cbz	r2, 80037d4 <strncmp+0x20>
 80037b8:	3901      	subs	r1, #1
 80037ba:	1884      	adds	r4, r0, r2
 80037bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d103      	bne.n	80037d0 <strncmp+0x1c>
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d001      	beq.n	80037d0 <strncmp+0x1c>
 80037cc:	2a00      	cmp	r2, #0
 80037ce:	d1f5      	bne.n	80037bc <strncmp+0x8>
 80037d0:	1ad0      	subs	r0, r2, r3
 80037d2:	bd10      	pop	{r4, pc}
 80037d4:	4610      	mov	r0, r2
 80037d6:	e7fc      	b.n	80037d2 <strncmp+0x1e>

080037d8 <strncpy>:
 80037d8:	4603      	mov	r3, r0
 80037da:	b510      	push	{r4, lr}
 80037dc:	3901      	subs	r1, #1
 80037de:	b132      	cbz	r2, 80037ee <strncpy+0x16>
 80037e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80037e4:	3a01      	subs	r2, #1
 80037e6:	f803 4b01 	strb.w	r4, [r3], #1
 80037ea:	2c00      	cmp	r4, #0
 80037ec:	d1f7      	bne.n	80037de <strncpy+0x6>
 80037ee:	2100      	movs	r1, #0
 80037f0:	441a      	add	r2, r3
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d100      	bne.n	80037f8 <strncpy+0x20>
 80037f6:	bd10      	pop	{r4, pc}
 80037f8:	f803 1b01 	strb.w	r1, [r3], #1
 80037fc:	e7f9      	b.n	80037f2 <strncpy+0x1a>
	...

08003800 <_close_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	2300      	movs	r3, #0
 8003804:	4d05      	ldr	r5, [pc, #20]	@ (800381c <_close_r+0x1c>)
 8003806:	4604      	mov	r4, r0
 8003808:	4608      	mov	r0, r1
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	f7fd feb6 	bl	800157c <_close>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_close_r+0x1a>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_close_r+0x1a>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	200004f0 	.word	0x200004f0

08003820 <_lseek_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	4604      	mov	r4, r0
 8003824:	4608      	mov	r0, r1
 8003826:	4611      	mov	r1, r2
 8003828:	2200      	movs	r2, #0
 800382a:	4d05      	ldr	r5, [pc, #20]	@ (8003840 <_lseek_r+0x20>)
 800382c:	602a      	str	r2, [r5, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	f7fd fec8 	bl	80015c4 <_lseek>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	d102      	bne.n	800383e <_lseek_r+0x1e>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	b103      	cbz	r3, 800383e <_lseek_r+0x1e>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	200004f0 	.word	0x200004f0

08003844 <_read_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4604      	mov	r4, r0
 8003848:	4608      	mov	r0, r1
 800384a:	4611      	mov	r1, r2
 800384c:	2200      	movs	r2, #0
 800384e:	4d05      	ldr	r5, [pc, #20]	@ (8003864 <_read_r+0x20>)
 8003850:	602a      	str	r2, [r5, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	f7fd fe59 	bl	800150a <_read>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_read_r+0x1e>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_read_r+0x1e>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	200004f0 	.word	0x200004f0

08003868 <_write_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4604      	mov	r4, r0
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	2200      	movs	r2, #0
 8003872:	4d05      	ldr	r5, [pc, #20]	@ (8003888 <_write_r+0x20>)
 8003874:	602a      	str	r2, [r5, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	f7fd fe64 	bl	8001544 <_write>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_write_r+0x1e>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_write_r+0x1e>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	200004f0 	.word	0x200004f0

0800388c <__errno>:
 800388c:	4b01      	ldr	r3, [pc, #4]	@ (8003894 <__errno+0x8>)
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000188 	.word	0x20000188

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	2600      	movs	r6, #0
 800389c:	4d0c      	ldr	r5, [pc, #48]	@ (80038d0 <__libc_init_array+0x38>)
 800389e:	4c0d      	ldr	r4, [pc, #52]	@ (80038d4 <__libc_init_array+0x3c>)
 80038a0:	1b64      	subs	r4, r4, r5
 80038a2:	10a4      	asrs	r4, r4, #2
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	f001 fe66 	bl	8005578 <_init>
 80038ac:	2600      	movs	r6, #0
 80038ae:	4d0a      	ldr	r5, [pc, #40]	@ (80038d8 <__libc_init_array+0x40>)
 80038b0:	4c0a      	ldr	r4, [pc, #40]	@ (80038dc <__libc_init_array+0x44>)
 80038b2:	1b64      	subs	r4, r4, r5
 80038b4:	10a4      	asrs	r4, r4, #2
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	0800594c 	.word	0x0800594c
 80038d4:	0800594c 	.word	0x0800594c
 80038d8:	0800594c 	.word	0x0800594c
 80038dc:	08005950 	.word	0x08005950

080038e0 <__retarget_lock_init_recursive>:
 80038e0:	4770      	bx	lr

080038e2 <__retarget_lock_acquire_recursive>:
 80038e2:	4770      	bx	lr

080038e4 <__retarget_lock_release_recursive>:
 80038e4:	4770      	bx	lr

080038e6 <memcpy>:
 80038e6:	440a      	add	r2, r1
 80038e8:	4291      	cmp	r1, r2
 80038ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80038ee:	d100      	bne.n	80038f2 <memcpy+0xc>
 80038f0:	4770      	bx	lr
 80038f2:	b510      	push	{r4, lr}
 80038f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038f8:	4291      	cmp	r1, r2
 80038fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038fe:	d1f9      	bne.n	80038f4 <memcpy+0xe>
 8003900:	bd10      	pop	{r4, pc}
	...

08003904 <nan>:
 8003904:	2000      	movs	r0, #0
 8003906:	4901      	ldr	r1, [pc, #4]	@ (800390c <nan+0x8>)
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	7ff80000 	.word	0x7ff80000

08003910 <_free_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4605      	mov	r5, r0
 8003914:	2900      	cmp	r1, #0
 8003916:	d040      	beq.n	800399a <_free_r+0x8a>
 8003918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800391c:	1f0c      	subs	r4, r1, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	bfb8      	it	lt
 8003922:	18e4      	addlt	r4, r4, r3
 8003924:	f000 fc2a 	bl	800417c <__malloc_lock>
 8003928:	4a1c      	ldr	r2, [pc, #112]	@ (800399c <_free_r+0x8c>)
 800392a:	6813      	ldr	r3, [r2, #0]
 800392c:	b933      	cbnz	r3, 800393c <_free_r+0x2c>
 800392e:	6063      	str	r3, [r4, #4]
 8003930:	6014      	str	r4, [r2, #0]
 8003932:	4628      	mov	r0, r5
 8003934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003938:	f000 bc26 	b.w	8004188 <__malloc_unlock>
 800393c:	42a3      	cmp	r3, r4
 800393e:	d908      	bls.n	8003952 <_free_r+0x42>
 8003940:	6820      	ldr	r0, [r4, #0]
 8003942:	1821      	adds	r1, r4, r0
 8003944:	428b      	cmp	r3, r1
 8003946:	bf01      	itttt	eq
 8003948:	6819      	ldreq	r1, [r3, #0]
 800394a:	685b      	ldreq	r3, [r3, #4]
 800394c:	1809      	addeq	r1, r1, r0
 800394e:	6021      	streq	r1, [r4, #0]
 8003950:	e7ed      	b.n	800392e <_free_r+0x1e>
 8003952:	461a      	mov	r2, r3
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	b10b      	cbz	r3, 800395c <_free_r+0x4c>
 8003958:	42a3      	cmp	r3, r4
 800395a:	d9fa      	bls.n	8003952 <_free_r+0x42>
 800395c:	6811      	ldr	r1, [r2, #0]
 800395e:	1850      	adds	r0, r2, r1
 8003960:	42a0      	cmp	r0, r4
 8003962:	d10b      	bne.n	800397c <_free_r+0x6c>
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	4401      	add	r1, r0
 8003968:	1850      	adds	r0, r2, r1
 800396a:	4283      	cmp	r3, r0
 800396c:	6011      	str	r1, [r2, #0]
 800396e:	d1e0      	bne.n	8003932 <_free_r+0x22>
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4408      	add	r0, r1
 8003976:	6010      	str	r0, [r2, #0]
 8003978:	6053      	str	r3, [r2, #4]
 800397a:	e7da      	b.n	8003932 <_free_r+0x22>
 800397c:	d902      	bls.n	8003984 <_free_r+0x74>
 800397e:	230c      	movs	r3, #12
 8003980:	602b      	str	r3, [r5, #0]
 8003982:	e7d6      	b.n	8003932 <_free_r+0x22>
 8003984:	6820      	ldr	r0, [r4, #0]
 8003986:	1821      	adds	r1, r4, r0
 8003988:	428b      	cmp	r3, r1
 800398a:	bf01      	itttt	eq
 800398c:	6819      	ldreq	r1, [r3, #0]
 800398e:	685b      	ldreq	r3, [r3, #4]
 8003990:	1809      	addeq	r1, r1, r0
 8003992:	6021      	streq	r1, [r4, #0]
 8003994:	6063      	str	r3, [r4, #4]
 8003996:	6054      	str	r4, [r2, #4]
 8003998:	e7cb      	b.n	8003932 <_free_r+0x22>
 800399a:	bd38      	pop	{r3, r4, r5, pc}
 800399c:	200004fc 	.word	0x200004fc

080039a0 <rshift>:
 80039a0:	6903      	ldr	r3, [r0, #16]
 80039a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80039aa:	f100 0414 	add.w	r4, r0, #20
 80039ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80039b2:	dd46      	ble.n	8003a42 <rshift+0xa2>
 80039b4:	f011 011f 	ands.w	r1, r1, #31
 80039b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80039bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80039c0:	d10c      	bne.n	80039dc <rshift+0x3c>
 80039c2:	4629      	mov	r1, r5
 80039c4:	f100 0710 	add.w	r7, r0, #16
 80039c8:	42b1      	cmp	r1, r6
 80039ca:	d335      	bcc.n	8003a38 <rshift+0x98>
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	1eea      	subs	r2, r5, #3
 80039d2:	4296      	cmp	r6, r2
 80039d4:	bf38      	it	cc
 80039d6:	2300      	movcc	r3, #0
 80039d8:	4423      	add	r3, r4
 80039da:	e015      	b.n	8003a08 <rshift+0x68>
 80039dc:	46a1      	mov	r9, r4
 80039de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80039e2:	f1c1 0820 	rsb	r8, r1, #32
 80039e6:	40cf      	lsrs	r7, r1
 80039e8:	f105 0e04 	add.w	lr, r5, #4
 80039ec:	4576      	cmp	r6, lr
 80039ee:	46f4      	mov	ip, lr
 80039f0:	d816      	bhi.n	8003a20 <rshift+0x80>
 80039f2:	1a9a      	subs	r2, r3, r2
 80039f4:	0092      	lsls	r2, r2, #2
 80039f6:	3a04      	subs	r2, #4
 80039f8:	3501      	adds	r5, #1
 80039fa:	42ae      	cmp	r6, r5
 80039fc:	bf38      	it	cc
 80039fe:	2200      	movcc	r2, #0
 8003a00:	18a3      	adds	r3, r4, r2
 8003a02:	50a7      	str	r7, [r4, r2]
 8003a04:	b107      	cbz	r7, 8003a08 <rshift+0x68>
 8003a06:	3304      	adds	r3, #4
 8003a08:	42a3      	cmp	r3, r4
 8003a0a:	eba3 0204 	sub.w	r2, r3, r4
 8003a0e:	bf08      	it	eq
 8003a10:	2300      	moveq	r3, #0
 8003a12:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8003a16:	6102      	str	r2, [r0, #16]
 8003a18:	bf08      	it	eq
 8003a1a:	6143      	streq	r3, [r0, #20]
 8003a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a20:	f8dc c000 	ldr.w	ip, [ip]
 8003a24:	fa0c fc08 	lsl.w	ip, ip, r8
 8003a28:	ea4c 0707 	orr.w	r7, ip, r7
 8003a2c:	f849 7b04 	str.w	r7, [r9], #4
 8003a30:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003a34:	40cf      	lsrs	r7, r1
 8003a36:	e7d9      	b.n	80039ec <rshift+0x4c>
 8003a38:	f851 cb04 	ldr.w	ip, [r1], #4
 8003a3c:	f847 cf04 	str.w	ip, [r7, #4]!
 8003a40:	e7c2      	b.n	80039c8 <rshift+0x28>
 8003a42:	4623      	mov	r3, r4
 8003a44:	e7e0      	b.n	8003a08 <rshift+0x68>

08003a46 <__hexdig_fun>:
 8003a46:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8003a4a:	2b09      	cmp	r3, #9
 8003a4c:	d802      	bhi.n	8003a54 <__hexdig_fun+0xe>
 8003a4e:	3820      	subs	r0, #32
 8003a50:	b2c0      	uxtb	r0, r0
 8003a52:	4770      	bx	lr
 8003a54:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d801      	bhi.n	8003a60 <__hexdig_fun+0x1a>
 8003a5c:	3847      	subs	r0, #71	@ 0x47
 8003a5e:	e7f7      	b.n	8003a50 <__hexdig_fun+0xa>
 8003a60:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d801      	bhi.n	8003a6c <__hexdig_fun+0x26>
 8003a68:	3827      	subs	r0, #39	@ 0x27
 8003a6a:	e7f1      	b.n	8003a50 <__hexdig_fun+0xa>
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	4770      	bx	lr

08003a70 <__gethex>:
 8003a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a74:	468a      	mov	sl, r1
 8003a76:	4690      	mov	r8, r2
 8003a78:	b085      	sub	sp, #20
 8003a7a:	9302      	str	r3, [sp, #8]
 8003a7c:	680b      	ldr	r3, [r1, #0]
 8003a7e:	9001      	str	r0, [sp, #4]
 8003a80:	1c9c      	adds	r4, r3, #2
 8003a82:	46a1      	mov	r9, r4
 8003a84:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003a88:	2830      	cmp	r0, #48	@ 0x30
 8003a8a:	d0fa      	beq.n	8003a82 <__gethex+0x12>
 8003a8c:	eba9 0303 	sub.w	r3, r9, r3
 8003a90:	f1a3 0b02 	sub.w	fp, r3, #2
 8003a94:	f7ff ffd7 	bl	8003a46 <__hexdig_fun>
 8003a98:	4605      	mov	r5, r0
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d168      	bne.n	8003b70 <__gethex+0x100>
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4648      	mov	r0, r9
 8003aa2:	499f      	ldr	r1, [pc, #636]	@ (8003d20 <__gethex+0x2b0>)
 8003aa4:	f7ff fe86 	bl	80037b4 <strncmp>
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d167      	bne.n	8003b7e <__gethex+0x10e>
 8003aae:	f899 0001 	ldrb.w	r0, [r9, #1]
 8003ab2:	4626      	mov	r6, r4
 8003ab4:	f7ff ffc7 	bl	8003a46 <__hexdig_fun>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d062      	beq.n	8003b82 <__gethex+0x112>
 8003abc:	4623      	mov	r3, r4
 8003abe:	7818      	ldrb	r0, [r3, #0]
 8003ac0:	4699      	mov	r9, r3
 8003ac2:	2830      	cmp	r0, #48	@ 0x30
 8003ac4:	f103 0301 	add.w	r3, r3, #1
 8003ac8:	d0f9      	beq.n	8003abe <__gethex+0x4e>
 8003aca:	f7ff ffbc 	bl	8003a46 <__hexdig_fun>
 8003ace:	fab0 f580 	clz	r5, r0
 8003ad2:	f04f 0b01 	mov.w	fp, #1
 8003ad6:	096d      	lsrs	r5, r5, #5
 8003ad8:	464a      	mov	r2, r9
 8003ada:	4616      	mov	r6, r2
 8003adc:	7830      	ldrb	r0, [r6, #0]
 8003ade:	3201      	adds	r2, #1
 8003ae0:	f7ff ffb1 	bl	8003a46 <__hexdig_fun>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d1f8      	bne.n	8003ada <__gethex+0x6a>
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4630      	mov	r0, r6
 8003aec:	498c      	ldr	r1, [pc, #560]	@ (8003d20 <__gethex+0x2b0>)
 8003aee:	f7ff fe61 	bl	80037b4 <strncmp>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d13f      	bne.n	8003b76 <__gethex+0x106>
 8003af6:	b944      	cbnz	r4, 8003b0a <__gethex+0x9a>
 8003af8:	1c74      	adds	r4, r6, #1
 8003afa:	4622      	mov	r2, r4
 8003afc:	4616      	mov	r6, r2
 8003afe:	7830      	ldrb	r0, [r6, #0]
 8003b00:	3201      	adds	r2, #1
 8003b02:	f7ff ffa0 	bl	8003a46 <__hexdig_fun>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d1f8      	bne.n	8003afc <__gethex+0x8c>
 8003b0a:	1ba4      	subs	r4, r4, r6
 8003b0c:	00a7      	lsls	r7, r4, #2
 8003b0e:	7833      	ldrb	r3, [r6, #0]
 8003b10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8003b14:	2b50      	cmp	r3, #80	@ 0x50
 8003b16:	d13e      	bne.n	8003b96 <__gethex+0x126>
 8003b18:	7873      	ldrb	r3, [r6, #1]
 8003b1a:	2b2b      	cmp	r3, #43	@ 0x2b
 8003b1c:	d033      	beq.n	8003b86 <__gethex+0x116>
 8003b1e:	2b2d      	cmp	r3, #45	@ 0x2d
 8003b20:	d034      	beq.n	8003b8c <__gethex+0x11c>
 8003b22:	2400      	movs	r4, #0
 8003b24:	1c71      	adds	r1, r6, #1
 8003b26:	7808      	ldrb	r0, [r1, #0]
 8003b28:	f7ff ff8d 	bl	8003a46 <__hexdig_fun>
 8003b2c:	1e43      	subs	r3, r0, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b18      	cmp	r3, #24
 8003b32:	d830      	bhi.n	8003b96 <__gethex+0x126>
 8003b34:	f1a0 0210 	sub.w	r2, r0, #16
 8003b38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003b3c:	f7ff ff83 	bl	8003a46 <__hexdig_fun>
 8003b40:	f100 3cff 	add.w	ip, r0, #4294967295
 8003b44:	fa5f fc8c 	uxtb.w	ip, ip
 8003b48:	f1bc 0f18 	cmp.w	ip, #24
 8003b4c:	f04f 030a 	mov.w	r3, #10
 8003b50:	d91e      	bls.n	8003b90 <__gethex+0x120>
 8003b52:	b104      	cbz	r4, 8003b56 <__gethex+0xe6>
 8003b54:	4252      	negs	r2, r2
 8003b56:	4417      	add	r7, r2
 8003b58:	f8ca 1000 	str.w	r1, [sl]
 8003b5c:	b1ed      	cbz	r5, 8003b9a <__gethex+0x12a>
 8003b5e:	f1bb 0f00 	cmp.w	fp, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2506      	moveq	r5, #6
 8003b66:	2500      	movne	r5, #0
 8003b68:	4628      	mov	r0, r5
 8003b6a:	b005      	add	sp, #20
 8003b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b70:	2500      	movs	r5, #0
 8003b72:	462c      	mov	r4, r5
 8003b74:	e7b0      	b.n	8003ad8 <__gethex+0x68>
 8003b76:	2c00      	cmp	r4, #0
 8003b78:	d1c7      	bne.n	8003b0a <__gethex+0x9a>
 8003b7a:	4627      	mov	r7, r4
 8003b7c:	e7c7      	b.n	8003b0e <__gethex+0x9e>
 8003b7e:	464e      	mov	r6, r9
 8003b80:	462f      	mov	r7, r5
 8003b82:	2501      	movs	r5, #1
 8003b84:	e7c3      	b.n	8003b0e <__gethex+0x9e>
 8003b86:	2400      	movs	r4, #0
 8003b88:	1cb1      	adds	r1, r6, #2
 8003b8a:	e7cc      	b.n	8003b26 <__gethex+0xb6>
 8003b8c:	2401      	movs	r4, #1
 8003b8e:	e7fb      	b.n	8003b88 <__gethex+0x118>
 8003b90:	fb03 0002 	mla	r0, r3, r2, r0
 8003b94:	e7ce      	b.n	8003b34 <__gethex+0xc4>
 8003b96:	4631      	mov	r1, r6
 8003b98:	e7de      	b.n	8003b58 <__gethex+0xe8>
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	eba6 0309 	sub.w	r3, r6, r9
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	2b07      	cmp	r3, #7
 8003ba4:	dc0a      	bgt.n	8003bbc <__gethex+0x14c>
 8003ba6:	9801      	ldr	r0, [sp, #4]
 8003ba8:	f000 faf4 	bl	8004194 <_Balloc>
 8003bac:	4604      	mov	r4, r0
 8003bae:	b940      	cbnz	r0, 8003bc2 <__gethex+0x152>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	21e4      	movs	r1, #228	@ 0xe4
 8003bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8003d24 <__gethex+0x2b4>)
 8003bb6:	485c      	ldr	r0, [pc, #368]	@ (8003d28 <__gethex+0x2b8>)
 8003bb8:	f001 f852 	bl	8004c60 <__assert_func>
 8003bbc:	3101      	adds	r1, #1
 8003bbe:	105b      	asrs	r3, r3, #1
 8003bc0:	e7ef      	b.n	8003ba2 <__gethex+0x132>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f100 0a14 	add.w	sl, r0, #20
 8003bc8:	4655      	mov	r5, sl
 8003bca:	469b      	mov	fp, r3
 8003bcc:	45b1      	cmp	r9, r6
 8003bce:	d337      	bcc.n	8003c40 <__gethex+0x1d0>
 8003bd0:	f845 bb04 	str.w	fp, [r5], #4
 8003bd4:	eba5 050a 	sub.w	r5, r5, sl
 8003bd8:	10ad      	asrs	r5, r5, #2
 8003bda:	6125      	str	r5, [r4, #16]
 8003bdc:	4658      	mov	r0, fp
 8003bde:	f000 fbcb 	bl	8004378 <__hi0bits>
 8003be2:	016d      	lsls	r5, r5, #5
 8003be4:	f8d8 6000 	ldr.w	r6, [r8]
 8003be8:	1a2d      	subs	r5, r5, r0
 8003bea:	42b5      	cmp	r5, r6
 8003bec:	dd54      	ble.n	8003c98 <__gethex+0x228>
 8003bee:	1bad      	subs	r5, r5, r6
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f000 ff4d 	bl	8004a92 <__any_on>
 8003bf8:	4681      	mov	r9, r0
 8003bfa:	b178      	cbz	r0, 8003c1c <__gethex+0x1ac>
 8003bfc:	f04f 0901 	mov.w	r9, #1
 8003c00:	1e6b      	subs	r3, r5, #1
 8003c02:	1159      	asrs	r1, r3, #5
 8003c04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	fa09 f202 	lsl.w	r2, r9, r2
 8003c10:	420a      	tst	r2, r1
 8003c12:	d003      	beq.n	8003c1c <__gethex+0x1ac>
 8003c14:	454b      	cmp	r3, r9
 8003c16:	dc36      	bgt.n	8003c86 <__gethex+0x216>
 8003c18:	f04f 0902 	mov.w	r9, #2
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f7ff febe 	bl	80039a0 <rshift>
 8003c24:	442f      	add	r7, r5
 8003c26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003c2a:	42bb      	cmp	r3, r7
 8003c2c:	da42      	bge.n	8003cb4 <__gethex+0x244>
 8003c2e:	4621      	mov	r1, r4
 8003c30:	9801      	ldr	r0, [sp, #4]
 8003c32:	f000 faef 	bl	8004214 <_Bfree>
 8003c36:	2300      	movs	r3, #0
 8003c38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c3a:	25a3      	movs	r5, #163	@ 0xa3
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e793      	b.n	8003b68 <__gethex+0xf8>
 8003c40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8003c44:	2a2e      	cmp	r2, #46	@ 0x2e
 8003c46:	d012      	beq.n	8003c6e <__gethex+0x1fe>
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d104      	bne.n	8003c56 <__gethex+0x1e6>
 8003c4c:	f845 bb04 	str.w	fp, [r5], #4
 8003c50:	f04f 0b00 	mov.w	fp, #0
 8003c54:	465b      	mov	r3, fp
 8003c56:	7830      	ldrb	r0, [r6, #0]
 8003c58:	9303      	str	r3, [sp, #12]
 8003c5a:	f7ff fef4 	bl	8003a46 <__hexdig_fun>
 8003c5e:	9b03      	ldr	r3, [sp, #12]
 8003c60:	f000 000f 	and.w	r0, r0, #15
 8003c64:	4098      	lsls	r0, r3
 8003c66:	ea4b 0b00 	orr.w	fp, fp, r0
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	e7ae      	b.n	8003bcc <__gethex+0x15c>
 8003c6e:	45b1      	cmp	r9, r6
 8003c70:	d8ea      	bhi.n	8003c48 <__gethex+0x1d8>
 8003c72:	2201      	movs	r2, #1
 8003c74:	4630      	mov	r0, r6
 8003c76:	492a      	ldr	r1, [pc, #168]	@ (8003d20 <__gethex+0x2b0>)
 8003c78:	9303      	str	r3, [sp, #12]
 8003c7a:	f7ff fd9b 	bl	80037b4 <strncmp>
 8003c7e:	9b03      	ldr	r3, [sp, #12]
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d1e1      	bne.n	8003c48 <__gethex+0x1d8>
 8003c84:	e7a2      	b.n	8003bcc <__gethex+0x15c>
 8003c86:	4620      	mov	r0, r4
 8003c88:	1ea9      	subs	r1, r5, #2
 8003c8a:	f000 ff02 	bl	8004a92 <__any_on>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d0c2      	beq.n	8003c18 <__gethex+0x1a8>
 8003c92:	f04f 0903 	mov.w	r9, #3
 8003c96:	e7c1      	b.n	8003c1c <__gethex+0x1ac>
 8003c98:	da09      	bge.n	8003cae <__gethex+0x23e>
 8003c9a:	1b75      	subs	r5, r6, r5
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	462a      	mov	r2, r5
 8003ca0:	9801      	ldr	r0, [sp, #4]
 8003ca2:	f000 fcc7 	bl	8004634 <__lshift>
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	1b7f      	subs	r7, r7, r5
 8003caa:	f100 0a14 	add.w	sl, r0, #20
 8003cae:	f04f 0900 	mov.w	r9, #0
 8003cb2:	e7b8      	b.n	8003c26 <__gethex+0x1b6>
 8003cb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8003cb8:	42bd      	cmp	r5, r7
 8003cba:	dd6f      	ble.n	8003d9c <__gethex+0x32c>
 8003cbc:	1bed      	subs	r5, r5, r7
 8003cbe:	42ae      	cmp	r6, r5
 8003cc0:	dc34      	bgt.n	8003d2c <__gethex+0x2bc>
 8003cc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d022      	beq.n	8003d10 <__gethex+0x2a0>
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d024      	beq.n	8003d18 <__gethex+0x2a8>
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d115      	bne.n	8003cfe <__gethex+0x28e>
 8003cd2:	42ae      	cmp	r6, r5
 8003cd4:	d113      	bne.n	8003cfe <__gethex+0x28e>
 8003cd6:	2e01      	cmp	r6, #1
 8003cd8:	d10b      	bne.n	8003cf2 <__gethex+0x282>
 8003cda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003cde:	9a02      	ldr	r2, [sp, #8]
 8003ce0:	2562      	movs	r5, #98	@ 0x62
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	f8ca 3000 	str.w	r3, [sl]
 8003cec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003cee:	601c      	str	r4, [r3, #0]
 8003cf0:	e73a      	b.n	8003b68 <__gethex+0xf8>
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	1e71      	subs	r1, r6, #1
 8003cf6:	f000 fecc 	bl	8004a92 <__any_on>
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d1ed      	bne.n	8003cda <__gethex+0x26a>
 8003cfe:	4621      	mov	r1, r4
 8003d00:	9801      	ldr	r0, [sp, #4]
 8003d02:	f000 fa87 	bl	8004214 <_Bfree>
 8003d06:	2300      	movs	r3, #0
 8003d08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d0a:	2550      	movs	r5, #80	@ 0x50
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e72b      	b.n	8003b68 <__gethex+0xf8>
 8003d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f3      	bne.n	8003cfe <__gethex+0x28e>
 8003d16:	e7e0      	b.n	8003cda <__gethex+0x26a>
 8003d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1dd      	bne.n	8003cda <__gethex+0x26a>
 8003d1e:	e7ee      	b.n	8003cfe <__gethex+0x28e>
 8003d20:	08005590 	.word	0x08005590
 8003d24:	080055a6 	.word	0x080055a6
 8003d28:	080055b7 	.word	0x080055b7
 8003d2c:	1e6f      	subs	r7, r5, #1
 8003d2e:	f1b9 0f00 	cmp.w	r9, #0
 8003d32:	d130      	bne.n	8003d96 <__gethex+0x326>
 8003d34:	b127      	cbz	r7, 8003d40 <__gethex+0x2d0>
 8003d36:	4639      	mov	r1, r7
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 feaa 	bl	8004a92 <__any_on>
 8003d3e:	4681      	mov	r9, r0
 8003d40:	2301      	movs	r3, #1
 8003d42:	4629      	mov	r1, r5
 8003d44:	1b76      	subs	r6, r6, r5
 8003d46:	2502      	movs	r5, #2
 8003d48:	117a      	asrs	r2, r7, #5
 8003d4a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8003d4e:	f007 071f 	and.w	r7, r7, #31
 8003d52:	40bb      	lsls	r3, r7
 8003d54:	4213      	tst	r3, r2
 8003d56:	4620      	mov	r0, r4
 8003d58:	bf18      	it	ne
 8003d5a:	f049 0902 	orrne.w	r9, r9, #2
 8003d5e:	f7ff fe1f 	bl	80039a0 <rshift>
 8003d62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8003d66:	f1b9 0f00 	cmp.w	r9, #0
 8003d6a:	d047      	beq.n	8003dfc <__gethex+0x38c>
 8003d6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d015      	beq.n	8003da0 <__gethex+0x330>
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d017      	beq.n	8003da8 <__gethex+0x338>
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d109      	bne.n	8003d90 <__gethex+0x320>
 8003d7c:	f019 0f02 	tst.w	r9, #2
 8003d80:	d006      	beq.n	8003d90 <__gethex+0x320>
 8003d82:	f8da 3000 	ldr.w	r3, [sl]
 8003d86:	ea49 0903 	orr.w	r9, r9, r3
 8003d8a:	f019 0f01 	tst.w	r9, #1
 8003d8e:	d10e      	bne.n	8003dae <__gethex+0x33e>
 8003d90:	f045 0510 	orr.w	r5, r5, #16
 8003d94:	e032      	b.n	8003dfc <__gethex+0x38c>
 8003d96:	f04f 0901 	mov.w	r9, #1
 8003d9a:	e7d1      	b.n	8003d40 <__gethex+0x2d0>
 8003d9c:	2501      	movs	r5, #1
 8003d9e:	e7e2      	b.n	8003d66 <__gethex+0x2f6>
 8003da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003da2:	f1c3 0301 	rsb	r3, r3, #1
 8003da6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <__gethex+0x320>
 8003dae:	f04f 0c00 	mov.w	ip, #0
 8003db2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8003db6:	f104 0314 	add.w	r3, r4, #20
 8003dba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8003dbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dc8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003dcc:	d01b      	beq.n	8003e06 <__gethex+0x396>
 8003dce:	3201      	adds	r2, #1
 8003dd0:	6002      	str	r2, [r0, #0]
 8003dd2:	2d02      	cmp	r5, #2
 8003dd4:	f104 0314 	add.w	r3, r4, #20
 8003dd8:	d13c      	bne.n	8003e54 <__gethex+0x3e4>
 8003dda:	f8d8 2000 	ldr.w	r2, [r8]
 8003dde:	3a01      	subs	r2, #1
 8003de0:	42b2      	cmp	r2, r6
 8003de2:	d109      	bne.n	8003df8 <__gethex+0x388>
 8003de4:	2201      	movs	r2, #1
 8003de6:	1171      	asrs	r1, r6, #5
 8003de8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003dec:	f006 061f 	and.w	r6, r6, #31
 8003df0:	fa02 f606 	lsl.w	r6, r2, r6
 8003df4:	421e      	tst	r6, r3
 8003df6:	d13a      	bne.n	8003e6e <__gethex+0x3fe>
 8003df8:	f045 0520 	orr.w	r5, r5, #32
 8003dfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003dfe:	601c      	str	r4, [r3, #0]
 8003e00:	9b02      	ldr	r3, [sp, #8]
 8003e02:	601f      	str	r7, [r3, #0]
 8003e04:	e6b0      	b.n	8003b68 <__gethex+0xf8>
 8003e06:	4299      	cmp	r1, r3
 8003e08:	f843 cc04 	str.w	ip, [r3, #-4]
 8003e0c:	d8d9      	bhi.n	8003dc2 <__gethex+0x352>
 8003e0e:	68a3      	ldr	r3, [r4, #8]
 8003e10:	459b      	cmp	fp, r3
 8003e12:	db17      	blt.n	8003e44 <__gethex+0x3d4>
 8003e14:	6861      	ldr	r1, [r4, #4]
 8003e16:	9801      	ldr	r0, [sp, #4]
 8003e18:	3101      	adds	r1, #1
 8003e1a:	f000 f9bb 	bl	8004194 <_Balloc>
 8003e1e:	4681      	mov	r9, r0
 8003e20:	b918      	cbnz	r0, 8003e2a <__gethex+0x3ba>
 8003e22:	4602      	mov	r2, r0
 8003e24:	2184      	movs	r1, #132	@ 0x84
 8003e26:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <__gethex+0x41c>)
 8003e28:	e6c5      	b.n	8003bb6 <__gethex+0x146>
 8003e2a:	6922      	ldr	r2, [r4, #16]
 8003e2c:	f104 010c 	add.w	r1, r4, #12
 8003e30:	3202      	adds	r2, #2
 8003e32:	0092      	lsls	r2, r2, #2
 8003e34:	300c      	adds	r0, #12
 8003e36:	f7ff fd56 	bl	80038e6 <memcpy>
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	9801      	ldr	r0, [sp, #4]
 8003e3e:	f000 f9e9 	bl	8004214 <_Bfree>
 8003e42:	464c      	mov	r4, r9
 8003e44:	6923      	ldr	r3, [r4, #16]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	6122      	str	r2, [r4, #16]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e50:	615a      	str	r2, [r3, #20]
 8003e52:	e7be      	b.n	8003dd2 <__gethex+0x362>
 8003e54:	6922      	ldr	r2, [r4, #16]
 8003e56:	455a      	cmp	r2, fp
 8003e58:	dd0b      	ble.n	8003e72 <__gethex+0x402>
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f7ff fd9f 	bl	80039a0 <rshift>
 8003e62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003e66:	3701      	adds	r7, #1
 8003e68:	42bb      	cmp	r3, r7
 8003e6a:	f6ff aee0 	blt.w	8003c2e <__gethex+0x1be>
 8003e6e:	2501      	movs	r5, #1
 8003e70:	e7c2      	b.n	8003df8 <__gethex+0x388>
 8003e72:	f016 061f 	ands.w	r6, r6, #31
 8003e76:	d0fa      	beq.n	8003e6e <__gethex+0x3fe>
 8003e78:	4453      	add	r3, sl
 8003e7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8003e7e:	f000 fa7b 	bl	8004378 <__hi0bits>
 8003e82:	f1c6 0620 	rsb	r6, r6, #32
 8003e86:	42b0      	cmp	r0, r6
 8003e88:	dbe7      	blt.n	8003e5a <__gethex+0x3ea>
 8003e8a:	e7f0      	b.n	8003e6e <__gethex+0x3fe>
 8003e8c:	080055a6 	.word	0x080055a6

08003e90 <L_shift>:
 8003e90:	f1c2 0208 	rsb	r2, r2, #8
 8003e94:	0092      	lsls	r2, r2, #2
 8003e96:	b570      	push	{r4, r5, r6, lr}
 8003e98:	f1c2 0620 	rsb	r6, r2, #32
 8003e9c:	6843      	ldr	r3, [r0, #4]
 8003e9e:	6804      	ldr	r4, [r0, #0]
 8003ea0:	fa03 f506 	lsl.w	r5, r3, r6
 8003ea4:	432c      	orrs	r4, r5
 8003ea6:	40d3      	lsrs	r3, r2
 8003ea8:	6004      	str	r4, [r0, #0]
 8003eaa:	f840 3f04 	str.w	r3, [r0, #4]!
 8003eae:	4288      	cmp	r0, r1
 8003eb0:	d3f4      	bcc.n	8003e9c <L_shift+0xc>
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}

08003eb4 <__match>:
 8003eb4:	b530      	push	{r4, r5, lr}
 8003eb6:	6803      	ldr	r3, [r0, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ebe:	b914      	cbnz	r4, 8003ec6 <__match+0x12>
 8003ec0:	6003      	str	r3, [r0, #0]
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	bd30      	pop	{r4, r5, pc}
 8003ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8003ece:	2d19      	cmp	r5, #25
 8003ed0:	bf98      	it	ls
 8003ed2:	3220      	addls	r2, #32
 8003ed4:	42a2      	cmp	r2, r4
 8003ed6:	d0f0      	beq.n	8003eba <__match+0x6>
 8003ed8:	2000      	movs	r0, #0
 8003eda:	e7f3      	b.n	8003ec4 <__match+0x10>

08003edc <__hexnan>:
 8003edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee0:	2500      	movs	r5, #0
 8003ee2:	680b      	ldr	r3, [r1, #0]
 8003ee4:	4682      	mov	sl, r0
 8003ee6:	115e      	asrs	r6, r3, #5
 8003ee8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003eec:	f013 031f 	ands.w	r3, r3, #31
 8003ef0:	bf18      	it	ne
 8003ef2:	3604      	addne	r6, #4
 8003ef4:	1f37      	subs	r7, r6, #4
 8003ef6:	4690      	mov	r8, r2
 8003ef8:	46b9      	mov	r9, r7
 8003efa:	463c      	mov	r4, r7
 8003efc:	46ab      	mov	fp, r5
 8003efe:	b087      	sub	sp, #28
 8003f00:	6801      	ldr	r1, [r0, #0]
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	f846 5c04 	str.w	r5, [r6, #-4]
 8003f08:	9502      	str	r5, [sp, #8]
 8003f0a:	784a      	ldrb	r2, [r1, #1]
 8003f0c:	1c4b      	adds	r3, r1, #1
 8003f0e:	9303      	str	r3, [sp, #12]
 8003f10:	b342      	cbz	r2, 8003f64 <__hexnan+0x88>
 8003f12:	4610      	mov	r0, r2
 8003f14:	9105      	str	r1, [sp, #20]
 8003f16:	9204      	str	r2, [sp, #16]
 8003f18:	f7ff fd95 	bl	8003a46 <__hexdig_fun>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d151      	bne.n	8003fc4 <__hexnan+0xe8>
 8003f20:	9a04      	ldr	r2, [sp, #16]
 8003f22:	9905      	ldr	r1, [sp, #20]
 8003f24:	2a20      	cmp	r2, #32
 8003f26:	d818      	bhi.n	8003f5a <__hexnan+0x7e>
 8003f28:	9b02      	ldr	r3, [sp, #8]
 8003f2a:	459b      	cmp	fp, r3
 8003f2c:	dd13      	ble.n	8003f56 <__hexnan+0x7a>
 8003f2e:	454c      	cmp	r4, r9
 8003f30:	d206      	bcs.n	8003f40 <__hexnan+0x64>
 8003f32:	2d07      	cmp	r5, #7
 8003f34:	dc04      	bgt.n	8003f40 <__hexnan+0x64>
 8003f36:	462a      	mov	r2, r5
 8003f38:	4649      	mov	r1, r9
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7ff ffa8 	bl	8003e90 <L_shift>
 8003f40:	4544      	cmp	r4, r8
 8003f42:	d952      	bls.n	8003fea <__hexnan+0x10e>
 8003f44:	2300      	movs	r3, #0
 8003f46:	f1a4 0904 	sub.w	r9, r4, #4
 8003f4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8003f4e:	461d      	mov	r5, r3
 8003f50:	464c      	mov	r4, r9
 8003f52:	f8cd b008 	str.w	fp, [sp, #8]
 8003f56:	9903      	ldr	r1, [sp, #12]
 8003f58:	e7d7      	b.n	8003f0a <__hexnan+0x2e>
 8003f5a:	2a29      	cmp	r2, #41	@ 0x29
 8003f5c:	d157      	bne.n	800400e <__hexnan+0x132>
 8003f5e:	3102      	adds	r1, #2
 8003f60:	f8ca 1000 	str.w	r1, [sl]
 8003f64:	f1bb 0f00 	cmp.w	fp, #0
 8003f68:	d051      	beq.n	800400e <__hexnan+0x132>
 8003f6a:	454c      	cmp	r4, r9
 8003f6c:	d206      	bcs.n	8003f7c <__hexnan+0xa0>
 8003f6e:	2d07      	cmp	r5, #7
 8003f70:	dc04      	bgt.n	8003f7c <__hexnan+0xa0>
 8003f72:	462a      	mov	r2, r5
 8003f74:	4649      	mov	r1, r9
 8003f76:	4620      	mov	r0, r4
 8003f78:	f7ff ff8a 	bl	8003e90 <L_shift>
 8003f7c:	4544      	cmp	r4, r8
 8003f7e:	d936      	bls.n	8003fee <__hexnan+0x112>
 8003f80:	4623      	mov	r3, r4
 8003f82:	f1a8 0204 	sub.w	r2, r8, #4
 8003f86:	f853 1b04 	ldr.w	r1, [r3], #4
 8003f8a:	429f      	cmp	r7, r3
 8003f8c:	f842 1f04 	str.w	r1, [r2, #4]!
 8003f90:	d2f9      	bcs.n	8003f86 <__hexnan+0xaa>
 8003f92:	1b3b      	subs	r3, r7, r4
 8003f94:	f023 0303 	bic.w	r3, r3, #3
 8003f98:	3304      	adds	r3, #4
 8003f9a:	3401      	adds	r4, #1
 8003f9c:	3e03      	subs	r6, #3
 8003f9e:	42b4      	cmp	r4, r6
 8003fa0:	bf88      	it	hi
 8003fa2:	2304      	movhi	r3, #4
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4443      	add	r3, r8
 8003fa8:	f843 2b04 	str.w	r2, [r3], #4
 8003fac:	429f      	cmp	r7, r3
 8003fae:	d2fb      	bcs.n	8003fa8 <__hexnan+0xcc>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	b91b      	cbnz	r3, 8003fbc <__hexnan+0xe0>
 8003fb4:	4547      	cmp	r7, r8
 8003fb6:	d128      	bne.n	800400a <__hexnan+0x12e>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	2005      	movs	r0, #5
 8003fbe:	b007      	add	sp, #28
 8003fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc4:	3501      	adds	r5, #1
 8003fc6:	2d08      	cmp	r5, #8
 8003fc8:	f10b 0b01 	add.w	fp, fp, #1
 8003fcc:	dd06      	ble.n	8003fdc <__hexnan+0x100>
 8003fce:	4544      	cmp	r4, r8
 8003fd0:	d9c1      	bls.n	8003f56 <__hexnan+0x7a>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2501      	movs	r5, #1
 8003fd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8003fda:	3c04      	subs	r4, #4
 8003fdc:	6822      	ldr	r2, [r4, #0]
 8003fde:	f000 000f 	and.w	r0, r0, #15
 8003fe2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003fe6:	6020      	str	r0, [r4, #0]
 8003fe8:	e7b5      	b.n	8003f56 <__hexnan+0x7a>
 8003fea:	2508      	movs	r5, #8
 8003fec:	e7b3      	b.n	8003f56 <__hexnan+0x7a>
 8003fee:	9b01      	ldr	r3, [sp, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0dd      	beq.n	8003fb0 <__hexnan+0xd4>
 8003ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff8:	f1c3 0320 	rsb	r3, r3, #32
 8003ffc:	40da      	lsrs	r2, r3
 8003ffe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8004002:	4013      	ands	r3, r2
 8004004:	f846 3c04 	str.w	r3, [r6, #-4]
 8004008:	e7d2      	b.n	8003fb0 <__hexnan+0xd4>
 800400a:	3f04      	subs	r7, #4
 800400c:	e7d0      	b.n	8003fb0 <__hexnan+0xd4>
 800400e:	2004      	movs	r0, #4
 8004010:	e7d5      	b.n	8003fbe <__hexnan+0xe2>
	...

08004014 <sbrk_aligned>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4e0f      	ldr	r6, [pc, #60]	@ (8004054 <sbrk_aligned+0x40>)
 8004018:	460c      	mov	r4, r1
 800401a:	6831      	ldr	r1, [r6, #0]
 800401c:	4605      	mov	r5, r0
 800401e:	b911      	cbnz	r1, 8004026 <sbrk_aligned+0x12>
 8004020:	f000 fe0e 	bl	8004c40 <_sbrk_r>
 8004024:	6030      	str	r0, [r6, #0]
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	f000 fe09 	bl	8004c40 <_sbrk_r>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d103      	bne.n	800403a <sbrk_aligned+0x26>
 8004032:	f04f 34ff 	mov.w	r4, #4294967295
 8004036:	4620      	mov	r0, r4
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	1cc4      	adds	r4, r0, #3
 800403c:	f024 0403 	bic.w	r4, r4, #3
 8004040:	42a0      	cmp	r0, r4
 8004042:	d0f8      	beq.n	8004036 <sbrk_aligned+0x22>
 8004044:	1a21      	subs	r1, r4, r0
 8004046:	4628      	mov	r0, r5
 8004048:	f000 fdfa 	bl	8004c40 <_sbrk_r>
 800404c:	3001      	adds	r0, #1
 800404e:	d1f2      	bne.n	8004036 <sbrk_aligned+0x22>
 8004050:	e7ef      	b.n	8004032 <sbrk_aligned+0x1e>
 8004052:	bf00      	nop
 8004054:	200004f8 	.word	0x200004f8

08004058 <_malloc_r>:
 8004058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800405c:	1ccd      	adds	r5, r1, #3
 800405e:	f025 0503 	bic.w	r5, r5, #3
 8004062:	3508      	adds	r5, #8
 8004064:	2d0c      	cmp	r5, #12
 8004066:	bf38      	it	cc
 8004068:	250c      	movcc	r5, #12
 800406a:	2d00      	cmp	r5, #0
 800406c:	4606      	mov	r6, r0
 800406e:	db01      	blt.n	8004074 <_malloc_r+0x1c>
 8004070:	42a9      	cmp	r1, r5
 8004072:	d904      	bls.n	800407e <_malloc_r+0x26>
 8004074:	230c      	movs	r3, #12
 8004076:	6033      	str	r3, [r6, #0]
 8004078:	2000      	movs	r0, #0
 800407a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800407e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004154 <_malloc_r+0xfc>
 8004082:	f000 f87b 	bl	800417c <__malloc_lock>
 8004086:	f8d8 3000 	ldr.w	r3, [r8]
 800408a:	461c      	mov	r4, r3
 800408c:	bb44      	cbnz	r4, 80040e0 <_malloc_r+0x88>
 800408e:	4629      	mov	r1, r5
 8004090:	4630      	mov	r0, r6
 8004092:	f7ff ffbf 	bl	8004014 <sbrk_aligned>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	4604      	mov	r4, r0
 800409a:	d158      	bne.n	800414e <_malloc_r+0xf6>
 800409c:	f8d8 4000 	ldr.w	r4, [r8]
 80040a0:	4627      	mov	r7, r4
 80040a2:	2f00      	cmp	r7, #0
 80040a4:	d143      	bne.n	800412e <_malloc_r+0xd6>
 80040a6:	2c00      	cmp	r4, #0
 80040a8:	d04b      	beq.n	8004142 <_malloc_r+0xea>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	4639      	mov	r1, r7
 80040ae:	4630      	mov	r0, r6
 80040b0:	eb04 0903 	add.w	r9, r4, r3
 80040b4:	f000 fdc4 	bl	8004c40 <_sbrk_r>
 80040b8:	4581      	cmp	r9, r0
 80040ba:	d142      	bne.n	8004142 <_malloc_r+0xea>
 80040bc:	6821      	ldr	r1, [r4, #0]
 80040be:	4630      	mov	r0, r6
 80040c0:	1a6d      	subs	r5, r5, r1
 80040c2:	4629      	mov	r1, r5
 80040c4:	f7ff ffa6 	bl	8004014 <sbrk_aligned>
 80040c8:	3001      	adds	r0, #1
 80040ca:	d03a      	beq.n	8004142 <_malloc_r+0xea>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	442b      	add	r3, r5
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	f8d8 3000 	ldr.w	r3, [r8]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	bb62      	cbnz	r2, 8004134 <_malloc_r+0xdc>
 80040da:	f8c8 7000 	str.w	r7, [r8]
 80040de:	e00f      	b.n	8004100 <_malloc_r+0xa8>
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	1b52      	subs	r2, r2, r5
 80040e4:	d420      	bmi.n	8004128 <_malloc_r+0xd0>
 80040e6:	2a0b      	cmp	r2, #11
 80040e8:	d917      	bls.n	800411a <_malloc_r+0xc2>
 80040ea:	1961      	adds	r1, r4, r5
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	6025      	str	r5, [r4, #0]
 80040f0:	bf18      	it	ne
 80040f2:	6059      	strne	r1, [r3, #4]
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	bf08      	it	eq
 80040f8:	f8c8 1000 	streq.w	r1, [r8]
 80040fc:	5162      	str	r2, [r4, r5]
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	4630      	mov	r0, r6
 8004102:	f000 f841 	bl	8004188 <__malloc_unlock>
 8004106:	f104 000b 	add.w	r0, r4, #11
 800410a:	1d23      	adds	r3, r4, #4
 800410c:	f020 0007 	bic.w	r0, r0, #7
 8004110:	1ac2      	subs	r2, r0, r3
 8004112:	bf1c      	itt	ne
 8004114:	1a1b      	subne	r3, r3, r0
 8004116:	50a3      	strne	r3, [r4, r2]
 8004118:	e7af      	b.n	800407a <_malloc_r+0x22>
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	42a3      	cmp	r3, r4
 800411e:	bf0c      	ite	eq
 8004120:	f8c8 2000 	streq.w	r2, [r8]
 8004124:	605a      	strne	r2, [r3, #4]
 8004126:	e7eb      	b.n	8004100 <_malloc_r+0xa8>
 8004128:	4623      	mov	r3, r4
 800412a:	6864      	ldr	r4, [r4, #4]
 800412c:	e7ae      	b.n	800408c <_malloc_r+0x34>
 800412e:	463c      	mov	r4, r7
 8004130:	687f      	ldr	r7, [r7, #4]
 8004132:	e7b6      	b.n	80040a2 <_malloc_r+0x4a>
 8004134:	461a      	mov	r2, r3
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	42a3      	cmp	r3, r4
 800413a:	d1fb      	bne.n	8004134 <_malloc_r+0xdc>
 800413c:	2300      	movs	r3, #0
 800413e:	6053      	str	r3, [r2, #4]
 8004140:	e7de      	b.n	8004100 <_malloc_r+0xa8>
 8004142:	230c      	movs	r3, #12
 8004144:	4630      	mov	r0, r6
 8004146:	6033      	str	r3, [r6, #0]
 8004148:	f000 f81e 	bl	8004188 <__malloc_unlock>
 800414c:	e794      	b.n	8004078 <_malloc_r+0x20>
 800414e:	6005      	str	r5, [r0, #0]
 8004150:	e7d6      	b.n	8004100 <_malloc_r+0xa8>
 8004152:	bf00      	nop
 8004154:	200004fc 	.word	0x200004fc

08004158 <__ascii_mbtowc>:
 8004158:	b082      	sub	sp, #8
 800415a:	b901      	cbnz	r1, 800415e <__ascii_mbtowc+0x6>
 800415c:	a901      	add	r1, sp, #4
 800415e:	b142      	cbz	r2, 8004172 <__ascii_mbtowc+0x1a>
 8004160:	b14b      	cbz	r3, 8004176 <__ascii_mbtowc+0x1e>
 8004162:	7813      	ldrb	r3, [r2, #0]
 8004164:	600b      	str	r3, [r1, #0]
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	1e10      	subs	r0, r2, #0
 800416a:	bf18      	it	ne
 800416c:	2001      	movne	r0, #1
 800416e:	b002      	add	sp, #8
 8004170:	4770      	bx	lr
 8004172:	4610      	mov	r0, r2
 8004174:	e7fb      	b.n	800416e <__ascii_mbtowc+0x16>
 8004176:	f06f 0001 	mvn.w	r0, #1
 800417a:	e7f8      	b.n	800416e <__ascii_mbtowc+0x16>

0800417c <__malloc_lock>:
 800417c:	4801      	ldr	r0, [pc, #4]	@ (8004184 <__malloc_lock+0x8>)
 800417e:	f7ff bbb0 	b.w	80038e2 <__retarget_lock_acquire_recursive>
 8004182:	bf00      	nop
 8004184:	200004f4 	.word	0x200004f4

08004188 <__malloc_unlock>:
 8004188:	4801      	ldr	r0, [pc, #4]	@ (8004190 <__malloc_unlock+0x8>)
 800418a:	f7ff bbab 	b.w	80038e4 <__retarget_lock_release_recursive>
 800418e:	bf00      	nop
 8004190:	200004f4 	.word	0x200004f4

08004194 <_Balloc>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	69c6      	ldr	r6, [r0, #28]
 8004198:	4604      	mov	r4, r0
 800419a:	460d      	mov	r5, r1
 800419c:	b976      	cbnz	r6, 80041bc <_Balloc+0x28>
 800419e:	2010      	movs	r0, #16
 80041a0:	f000 fd90 	bl	8004cc4 <malloc>
 80041a4:	4602      	mov	r2, r0
 80041a6:	61e0      	str	r0, [r4, #28]
 80041a8:	b920      	cbnz	r0, 80041b4 <_Balloc+0x20>
 80041aa:	216b      	movs	r1, #107	@ 0x6b
 80041ac:	4b17      	ldr	r3, [pc, #92]	@ (800420c <_Balloc+0x78>)
 80041ae:	4818      	ldr	r0, [pc, #96]	@ (8004210 <_Balloc+0x7c>)
 80041b0:	f000 fd56 	bl	8004c60 <__assert_func>
 80041b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80041b8:	6006      	str	r6, [r0, #0]
 80041ba:	60c6      	str	r6, [r0, #12]
 80041bc:	69e6      	ldr	r6, [r4, #28]
 80041be:	68f3      	ldr	r3, [r6, #12]
 80041c0:	b183      	cbz	r3, 80041e4 <_Balloc+0x50>
 80041c2:	69e3      	ldr	r3, [r4, #28]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80041ca:	b9b8      	cbnz	r0, 80041fc <_Balloc+0x68>
 80041cc:	2101      	movs	r1, #1
 80041ce:	fa01 f605 	lsl.w	r6, r1, r5
 80041d2:	1d72      	adds	r2, r6, #5
 80041d4:	4620      	mov	r0, r4
 80041d6:	0092      	lsls	r2, r2, #2
 80041d8:	f000 fd60 	bl	8004c9c <_calloc_r>
 80041dc:	b160      	cbz	r0, 80041f8 <_Balloc+0x64>
 80041de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80041e2:	e00e      	b.n	8004202 <_Balloc+0x6e>
 80041e4:	2221      	movs	r2, #33	@ 0x21
 80041e6:	2104      	movs	r1, #4
 80041e8:	4620      	mov	r0, r4
 80041ea:	f000 fd57 	bl	8004c9c <_calloc_r>
 80041ee:	69e3      	ldr	r3, [r4, #28]
 80041f0:	60f0      	str	r0, [r6, #12]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e4      	bne.n	80041c2 <_Balloc+0x2e>
 80041f8:	2000      	movs	r0, #0
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	6802      	ldr	r2, [r0, #0]
 80041fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004202:	2300      	movs	r3, #0
 8004204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004208:	e7f7      	b.n	80041fa <_Balloc+0x66>
 800420a:	bf00      	nop
 800420c:	08005617 	.word	0x08005617
 8004210:	0800562e 	.word	0x0800562e

08004214 <_Bfree>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	69c6      	ldr	r6, [r0, #28]
 8004218:	4605      	mov	r5, r0
 800421a:	460c      	mov	r4, r1
 800421c:	b976      	cbnz	r6, 800423c <_Bfree+0x28>
 800421e:	2010      	movs	r0, #16
 8004220:	f000 fd50 	bl	8004cc4 <malloc>
 8004224:	4602      	mov	r2, r0
 8004226:	61e8      	str	r0, [r5, #28]
 8004228:	b920      	cbnz	r0, 8004234 <_Bfree+0x20>
 800422a:	218f      	movs	r1, #143	@ 0x8f
 800422c:	4b08      	ldr	r3, [pc, #32]	@ (8004250 <_Bfree+0x3c>)
 800422e:	4809      	ldr	r0, [pc, #36]	@ (8004254 <_Bfree+0x40>)
 8004230:	f000 fd16 	bl	8004c60 <__assert_func>
 8004234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004238:	6006      	str	r6, [r0, #0]
 800423a:	60c6      	str	r6, [r0, #12]
 800423c:	b13c      	cbz	r4, 800424e <_Bfree+0x3a>
 800423e:	69eb      	ldr	r3, [r5, #28]
 8004240:	6862      	ldr	r2, [r4, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004248:	6021      	str	r1, [r4, #0]
 800424a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	08005617 	.word	0x08005617
 8004254:	0800562e 	.word	0x0800562e

08004258 <__multadd>:
 8004258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800425c:	4607      	mov	r7, r0
 800425e:	460c      	mov	r4, r1
 8004260:	461e      	mov	r6, r3
 8004262:	2000      	movs	r0, #0
 8004264:	690d      	ldr	r5, [r1, #16]
 8004266:	f101 0c14 	add.w	ip, r1, #20
 800426a:	f8dc 3000 	ldr.w	r3, [ip]
 800426e:	3001      	adds	r0, #1
 8004270:	b299      	uxth	r1, r3
 8004272:	fb02 6101 	mla	r1, r2, r1, r6
 8004276:	0c1e      	lsrs	r6, r3, #16
 8004278:	0c0b      	lsrs	r3, r1, #16
 800427a:	fb02 3306 	mla	r3, r2, r6, r3
 800427e:	b289      	uxth	r1, r1
 8004280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004284:	4285      	cmp	r5, r0
 8004286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800428a:	f84c 1b04 	str.w	r1, [ip], #4
 800428e:	dcec      	bgt.n	800426a <__multadd+0x12>
 8004290:	b30e      	cbz	r6, 80042d6 <__multadd+0x7e>
 8004292:	68a3      	ldr	r3, [r4, #8]
 8004294:	42ab      	cmp	r3, r5
 8004296:	dc19      	bgt.n	80042cc <__multadd+0x74>
 8004298:	6861      	ldr	r1, [r4, #4]
 800429a:	4638      	mov	r0, r7
 800429c:	3101      	adds	r1, #1
 800429e:	f7ff ff79 	bl	8004194 <_Balloc>
 80042a2:	4680      	mov	r8, r0
 80042a4:	b928      	cbnz	r0, 80042b2 <__multadd+0x5a>
 80042a6:	4602      	mov	r2, r0
 80042a8:	21ba      	movs	r1, #186	@ 0xba
 80042aa:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <__multadd+0x84>)
 80042ac:	480c      	ldr	r0, [pc, #48]	@ (80042e0 <__multadd+0x88>)
 80042ae:	f000 fcd7 	bl	8004c60 <__assert_func>
 80042b2:	6922      	ldr	r2, [r4, #16]
 80042b4:	f104 010c 	add.w	r1, r4, #12
 80042b8:	3202      	adds	r2, #2
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	300c      	adds	r0, #12
 80042be:	f7ff fb12 	bl	80038e6 <memcpy>
 80042c2:	4621      	mov	r1, r4
 80042c4:	4638      	mov	r0, r7
 80042c6:	f7ff ffa5 	bl	8004214 <_Bfree>
 80042ca:	4644      	mov	r4, r8
 80042cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80042d0:	3501      	adds	r5, #1
 80042d2:	615e      	str	r6, [r3, #20]
 80042d4:	6125      	str	r5, [r4, #16]
 80042d6:	4620      	mov	r0, r4
 80042d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042dc:	080055a6 	.word	0x080055a6
 80042e0:	0800562e 	.word	0x0800562e

080042e4 <__s2b>:
 80042e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e8:	4615      	mov	r5, r2
 80042ea:	2209      	movs	r2, #9
 80042ec:	461f      	mov	r7, r3
 80042ee:	3308      	adds	r3, #8
 80042f0:	460c      	mov	r4, r1
 80042f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80042f6:	4606      	mov	r6, r0
 80042f8:	2201      	movs	r2, #1
 80042fa:	2100      	movs	r1, #0
 80042fc:	429a      	cmp	r2, r3
 80042fe:	db09      	blt.n	8004314 <__s2b+0x30>
 8004300:	4630      	mov	r0, r6
 8004302:	f7ff ff47 	bl	8004194 <_Balloc>
 8004306:	b940      	cbnz	r0, 800431a <__s2b+0x36>
 8004308:	4602      	mov	r2, r0
 800430a:	21d3      	movs	r1, #211	@ 0xd3
 800430c:	4b18      	ldr	r3, [pc, #96]	@ (8004370 <__s2b+0x8c>)
 800430e:	4819      	ldr	r0, [pc, #100]	@ (8004374 <__s2b+0x90>)
 8004310:	f000 fca6 	bl	8004c60 <__assert_func>
 8004314:	0052      	lsls	r2, r2, #1
 8004316:	3101      	adds	r1, #1
 8004318:	e7f0      	b.n	80042fc <__s2b+0x18>
 800431a:	9b08      	ldr	r3, [sp, #32]
 800431c:	2d09      	cmp	r5, #9
 800431e:	6143      	str	r3, [r0, #20]
 8004320:	f04f 0301 	mov.w	r3, #1
 8004324:	6103      	str	r3, [r0, #16]
 8004326:	dd16      	ble.n	8004356 <__s2b+0x72>
 8004328:	f104 0909 	add.w	r9, r4, #9
 800432c:	46c8      	mov	r8, r9
 800432e:	442c      	add	r4, r5
 8004330:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004334:	4601      	mov	r1, r0
 8004336:	220a      	movs	r2, #10
 8004338:	4630      	mov	r0, r6
 800433a:	3b30      	subs	r3, #48	@ 0x30
 800433c:	f7ff ff8c 	bl	8004258 <__multadd>
 8004340:	45a0      	cmp	r8, r4
 8004342:	d1f5      	bne.n	8004330 <__s2b+0x4c>
 8004344:	f1a5 0408 	sub.w	r4, r5, #8
 8004348:	444c      	add	r4, r9
 800434a:	1b2d      	subs	r5, r5, r4
 800434c:	1963      	adds	r3, r4, r5
 800434e:	42bb      	cmp	r3, r7
 8004350:	db04      	blt.n	800435c <__s2b+0x78>
 8004352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004356:	2509      	movs	r5, #9
 8004358:	340a      	adds	r4, #10
 800435a:	e7f6      	b.n	800434a <__s2b+0x66>
 800435c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004360:	4601      	mov	r1, r0
 8004362:	220a      	movs	r2, #10
 8004364:	4630      	mov	r0, r6
 8004366:	3b30      	subs	r3, #48	@ 0x30
 8004368:	f7ff ff76 	bl	8004258 <__multadd>
 800436c:	e7ee      	b.n	800434c <__s2b+0x68>
 800436e:	bf00      	nop
 8004370:	080055a6 	.word	0x080055a6
 8004374:	0800562e 	.word	0x0800562e

08004378 <__hi0bits>:
 8004378:	4603      	mov	r3, r0
 800437a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800437e:	bf3a      	itte	cc
 8004380:	0403      	lslcc	r3, r0, #16
 8004382:	2010      	movcc	r0, #16
 8004384:	2000      	movcs	r0, #0
 8004386:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800438a:	bf3c      	itt	cc
 800438c:	021b      	lslcc	r3, r3, #8
 800438e:	3008      	addcc	r0, #8
 8004390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004394:	bf3c      	itt	cc
 8004396:	011b      	lslcc	r3, r3, #4
 8004398:	3004      	addcc	r0, #4
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439e:	bf3c      	itt	cc
 80043a0:	009b      	lslcc	r3, r3, #2
 80043a2:	3002      	addcc	r0, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	db05      	blt.n	80043b4 <__hi0bits+0x3c>
 80043a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80043ac:	f100 0001 	add.w	r0, r0, #1
 80043b0:	bf08      	it	eq
 80043b2:	2020      	moveq	r0, #32
 80043b4:	4770      	bx	lr

080043b6 <__lo0bits>:
 80043b6:	6803      	ldr	r3, [r0, #0]
 80043b8:	4602      	mov	r2, r0
 80043ba:	f013 0007 	ands.w	r0, r3, #7
 80043be:	d00b      	beq.n	80043d8 <__lo0bits+0x22>
 80043c0:	07d9      	lsls	r1, r3, #31
 80043c2:	d421      	bmi.n	8004408 <__lo0bits+0x52>
 80043c4:	0798      	lsls	r0, r3, #30
 80043c6:	bf49      	itett	mi
 80043c8:	085b      	lsrmi	r3, r3, #1
 80043ca:	089b      	lsrpl	r3, r3, #2
 80043cc:	2001      	movmi	r0, #1
 80043ce:	6013      	strmi	r3, [r2, #0]
 80043d0:	bf5c      	itt	pl
 80043d2:	2002      	movpl	r0, #2
 80043d4:	6013      	strpl	r3, [r2, #0]
 80043d6:	4770      	bx	lr
 80043d8:	b299      	uxth	r1, r3
 80043da:	b909      	cbnz	r1, 80043e0 <__lo0bits+0x2a>
 80043dc:	2010      	movs	r0, #16
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	b2d9      	uxtb	r1, r3
 80043e2:	b909      	cbnz	r1, 80043e8 <__lo0bits+0x32>
 80043e4:	3008      	adds	r0, #8
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	0719      	lsls	r1, r3, #28
 80043ea:	bf04      	itt	eq
 80043ec:	091b      	lsreq	r3, r3, #4
 80043ee:	3004      	addeq	r0, #4
 80043f0:	0799      	lsls	r1, r3, #30
 80043f2:	bf04      	itt	eq
 80043f4:	089b      	lsreq	r3, r3, #2
 80043f6:	3002      	addeq	r0, #2
 80043f8:	07d9      	lsls	r1, r3, #31
 80043fa:	d403      	bmi.n	8004404 <__lo0bits+0x4e>
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	f100 0001 	add.w	r0, r0, #1
 8004402:	d003      	beq.n	800440c <__lo0bits+0x56>
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4770      	bx	lr
 8004408:	2000      	movs	r0, #0
 800440a:	4770      	bx	lr
 800440c:	2020      	movs	r0, #32
 800440e:	4770      	bx	lr

08004410 <__i2b>:
 8004410:	b510      	push	{r4, lr}
 8004412:	460c      	mov	r4, r1
 8004414:	2101      	movs	r1, #1
 8004416:	f7ff febd 	bl	8004194 <_Balloc>
 800441a:	4602      	mov	r2, r0
 800441c:	b928      	cbnz	r0, 800442a <__i2b+0x1a>
 800441e:	f240 1145 	movw	r1, #325	@ 0x145
 8004422:	4b04      	ldr	r3, [pc, #16]	@ (8004434 <__i2b+0x24>)
 8004424:	4804      	ldr	r0, [pc, #16]	@ (8004438 <__i2b+0x28>)
 8004426:	f000 fc1b 	bl	8004c60 <__assert_func>
 800442a:	2301      	movs	r3, #1
 800442c:	6144      	str	r4, [r0, #20]
 800442e:	6103      	str	r3, [r0, #16]
 8004430:	bd10      	pop	{r4, pc}
 8004432:	bf00      	nop
 8004434:	080055a6 	.word	0x080055a6
 8004438:	0800562e 	.word	0x0800562e

0800443c <__multiply>:
 800443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004440:	4617      	mov	r7, r2
 8004442:	690a      	ldr	r2, [r1, #16]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4689      	mov	r9, r1
 8004448:	429a      	cmp	r2, r3
 800444a:	bfa2      	ittt	ge
 800444c:	463b      	movge	r3, r7
 800444e:	460f      	movge	r7, r1
 8004450:	4699      	movge	r9, r3
 8004452:	693d      	ldr	r5, [r7, #16]
 8004454:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	eb05 060a 	add.w	r6, r5, sl
 8004460:	42b3      	cmp	r3, r6
 8004462:	b085      	sub	sp, #20
 8004464:	bfb8      	it	lt
 8004466:	3101      	addlt	r1, #1
 8004468:	f7ff fe94 	bl	8004194 <_Balloc>
 800446c:	b930      	cbnz	r0, 800447c <__multiply+0x40>
 800446e:	4602      	mov	r2, r0
 8004470:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004474:	4b40      	ldr	r3, [pc, #256]	@ (8004578 <__multiply+0x13c>)
 8004476:	4841      	ldr	r0, [pc, #260]	@ (800457c <__multiply+0x140>)
 8004478:	f000 fbf2 	bl	8004c60 <__assert_func>
 800447c:	f100 0414 	add.w	r4, r0, #20
 8004480:	4623      	mov	r3, r4
 8004482:	2200      	movs	r2, #0
 8004484:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004488:	4573      	cmp	r3, lr
 800448a:	d320      	bcc.n	80044ce <__multiply+0x92>
 800448c:	f107 0814 	add.w	r8, r7, #20
 8004490:	f109 0114 	add.w	r1, r9, #20
 8004494:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004498:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800449c:	9302      	str	r3, [sp, #8]
 800449e:	1beb      	subs	r3, r5, r7
 80044a0:	3b15      	subs	r3, #21
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	3304      	adds	r3, #4
 80044a8:	3715      	adds	r7, #21
 80044aa:	42bd      	cmp	r5, r7
 80044ac:	bf38      	it	cc
 80044ae:	2304      	movcc	r3, #4
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	9b02      	ldr	r3, [sp, #8]
 80044b4:	9103      	str	r1, [sp, #12]
 80044b6:	428b      	cmp	r3, r1
 80044b8:	d80c      	bhi.n	80044d4 <__multiply+0x98>
 80044ba:	2e00      	cmp	r6, #0
 80044bc:	dd03      	ble.n	80044c6 <__multiply+0x8a>
 80044be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d055      	beq.n	8004572 <__multiply+0x136>
 80044c6:	6106      	str	r6, [r0, #16]
 80044c8:	b005      	add	sp, #20
 80044ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ce:	f843 2b04 	str.w	r2, [r3], #4
 80044d2:	e7d9      	b.n	8004488 <__multiply+0x4c>
 80044d4:	f8b1 a000 	ldrh.w	sl, [r1]
 80044d8:	f1ba 0f00 	cmp.w	sl, #0
 80044dc:	d01f      	beq.n	800451e <__multiply+0xe2>
 80044de:	46c4      	mov	ip, r8
 80044e0:	46a1      	mov	r9, r4
 80044e2:	2700      	movs	r7, #0
 80044e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80044e8:	f8d9 3000 	ldr.w	r3, [r9]
 80044ec:	fa1f fb82 	uxth.w	fp, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	fb0a 330b 	mla	r3, sl, fp, r3
 80044f6:	443b      	add	r3, r7
 80044f8:	f8d9 7000 	ldr.w	r7, [r9]
 80044fc:	0c12      	lsrs	r2, r2, #16
 80044fe:	0c3f      	lsrs	r7, r7, #16
 8004500:	fb0a 7202 	mla	r2, sl, r2, r7
 8004504:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004508:	b29b      	uxth	r3, r3
 800450a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800450e:	4565      	cmp	r5, ip
 8004510:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004514:	f849 3b04 	str.w	r3, [r9], #4
 8004518:	d8e4      	bhi.n	80044e4 <__multiply+0xa8>
 800451a:	9b01      	ldr	r3, [sp, #4]
 800451c:	50e7      	str	r7, [r4, r3]
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	3104      	adds	r1, #4
 8004522:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004526:	f1b9 0f00 	cmp.w	r9, #0
 800452a:	d020      	beq.n	800456e <__multiply+0x132>
 800452c:	4647      	mov	r7, r8
 800452e:	46a4      	mov	ip, r4
 8004530:	f04f 0a00 	mov.w	sl, #0
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	f8b7 b000 	ldrh.w	fp, [r7]
 800453a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800453e:	b29b      	uxth	r3, r3
 8004540:	fb09 220b 	mla	r2, r9, fp, r2
 8004544:	4452      	add	r2, sl
 8004546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800454a:	f84c 3b04 	str.w	r3, [ip], #4
 800454e:	f857 3b04 	ldr.w	r3, [r7], #4
 8004552:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004556:	f8bc 3000 	ldrh.w	r3, [ip]
 800455a:	42bd      	cmp	r5, r7
 800455c:	fb09 330a 	mla	r3, r9, sl, r3
 8004560:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004564:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004568:	d8e5      	bhi.n	8004536 <__multiply+0xfa>
 800456a:	9a01      	ldr	r2, [sp, #4]
 800456c:	50a3      	str	r3, [r4, r2]
 800456e:	3404      	adds	r4, #4
 8004570:	e79f      	b.n	80044b2 <__multiply+0x76>
 8004572:	3e01      	subs	r6, #1
 8004574:	e7a1      	b.n	80044ba <__multiply+0x7e>
 8004576:	bf00      	nop
 8004578:	080055a6 	.word	0x080055a6
 800457c:	0800562e 	.word	0x0800562e

08004580 <__pow5mult>:
 8004580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004584:	4615      	mov	r5, r2
 8004586:	f012 0203 	ands.w	r2, r2, #3
 800458a:	4607      	mov	r7, r0
 800458c:	460e      	mov	r6, r1
 800458e:	d007      	beq.n	80045a0 <__pow5mult+0x20>
 8004590:	4c25      	ldr	r4, [pc, #148]	@ (8004628 <__pow5mult+0xa8>)
 8004592:	3a01      	subs	r2, #1
 8004594:	2300      	movs	r3, #0
 8004596:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800459a:	f7ff fe5d 	bl	8004258 <__multadd>
 800459e:	4606      	mov	r6, r0
 80045a0:	10ad      	asrs	r5, r5, #2
 80045a2:	d03d      	beq.n	8004620 <__pow5mult+0xa0>
 80045a4:	69fc      	ldr	r4, [r7, #28]
 80045a6:	b97c      	cbnz	r4, 80045c8 <__pow5mult+0x48>
 80045a8:	2010      	movs	r0, #16
 80045aa:	f000 fb8b 	bl	8004cc4 <malloc>
 80045ae:	4602      	mov	r2, r0
 80045b0:	61f8      	str	r0, [r7, #28]
 80045b2:	b928      	cbnz	r0, 80045c0 <__pow5mult+0x40>
 80045b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80045b8:	4b1c      	ldr	r3, [pc, #112]	@ (800462c <__pow5mult+0xac>)
 80045ba:	481d      	ldr	r0, [pc, #116]	@ (8004630 <__pow5mult+0xb0>)
 80045bc:	f000 fb50 	bl	8004c60 <__assert_func>
 80045c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80045c4:	6004      	str	r4, [r0, #0]
 80045c6:	60c4      	str	r4, [r0, #12]
 80045c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80045cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80045d0:	b94c      	cbnz	r4, 80045e6 <__pow5mult+0x66>
 80045d2:	f240 2171 	movw	r1, #625	@ 0x271
 80045d6:	4638      	mov	r0, r7
 80045d8:	f7ff ff1a 	bl	8004410 <__i2b>
 80045dc:	2300      	movs	r3, #0
 80045de:	4604      	mov	r4, r0
 80045e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80045e4:	6003      	str	r3, [r0, #0]
 80045e6:	f04f 0900 	mov.w	r9, #0
 80045ea:	07eb      	lsls	r3, r5, #31
 80045ec:	d50a      	bpl.n	8004604 <__pow5mult+0x84>
 80045ee:	4631      	mov	r1, r6
 80045f0:	4622      	mov	r2, r4
 80045f2:	4638      	mov	r0, r7
 80045f4:	f7ff ff22 	bl	800443c <__multiply>
 80045f8:	4680      	mov	r8, r0
 80045fa:	4631      	mov	r1, r6
 80045fc:	4638      	mov	r0, r7
 80045fe:	f7ff fe09 	bl	8004214 <_Bfree>
 8004602:	4646      	mov	r6, r8
 8004604:	106d      	asrs	r5, r5, #1
 8004606:	d00b      	beq.n	8004620 <__pow5mult+0xa0>
 8004608:	6820      	ldr	r0, [r4, #0]
 800460a:	b938      	cbnz	r0, 800461c <__pow5mult+0x9c>
 800460c:	4622      	mov	r2, r4
 800460e:	4621      	mov	r1, r4
 8004610:	4638      	mov	r0, r7
 8004612:	f7ff ff13 	bl	800443c <__multiply>
 8004616:	6020      	str	r0, [r4, #0]
 8004618:	f8c0 9000 	str.w	r9, [r0]
 800461c:	4604      	mov	r4, r0
 800461e:	e7e4      	b.n	80045ea <__pow5mult+0x6a>
 8004620:	4630      	mov	r0, r6
 8004622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004626:	bf00      	nop
 8004628:	08005748 	.word	0x08005748
 800462c:	08005617 	.word	0x08005617
 8004630:	0800562e 	.word	0x0800562e

08004634 <__lshift>:
 8004634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004638:	460c      	mov	r4, r1
 800463a:	4607      	mov	r7, r0
 800463c:	4691      	mov	r9, r2
 800463e:	6923      	ldr	r3, [r4, #16]
 8004640:	6849      	ldr	r1, [r1, #4]
 8004642:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004646:	68a3      	ldr	r3, [r4, #8]
 8004648:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800464c:	f108 0601 	add.w	r6, r8, #1
 8004650:	42b3      	cmp	r3, r6
 8004652:	db0b      	blt.n	800466c <__lshift+0x38>
 8004654:	4638      	mov	r0, r7
 8004656:	f7ff fd9d 	bl	8004194 <_Balloc>
 800465a:	4605      	mov	r5, r0
 800465c:	b948      	cbnz	r0, 8004672 <__lshift+0x3e>
 800465e:	4602      	mov	r2, r0
 8004660:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004664:	4b27      	ldr	r3, [pc, #156]	@ (8004704 <__lshift+0xd0>)
 8004666:	4828      	ldr	r0, [pc, #160]	@ (8004708 <__lshift+0xd4>)
 8004668:	f000 fafa 	bl	8004c60 <__assert_func>
 800466c:	3101      	adds	r1, #1
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	e7ee      	b.n	8004650 <__lshift+0x1c>
 8004672:	2300      	movs	r3, #0
 8004674:	f100 0114 	add.w	r1, r0, #20
 8004678:	f100 0210 	add.w	r2, r0, #16
 800467c:	4618      	mov	r0, r3
 800467e:	4553      	cmp	r3, sl
 8004680:	db33      	blt.n	80046ea <__lshift+0xb6>
 8004682:	6920      	ldr	r0, [r4, #16]
 8004684:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004688:	f104 0314 	add.w	r3, r4, #20
 800468c:	f019 091f 	ands.w	r9, r9, #31
 8004690:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004694:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004698:	d02b      	beq.n	80046f2 <__lshift+0xbe>
 800469a:	468a      	mov	sl, r1
 800469c:	2200      	movs	r2, #0
 800469e:	f1c9 0e20 	rsb	lr, r9, #32
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	fa00 f009 	lsl.w	r0, r0, r9
 80046a8:	4310      	orrs	r0, r2
 80046aa:	f84a 0b04 	str.w	r0, [sl], #4
 80046ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b2:	459c      	cmp	ip, r3
 80046b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80046b8:	d8f3      	bhi.n	80046a2 <__lshift+0x6e>
 80046ba:	ebac 0304 	sub.w	r3, ip, r4
 80046be:	3b15      	subs	r3, #21
 80046c0:	f023 0303 	bic.w	r3, r3, #3
 80046c4:	3304      	adds	r3, #4
 80046c6:	f104 0015 	add.w	r0, r4, #21
 80046ca:	4560      	cmp	r0, ip
 80046cc:	bf88      	it	hi
 80046ce:	2304      	movhi	r3, #4
 80046d0:	50ca      	str	r2, [r1, r3]
 80046d2:	b10a      	cbz	r2, 80046d8 <__lshift+0xa4>
 80046d4:	f108 0602 	add.w	r6, r8, #2
 80046d8:	3e01      	subs	r6, #1
 80046da:	4638      	mov	r0, r7
 80046dc:	4621      	mov	r1, r4
 80046de:	612e      	str	r6, [r5, #16]
 80046e0:	f7ff fd98 	bl	8004214 <_Bfree>
 80046e4:	4628      	mov	r0, r5
 80046e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80046ee:	3301      	adds	r3, #1
 80046f0:	e7c5      	b.n	800467e <__lshift+0x4a>
 80046f2:	3904      	subs	r1, #4
 80046f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046f8:	459c      	cmp	ip, r3
 80046fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80046fe:	d8f9      	bhi.n	80046f4 <__lshift+0xc0>
 8004700:	e7ea      	b.n	80046d8 <__lshift+0xa4>
 8004702:	bf00      	nop
 8004704:	080055a6 	.word	0x080055a6
 8004708:	0800562e 	.word	0x0800562e

0800470c <__mcmp>:
 800470c:	4603      	mov	r3, r0
 800470e:	690a      	ldr	r2, [r1, #16]
 8004710:	6900      	ldr	r0, [r0, #16]
 8004712:	b530      	push	{r4, r5, lr}
 8004714:	1a80      	subs	r0, r0, r2
 8004716:	d10e      	bne.n	8004736 <__mcmp+0x2a>
 8004718:	3314      	adds	r3, #20
 800471a:	3114      	adds	r1, #20
 800471c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004720:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004724:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004728:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800472c:	4295      	cmp	r5, r2
 800472e:	d003      	beq.n	8004738 <__mcmp+0x2c>
 8004730:	d205      	bcs.n	800473e <__mcmp+0x32>
 8004732:	f04f 30ff 	mov.w	r0, #4294967295
 8004736:	bd30      	pop	{r4, r5, pc}
 8004738:	42a3      	cmp	r3, r4
 800473a:	d3f3      	bcc.n	8004724 <__mcmp+0x18>
 800473c:	e7fb      	b.n	8004736 <__mcmp+0x2a>
 800473e:	2001      	movs	r0, #1
 8004740:	e7f9      	b.n	8004736 <__mcmp+0x2a>
	...

08004744 <__mdiff>:
 8004744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	4689      	mov	r9, r1
 800474a:	4606      	mov	r6, r0
 800474c:	4611      	mov	r1, r2
 800474e:	4648      	mov	r0, r9
 8004750:	4614      	mov	r4, r2
 8004752:	f7ff ffdb 	bl	800470c <__mcmp>
 8004756:	1e05      	subs	r5, r0, #0
 8004758:	d112      	bne.n	8004780 <__mdiff+0x3c>
 800475a:	4629      	mov	r1, r5
 800475c:	4630      	mov	r0, r6
 800475e:	f7ff fd19 	bl	8004194 <_Balloc>
 8004762:	4602      	mov	r2, r0
 8004764:	b928      	cbnz	r0, 8004772 <__mdiff+0x2e>
 8004766:	f240 2137 	movw	r1, #567	@ 0x237
 800476a:	4b3e      	ldr	r3, [pc, #248]	@ (8004864 <__mdiff+0x120>)
 800476c:	483e      	ldr	r0, [pc, #248]	@ (8004868 <__mdiff+0x124>)
 800476e:	f000 fa77 	bl	8004c60 <__assert_func>
 8004772:	2301      	movs	r3, #1
 8004774:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004778:	4610      	mov	r0, r2
 800477a:	b003      	add	sp, #12
 800477c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004780:	bfbc      	itt	lt
 8004782:	464b      	movlt	r3, r9
 8004784:	46a1      	movlt	r9, r4
 8004786:	4630      	mov	r0, r6
 8004788:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800478c:	bfba      	itte	lt
 800478e:	461c      	movlt	r4, r3
 8004790:	2501      	movlt	r5, #1
 8004792:	2500      	movge	r5, #0
 8004794:	f7ff fcfe 	bl	8004194 <_Balloc>
 8004798:	4602      	mov	r2, r0
 800479a:	b918      	cbnz	r0, 80047a4 <__mdiff+0x60>
 800479c:	f240 2145 	movw	r1, #581	@ 0x245
 80047a0:	4b30      	ldr	r3, [pc, #192]	@ (8004864 <__mdiff+0x120>)
 80047a2:	e7e3      	b.n	800476c <__mdiff+0x28>
 80047a4:	f100 0b14 	add.w	fp, r0, #20
 80047a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80047ac:	f109 0310 	add.w	r3, r9, #16
 80047b0:	60c5      	str	r5, [r0, #12]
 80047b2:	f04f 0c00 	mov.w	ip, #0
 80047b6:	f109 0514 	add.w	r5, r9, #20
 80047ba:	46d9      	mov	r9, fp
 80047bc:	6926      	ldr	r6, [r4, #16]
 80047be:	f104 0e14 	add.w	lr, r4, #20
 80047c2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80047c6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	9b01      	ldr	r3, [sp, #4]
 80047ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80047d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80047d6:	b281      	uxth	r1, r0
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	fa1f f38a 	uxth.w	r3, sl
 80047de:	1a5b      	subs	r3, r3, r1
 80047e0:	0c00      	lsrs	r0, r0, #16
 80047e2:	4463      	add	r3, ip
 80047e4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80047e8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80047f2:	4576      	cmp	r6, lr
 80047f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80047f8:	f849 3b04 	str.w	r3, [r9], #4
 80047fc:	d8e6      	bhi.n	80047cc <__mdiff+0x88>
 80047fe:	1b33      	subs	r3, r6, r4
 8004800:	3b15      	subs	r3, #21
 8004802:	f023 0303 	bic.w	r3, r3, #3
 8004806:	3415      	adds	r4, #21
 8004808:	3304      	adds	r3, #4
 800480a:	42a6      	cmp	r6, r4
 800480c:	bf38      	it	cc
 800480e:	2304      	movcc	r3, #4
 8004810:	441d      	add	r5, r3
 8004812:	445b      	add	r3, fp
 8004814:	461e      	mov	r6, r3
 8004816:	462c      	mov	r4, r5
 8004818:	4544      	cmp	r4, r8
 800481a:	d30e      	bcc.n	800483a <__mdiff+0xf6>
 800481c:	f108 0103 	add.w	r1, r8, #3
 8004820:	1b49      	subs	r1, r1, r5
 8004822:	f021 0103 	bic.w	r1, r1, #3
 8004826:	3d03      	subs	r5, #3
 8004828:	45a8      	cmp	r8, r5
 800482a:	bf38      	it	cc
 800482c:	2100      	movcc	r1, #0
 800482e:	440b      	add	r3, r1
 8004830:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004834:	b199      	cbz	r1, 800485e <__mdiff+0x11a>
 8004836:	6117      	str	r7, [r2, #16]
 8004838:	e79e      	b.n	8004778 <__mdiff+0x34>
 800483a:	46e6      	mov	lr, ip
 800483c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004840:	fa1f fc81 	uxth.w	ip, r1
 8004844:	44f4      	add	ip, lr
 8004846:	0c08      	lsrs	r0, r1, #16
 8004848:	4471      	add	r1, lr
 800484a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800484e:	b289      	uxth	r1, r1
 8004850:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004854:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004858:	f846 1b04 	str.w	r1, [r6], #4
 800485c:	e7dc      	b.n	8004818 <__mdiff+0xd4>
 800485e:	3f01      	subs	r7, #1
 8004860:	e7e6      	b.n	8004830 <__mdiff+0xec>
 8004862:	bf00      	nop
 8004864:	080055a6 	.word	0x080055a6
 8004868:	0800562e 	.word	0x0800562e

0800486c <__ulp>:
 800486c:	4b0e      	ldr	r3, [pc, #56]	@ (80048a8 <__ulp+0x3c>)
 800486e:	400b      	ands	r3, r1
 8004870:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8004874:	2b00      	cmp	r3, #0
 8004876:	dc08      	bgt.n	800488a <__ulp+0x1e>
 8004878:	425b      	negs	r3, r3
 800487a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800487e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004882:	da04      	bge.n	800488e <__ulp+0x22>
 8004884:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004888:	4113      	asrs	r3, r2
 800488a:	2200      	movs	r2, #0
 800488c:	e008      	b.n	80048a0 <__ulp+0x34>
 800488e:	f1a2 0314 	sub.w	r3, r2, #20
 8004892:	2b1e      	cmp	r3, #30
 8004894:	bfd6      	itet	le
 8004896:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800489a:	2201      	movgt	r2, #1
 800489c:	40da      	lsrle	r2, r3
 800489e:	2300      	movs	r3, #0
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	7ff00000 	.word	0x7ff00000

080048ac <__b2d>:
 80048ac:	6902      	ldr	r2, [r0, #16]
 80048ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b0:	f100 0614 	add.w	r6, r0, #20
 80048b4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80048b8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80048bc:	4f1e      	ldr	r7, [pc, #120]	@ (8004938 <__b2d+0x8c>)
 80048be:	4620      	mov	r0, r4
 80048c0:	f7ff fd5a 	bl	8004378 <__hi0bits>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f1c0 0020 	rsb	r0, r0, #32
 80048ca:	2b0a      	cmp	r3, #10
 80048cc:	f1a2 0504 	sub.w	r5, r2, #4
 80048d0:	6008      	str	r0, [r1, #0]
 80048d2:	dc12      	bgt.n	80048fa <__b2d+0x4e>
 80048d4:	42ae      	cmp	r6, r5
 80048d6:	bf2c      	ite	cs
 80048d8:	2200      	movcs	r2, #0
 80048da:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80048de:	f1c3 0c0b 	rsb	ip, r3, #11
 80048e2:	3315      	adds	r3, #21
 80048e4:	fa24 fe0c 	lsr.w	lr, r4, ip
 80048e8:	fa04 f303 	lsl.w	r3, r4, r3
 80048ec:	fa22 f20c 	lsr.w	r2, r2, ip
 80048f0:	ea4e 0107 	orr.w	r1, lr, r7
 80048f4:	431a      	orrs	r2, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048fa:	42ae      	cmp	r6, r5
 80048fc:	bf36      	itet	cc
 80048fe:	f1a2 0508 	subcc.w	r5, r2, #8
 8004902:	2200      	movcs	r2, #0
 8004904:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004908:	3b0b      	subs	r3, #11
 800490a:	d012      	beq.n	8004932 <__b2d+0x86>
 800490c:	f1c3 0720 	rsb	r7, r3, #32
 8004910:	fa22 f107 	lsr.w	r1, r2, r7
 8004914:	409c      	lsls	r4, r3
 8004916:	430c      	orrs	r4, r1
 8004918:	42b5      	cmp	r5, r6
 800491a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800491e:	bf94      	ite	ls
 8004920:	2400      	movls	r4, #0
 8004922:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8004926:	409a      	lsls	r2, r3
 8004928:	40fc      	lsrs	r4, r7
 800492a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800492e:	4322      	orrs	r2, r4
 8004930:	e7e1      	b.n	80048f6 <__b2d+0x4a>
 8004932:	ea44 0107 	orr.w	r1, r4, r7
 8004936:	e7de      	b.n	80048f6 <__b2d+0x4a>
 8004938:	3ff00000 	.word	0x3ff00000

0800493c <__d2b>:
 800493c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004940:	2101      	movs	r1, #1
 8004942:	4690      	mov	r8, r2
 8004944:	4699      	mov	r9, r3
 8004946:	9e08      	ldr	r6, [sp, #32]
 8004948:	f7ff fc24 	bl	8004194 <_Balloc>
 800494c:	4604      	mov	r4, r0
 800494e:	b930      	cbnz	r0, 800495e <__d2b+0x22>
 8004950:	4602      	mov	r2, r0
 8004952:	f240 310f 	movw	r1, #783	@ 0x30f
 8004956:	4b23      	ldr	r3, [pc, #140]	@ (80049e4 <__d2b+0xa8>)
 8004958:	4823      	ldr	r0, [pc, #140]	@ (80049e8 <__d2b+0xac>)
 800495a:	f000 f981 	bl	8004c60 <__assert_func>
 800495e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004962:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004966:	b10d      	cbz	r5, 800496c <__d2b+0x30>
 8004968:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	f1b8 0300 	subs.w	r3, r8, #0
 8004972:	d024      	beq.n	80049be <__d2b+0x82>
 8004974:	4668      	mov	r0, sp
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	f7ff fd1d 	bl	80043b6 <__lo0bits>
 800497c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004980:	b1d8      	cbz	r0, 80049ba <__d2b+0x7e>
 8004982:	f1c0 0320 	rsb	r3, r0, #32
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	430b      	orrs	r3, r1
 800498c:	40c2      	lsrs	r2, r0
 800498e:	6163      	str	r3, [r4, #20]
 8004990:	9201      	str	r2, [sp, #4]
 8004992:	9b01      	ldr	r3, [sp, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf0c      	ite	eq
 8004998:	2201      	moveq	r2, #1
 800499a:	2202      	movne	r2, #2
 800499c:	61a3      	str	r3, [r4, #24]
 800499e:	6122      	str	r2, [r4, #16]
 80049a0:	b1ad      	cbz	r5, 80049ce <__d2b+0x92>
 80049a2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80049a6:	4405      	add	r5, r0
 80049a8:	6035      	str	r5, [r6, #0]
 80049aa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80049ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049b0:	6018      	str	r0, [r3, #0]
 80049b2:	4620      	mov	r0, r4
 80049b4:	b002      	add	sp, #8
 80049b6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80049ba:	6161      	str	r1, [r4, #20]
 80049bc:	e7e9      	b.n	8004992 <__d2b+0x56>
 80049be:	a801      	add	r0, sp, #4
 80049c0:	f7ff fcf9 	bl	80043b6 <__lo0bits>
 80049c4:	9b01      	ldr	r3, [sp, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	6163      	str	r3, [r4, #20]
 80049ca:	3020      	adds	r0, #32
 80049cc:	e7e7      	b.n	800499e <__d2b+0x62>
 80049ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80049d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80049d6:	6030      	str	r0, [r6, #0]
 80049d8:	6918      	ldr	r0, [r3, #16]
 80049da:	f7ff fccd 	bl	8004378 <__hi0bits>
 80049de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80049e2:	e7e4      	b.n	80049ae <__d2b+0x72>
 80049e4:	080055a6 	.word	0x080055a6
 80049e8:	0800562e 	.word	0x0800562e

080049ec <__ratio>:
 80049ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f0:	b085      	sub	sp, #20
 80049f2:	e9cd 1000 	strd	r1, r0, [sp]
 80049f6:	a902      	add	r1, sp, #8
 80049f8:	f7ff ff58 	bl	80048ac <__b2d>
 80049fc:	468b      	mov	fp, r1
 80049fe:	4606      	mov	r6, r0
 8004a00:	460f      	mov	r7, r1
 8004a02:	9800      	ldr	r0, [sp, #0]
 8004a04:	a903      	add	r1, sp, #12
 8004a06:	f7ff ff51 	bl	80048ac <__b2d>
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	9b01      	ldr	r3, [sp, #4]
 8004a0e:	4689      	mov	r9, r1
 8004a10:	6919      	ldr	r1, [r3, #16]
 8004a12:	9b00      	ldr	r3, [sp, #0]
 8004a14:	4604      	mov	r4, r0
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	4630      	mov	r0, r6
 8004a1a:	1ac9      	subs	r1, r1, r3
 8004a1c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bfcd      	iteet	gt
 8004a2a:	463a      	movgt	r2, r7
 8004a2c:	462a      	movle	r2, r5
 8004a2e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004a32:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8004a36:	bfd8      	it	le
 8004a38:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	4622      	mov	r2, r4
 8004a40:	4659      	mov	r1, fp
 8004a42:	f7fb fe6b 	bl	800071c <__aeabi_ddiv>
 8004a46:	b005      	add	sp, #20
 8004a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a4c <__copybits>:
 8004a4c:	3901      	subs	r1, #1
 8004a4e:	b570      	push	{r4, r5, r6, lr}
 8004a50:	1149      	asrs	r1, r1, #5
 8004a52:	6914      	ldr	r4, [r2, #16]
 8004a54:	3101      	adds	r1, #1
 8004a56:	f102 0314 	add.w	r3, r2, #20
 8004a5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004a5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004a62:	1f05      	subs	r5, r0, #4
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	d30c      	bcc.n	8004a82 <__copybits+0x36>
 8004a68:	1aa3      	subs	r3, r4, r2
 8004a6a:	3b11      	subs	r3, #17
 8004a6c:	f023 0303 	bic.w	r3, r3, #3
 8004a70:	3211      	adds	r2, #17
 8004a72:	42a2      	cmp	r2, r4
 8004a74:	bf88      	it	hi
 8004a76:	2300      	movhi	r3, #0
 8004a78:	4418      	add	r0, r3
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	4288      	cmp	r0, r1
 8004a7e:	d305      	bcc.n	8004a8c <__copybits+0x40>
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
 8004a82:	f853 6b04 	ldr.w	r6, [r3], #4
 8004a86:	f845 6f04 	str.w	r6, [r5, #4]!
 8004a8a:	e7eb      	b.n	8004a64 <__copybits+0x18>
 8004a8c:	f840 3b04 	str.w	r3, [r0], #4
 8004a90:	e7f4      	b.n	8004a7c <__copybits+0x30>

08004a92 <__any_on>:
 8004a92:	f100 0214 	add.w	r2, r0, #20
 8004a96:	6900      	ldr	r0, [r0, #16]
 8004a98:	114b      	asrs	r3, r1, #5
 8004a9a:	4298      	cmp	r0, r3
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	db11      	blt.n	8004ac4 <__any_on+0x32>
 8004aa0:	dd0a      	ble.n	8004ab8 <__any_on+0x26>
 8004aa2:	f011 011f 	ands.w	r1, r1, #31
 8004aa6:	d007      	beq.n	8004ab8 <__any_on+0x26>
 8004aa8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004aac:	fa24 f001 	lsr.w	r0, r4, r1
 8004ab0:	fa00 f101 	lsl.w	r1, r0, r1
 8004ab4:	428c      	cmp	r4, r1
 8004ab6:	d10b      	bne.n	8004ad0 <__any_on+0x3e>
 8004ab8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d803      	bhi.n	8004ac8 <__any_on+0x36>
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	bd10      	pop	{r4, pc}
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	e7f7      	b.n	8004ab8 <__any_on+0x26>
 8004ac8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004acc:	2900      	cmp	r1, #0
 8004ace:	d0f5      	beq.n	8004abc <__any_on+0x2a>
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	e7f6      	b.n	8004ac2 <__any_on+0x30>

08004ad4 <__ascii_wctomb>:
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	b141      	cbz	r1, 8004aec <__ascii_wctomb+0x18>
 8004ada:	2aff      	cmp	r2, #255	@ 0xff
 8004adc:	d904      	bls.n	8004ae8 <__ascii_wctomb+0x14>
 8004ade:	228a      	movs	r2, #138	@ 0x8a
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	4770      	bx	lr
 8004ae8:	2001      	movs	r0, #1
 8004aea:	700a      	strb	r2, [r1, #0]
 8004aec:	4770      	bx	lr
	...

08004af0 <__sflush_r>:
 8004af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	0716      	lsls	r6, r2, #28
 8004af8:	4605      	mov	r5, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	d454      	bmi.n	8004ba8 <__sflush_r+0xb8>
 8004afe:	684b      	ldr	r3, [r1, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	dc02      	bgt.n	8004b0a <__sflush_r+0x1a>
 8004b04:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	dd48      	ble.n	8004b9c <__sflush_r+0xac>
 8004b0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b0c:	2e00      	cmp	r6, #0
 8004b0e:	d045      	beq.n	8004b9c <__sflush_r+0xac>
 8004b10:	2300      	movs	r3, #0
 8004b12:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b16:	682f      	ldr	r7, [r5, #0]
 8004b18:	6a21      	ldr	r1, [r4, #32]
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	d030      	beq.n	8004b80 <__sflush_r+0x90>
 8004b1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	0759      	lsls	r1, r3, #29
 8004b24:	d505      	bpl.n	8004b32 <__sflush_r+0x42>
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	1ad2      	subs	r2, r2, r3
 8004b2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b2c:	b10b      	cbz	r3, 8004b32 <__sflush_r+0x42>
 8004b2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b30:	1ad2      	subs	r2, r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	4628      	mov	r0, r5
 8004b36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b38:	6a21      	ldr	r1, [r4, #32]
 8004b3a:	47b0      	blx	r6
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	d106      	bne.n	8004b50 <__sflush_r+0x60>
 8004b42:	6829      	ldr	r1, [r5, #0]
 8004b44:	291d      	cmp	r1, #29
 8004b46:	d82b      	bhi.n	8004ba0 <__sflush_r+0xb0>
 8004b48:	4a28      	ldr	r2, [pc, #160]	@ (8004bec <__sflush_r+0xfc>)
 8004b4a:	40ca      	lsrs	r2, r1
 8004b4c:	07d6      	lsls	r6, r2, #31
 8004b4e:	d527      	bpl.n	8004ba0 <__sflush_r+0xb0>
 8004b50:	2200      	movs	r2, #0
 8004b52:	6062      	str	r2, [r4, #4]
 8004b54:	6922      	ldr	r2, [r4, #16]
 8004b56:	04d9      	lsls	r1, r3, #19
 8004b58:	6022      	str	r2, [r4, #0]
 8004b5a:	d504      	bpl.n	8004b66 <__sflush_r+0x76>
 8004b5c:	1c42      	adds	r2, r0, #1
 8004b5e:	d101      	bne.n	8004b64 <__sflush_r+0x74>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b903      	cbnz	r3, 8004b66 <__sflush_r+0x76>
 8004b64:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b68:	602f      	str	r7, [r5, #0]
 8004b6a:	b1b9      	cbz	r1, 8004b9c <__sflush_r+0xac>
 8004b6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b70:	4299      	cmp	r1, r3
 8004b72:	d002      	beq.n	8004b7a <__sflush_r+0x8a>
 8004b74:	4628      	mov	r0, r5
 8004b76:	f7fe fecb 	bl	8003910 <_free_r>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b7e:	e00d      	b.n	8004b9c <__sflush_r+0xac>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b0      	blx	r6
 8004b86:	4602      	mov	r2, r0
 8004b88:	1c50      	adds	r0, r2, #1
 8004b8a:	d1c9      	bne.n	8004b20 <__sflush_r+0x30>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0c6      	beq.n	8004b20 <__sflush_r+0x30>
 8004b92:	2b1d      	cmp	r3, #29
 8004b94:	d001      	beq.n	8004b9a <__sflush_r+0xaa>
 8004b96:	2b16      	cmp	r3, #22
 8004b98:	d11d      	bne.n	8004bd6 <__sflush_r+0xe6>
 8004b9a:	602f      	str	r7, [r5, #0]
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	e021      	b.n	8004be4 <__sflush_r+0xf4>
 8004ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ba4:	b21b      	sxth	r3, r3
 8004ba6:	e01a      	b.n	8004bde <__sflush_r+0xee>
 8004ba8:	690f      	ldr	r7, [r1, #16]
 8004baa:	2f00      	cmp	r7, #0
 8004bac:	d0f6      	beq.n	8004b9c <__sflush_r+0xac>
 8004bae:	0793      	lsls	r3, r2, #30
 8004bb0:	bf18      	it	ne
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	680e      	ldr	r6, [r1, #0]
 8004bb6:	bf08      	it	eq
 8004bb8:	694b      	ldreq	r3, [r1, #20]
 8004bba:	1bf6      	subs	r6, r6, r7
 8004bbc:	600f      	str	r7, [r1, #0]
 8004bbe:	608b      	str	r3, [r1, #8]
 8004bc0:	2e00      	cmp	r6, #0
 8004bc2:	ddeb      	ble.n	8004b9c <__sflush_r+0xac>
 8004bc4:	4633      	mov	r3, r6
 8004bc6:	463a      	mov	r2, r7
 8004bc8:	4628      	mov	r0, r5
 8004bca:	6a21      	ldr	r1, [r4, #32]
 8004bcc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004bd0:	47e0      	blx	ip
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	dc07      	bgt.n	8004be6 <__sflush_r+0xf6>
 8004bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bde:	f04f 30ff 	mov.w	r0, #4294967295
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be6:	4407      	add	r7, r0
 8004be8:	1a36      	subs	r6, r6, r0
 8004bea:	e7e9      	b.n	8004bc0 <__sflush_r+0xd0>
 8004bec:	20400001 	.word	0x20400001

08004bf0 <_fflush_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	690b      	ldr	r3, [r1, #16]
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	b913      	cbnz	r3, 8004c00 <_fflush_r+0x10>
 8004bfa:	2500      	movs	r5, #0
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	b118      	cbz	r0, 8004c0a <_fflush_r+0x1a>
 8004c02:	6a03      	ldr	r3, [r0, #32]
 8004c04:	b90b      	cbnz	r3, 8004c0a <_fflush_r+0x1a>
 8004c06:	f7fe fd47 	bl	8003698 <__sinit>
 8004c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f3      	beq.n	8004bfa <_fflush_r+0xa>
 8004c12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c14:	07d0      	lsls	r0, r2, #31
 8004c16:	d404      	bmi.n	8004c22 <_fflush_r+0x32>
 8004c18:	0599      	lsls	r1, r3, #22
 8004c1a:	d402      	bmi.n	8004c22 <_fflush_r+0x32>
 8004c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c1e:	f7fe fe60 	bl	80038e2 <__retarget_lock_acquire_recursive>
 8004c22:	4628      	mov	r0, r5
 8004c24:	4621      	mov	r1, r4
 8004c26:	f7ff ff63 	bl	8004af0 <__sflush_r>
 8004c2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	07da      	lsls	r2, r3, #31
 8004c30:	d4e4      	bmi.n	8004bfc <_fflush_r+0xc>
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	059b      	lsls	r3, r3, #22
 8004c36:	d4e1      	bmi.n	8004bfc <_fflush_r+0xc>
 8004c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c3a:	f7fe fe53 	bl	80038e4 <__retarget_lock_release_recursive>
 8004c3e:	e7dd      	b.n	8004bfc <_fflush_r+0xc>

08004c40 <_sbrk_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	2300      	movs	r3, #0
 8004c44:	4d05      	ldr	r5, [pc, #20]	@ (8004c5c <_sbrk_r+0x1c>)
 8004c46:	4604      	mov	r4, r0
 8004c48:	4608      	mov	r0, r1
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	f7fc fcc6 	bl	80015dc <_sbrk>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_sbrk_r+0x1a>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_sbrk_r+0x1a>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	200004f0 	.word	0x200004f0

08004c60 <__assert_func>:
 8004c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c62:	4614      	mov	r4, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <__assert_func+0x2c>)
 8004c68:	4605      	mov	r5, r0
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68d8      	ldr	r0, [r3, #12]
 8004c6e:	b14c      	cbz	r4, 8004c84 <__assert_func+0x24>
 8004c70:	4b07      	ldr	r3, [pc, #28]	@ (8004c90 <__assert_func+0x30>)
 8004c72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c76:	9100      	str	r1, [sp, #0]
 8004c78:	462b      	mov	r3, r5
 8004c7a:	4906      	ldr	r1, [pc, #24]	@ (8004c94 <__assert_func+0x34>)
 8004c7c:	f000 f82a 	bl	8004cd4 <fiprintf>
 8004c80:	f000 f83a 	bl	8004cf8 <abort>
 8004c84:	4b04      	ldr	r3, [pc, #16]	@ (8004c98 <__assert_func+0x38>)
 8004c86:	461c      	mov	r4, r3
 8004c88:	e7f3      	b.n	8004c72 <__assert_func+0x12>
 8004c8a:	bf00      	nop
 8004c8c:	20000188 	.word	0x20000188
 8004c90:	08005687 	.word	0x08005687
 8004c94:	08005694 	.word	0x08005694
 8004c98:	080056c2 	.word	0x080056c2

08004c9c <_calloc_r>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	fba1 5402 	umull	r5, r4, r1, r2
 8004ca2:	b934      	cbnz	r4, 8004cb2 <_calloc_r+0x16>
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	f7ff f9d7 	bl	8004058 <_malloc_r>
 8004caa:	4606      	mov	r6, r0
 8004cac:	b928      	cbnz	r0, 8004cba <_calloc_r+0x1e>
 8004cae:	4630      	mov	r0, r6
 8004cb0:	bd70      	pop	{r4, r5, r6, pc}
 8004cb2:	220c      	movs	r2, #12
 8004cb4:	2600      	movs	r6, #0
 8004cb6:	6002      	str	r2, [r0, #0]
 8004cb8:	e7f9      	b.n	8004cae <_calloc_r+0x12>
 8004cba:	462a      	mov	r2, r5
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	f7fe fd64 	bl	800378a <memset>
 8004cc2:	e7f4      	b.n	8004cae <_calloc_r+0x12>

08004cc4 <malloc>:
 8004cc4:	4b02      	ldr	r3, [pc, #8]	@ (8004cd0 <malloc+0xc>)
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f7ff b9c5 	b.w	8004058 <_malloc_r>
 8004cce:	bf00      	nop
 8004cd0:	20000188 	.word	0x20000188

08004cd4 <fiprintf>:
 8004cd4:	b40e      	push	{r1, r2, r3}
 8004cd6:	b503      	push	{r0, r1, lr}
 8004cd8:	4601      	mov	r1, r0
 8004cda:	ab03      	add	r3, sp, #12
 8004cdc:	4805      	ldr	r0, [pc, #20]	@ (8004cf4 <fiprintf+0x20>)
 8004cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce2:	6800      	ldr	r0, [r0, #0]
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	f000 f835 	bl	8004d54 <_vfiprintf_r>
 8004cea:	b002      	add	sp, #8
 8004cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cf0:	b003      	add	sp, #12
 8004cf2:	4770      	bx	lr
 8004cf4:	20000188 	.word	0x20000188

08004cf8 <abort>:
 8004cf8:	2006      	movs	r0, #6
 8004cfa:	b508      	push	{r3, lr}
 8004cfc:	f000 fb8e 	bl	800541c <raise>
 8004d00:	2001      	movs	r0, #1
 8004d02:	f7fc fbf7 	bl	80014f4 <_exit>

08004d06 <__sfputc_r>:
 8004d06:	6893      	ldr	r3, [r2, #8]
 8004d08:	b410      	push	{r4}
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	6093      	str	r3, [r2, #8]
 8004d10:	da07      	bge.n	8004d22 <__sfputc_r+0x1c>
 8004d12:	6994      	ldr	r4, [r2, #24]
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	db01      	blt.n	8004d1c <__sfputc_r+0x16>
 8004d18:	290a      	cmp	r1, #10
 8004d1a:	d102      	bne.n	8004d22 <__sfputc_r+0x1c>
 8004d1c:	bc10      	pop	{r4}
 8004d1e:	f000 bac1 	b.w	80052a4 <__swbuf_r>
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	1c58      	adds	r0, r3, #1
 8004d26:	6010      	str	r0, [r2, #0]
 8004d28:	7019      	strb	r1, [r3, #0]
 8004d2a:	4608      	mov	r0, r1
 8004d2c:	bc10      	pop	{r4}
 8004d2e:	4770      	bx	lr

08004d30 <__sfputs_r>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	4606      	mov	r6, r0
 8004d34:	460f      	mov	r7, r1
 8004d36:	4614      	mov	r4, r2
 8004d38:	18d5      	adds	r5, r2, r3
 8004d3a:	42ac      	cmp	r4, r5
 8004d3c:	d101      	bne.n	8004d42 <__sfputs_r+0x12>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e007      	b.n	8004d52 <__sfputs_r+0x22>
 8004d42:	463a      	mov	r2, r7
 8004d44:	4630      	mov	r0, r6
 8004d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4a:	f7ff ffdc 	bl	8004d06 <__sfputc_r>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d1f3      	bne.n	8004d3a <__sfputs_r+0xa>
 8004d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d54 <_vfiprintf_r>:
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	460d      	mov	r5, r1
 8004d5a:	4614      	mov	r4, r2
 8004d5c:	4698      	mov	r8, r3
 8004d5e:	4606      	mov	r6, r0
 8004d60:	b09d      	sub	sp, #116	@ 0x74
 8004d62:	b118      	cbz	r0, 8004d6c <_vfiprintf_r+0x18>
 8004d64:	6a03      	ldr	r3, [r0, #32]
 8004d66:	b90b      	cbnz	r3, 8004d6c <_vfiprintf_r+0x18>
 8004d68:	f7fe fc96 	bl	8003698 <__sinit>
 8004d6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d6e:	07d9      	lsls	r1, r3, #31
 8004d70:	d405      	bmi.n	8004d7e <_vfiprintf_r+0x2a>
 8004d72:	89ab      	ldrh	r3, [r5, #12]
 8004d74:	059a      	lsls	r2, r3, #22
 8004d76:	d402      	bmi.n	8004d7e <_vfiprintf_r+0x2a>
 8004d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d7a:	f7fe fdb2 	bl	80038e2 <__retarget_lock_acquire_recursive>
 8004d7e:	89ab      	ldrh	r3, [r5, #12]
 8004d80:	071b      	lsls	r3, r3, #28
 8004d82:	d501      	bpl.n	8004d88 <_vfiprintf_r+0x34>
 8004d84:	692b      	ldr	r3, [r5, #16]
 8004d86:	b99b      	cbnz	r3, 8004db0 <_vfiprintf_r+0x5c>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f000 fac8 	bl	8005320 <__swsetup_r>
 8004d90:	b170      	cbz	r0, 8004db0 <_vfiprintf_r+0x5c>
 8004d92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d94:	07dc      	lsls	r4, r3, #31
 8004d96:	d504      	bpl.n	8004da2 <_vfiprintf_r+0x4e>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	b01d      	add	sp, #116	@ 0x74
 8004d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da2:	89ab      	ldrh	r3, [r5, #12]
 8004da4:	0598      	lsls	r0, r3, #22
 8004da6:	d4f7      	bmi.n	8004d98 <_vfiprintf_r+0x44>
 8004da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004daa:	f7fe fd9b 	bl	80038e4 <__retarget_lock_release_recursive>
 8004dae:	e7f3      	b.n	8004d98 <_vfiprintf_r+0x44>
 8004db0:	2300      	movs	r3, #0
 8004db2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004db4:	2320      	movs	r3, #32
 8004db6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dba:	2330      	movs	r3, #48	@ 0x30
 8004dbc:	f04f 0901 	mov.w	r9, #1
 8004dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dc4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004f70 <_vfiprintf_r+0x21c>
 8004dc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dcc:	4623      	mov	r3, r4
 8004dce:	469a      	mov	sl, r3
 8004dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd4:	b10a      	cbz	r2, 8004dda <_vfiprintf_r+0x86>
 8004dd6:	2a25      	cmp	r2, #37	@ 0x25
 8004dd8:	d1f9      	bne.n	8004dce <_vfiprintf_r+0x7a>
 8004dda:	ebba 0b04 	subs.w	fp, sl, r4
 8004dde:	d00b      	beq.n	8004df8 <_vfiprintf_r+0xa4>
 8004de0:	465b      	mov	r3, fp
 8004de2:	4622      	mov	r2, r4
 8004de4:	4629      	mov	r1, r5
 8004de6:	4630      	mov	r0, r6
 8004de8:	f7ff ffa2 	bl	8004d30 <__sfputs_r>
 8004dec:	3001      	adds	r0, #1
 8004dee:	f000 80a7 	beq.w	8004f40 <_vfiprintf_r+0x1ec>
 8004df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004df4:	445a      	add	r2, fp
 8004df6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004df8:	f89a 3000 	ldrb.w	r3, [sl]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 809f 	beq.w	8004f40 <_vfiprintf_r+0x1ec>
 8004e02:	2300      	movs	r3, #0
 8004e04:	f04f 32ff 	mov.w	r2, #4294967295
 8004e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e0c:	f10a 0a01 	add.w	sl, sl, #1
 8004e10:	9304      	str	r3, [sp, #16]
 8004e12:	9307      	str	r3, [sp, #28]
 8004e14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e18:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e1a:	4654      	mov	r4, sl
 8004e1c:	2205      	movs	r2, #5
 8004e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e22:	4853      	ldr	r0, [pc, #332]	@ (8004f70 <_vfiprintf_r+0x21c>)
 8004e24:	f000 fb16 	bl	8005454 <memchr>
 8004e28:	9a04      	ldr	r2, [sp, #16]
 8004e2a:	b9d8      	cbnz	r0, 8004e64 <_vfiprintf_r+0x110>
 8004e2c:	06d1      	lsls	r1, r2, #27
 8004e2e:	bf44      	itt	mi
 8004e30:	2320      	movmi	r3, #32
 8004e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e36:	0713      	lsls	r3, r2, #28
 8004e38:	bf44      	itt	mi
 8004e3a:	232b      	movmi	r3, #43	@ 0x2b
 8004e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e40:	f89a 3000 	ldrb.w	r3, [sl]
 8004e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e46:	d015      	beq.n	8004e74 <_vfiprintf_r+0x120>
 8004e48:	4654      	mov	r4, sl
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f04f 0c0a 	mov.w	ip, #10
 8004e50:	9a07      	ldr	r2, [sp, #28]
 8004e52:	4621      	mov	r1, r4
 8004e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e58:	3b30      	subs	r3, #48	@ 0x30
 8004e5a:	2b09      	cmp	r3, #9
 8004e5c:	d94b      	bls.n	8004ef6 <_vfiprintf_r+0x1a2>
 8004e5e:	b1b0      	cbz	r0, 8004e8e <_vfiprintf_r+0x13a>
 8004e60:	9207      	str	r2, [sp, #28]
 8004e62:	e014      	b.n	8004e8e <_vfiprintf_r+0x13a>
 8004e64:	eba0 0308 	sub.w	r3, r0, r8
 8004e68:	fa09 f303 	lsl.w	r3, r9, r3
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	46a2      	mov	sl, r4
 8004e70:	9304      	str	r3, [sp, #16]
 8004e72:	e7d2      	b.n	8004e1a <_vfiprintf_r+0xc6>
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	1d19      	adds	r1, r3, #4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	9103      	str	r1, [sp, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bfbb      	ittet	lt
 8004e80:	425b      	neglt	r3, r3
 8004e82:	f042 0202 	orrlt.w	r2, r2, #2
 8004e86:	9307      	strge	r3, [sp, #28]
 8004e88:	9307      	strlt	r3, [sp, #28]
 8004e8a:	bfb8      	it	lt
 8004e8c:	9204      	strlt	r2, [sp, #16]
 8004e8e:	7823      	ldrb	r3, [r4, #0]
 8004e90:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e92:	d10a      	bne.n	8004eaa <_vfiprintf_r+0x156>
 8004e94:	7863      	ldrb	r3, [r4, #1]
 8004e96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e98:	d132      	bne.n	8004f00 <_vfiprintf_r+0x1ac>
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	3402      	adds	r4, #2
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	9203      	str	r2, [sp, #12]
 8004ea4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ea8:	9305      	str	r3, [sp, #20]
 8004eaa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004f74 <_vfiprintf_r+0x220>
 8004eae:	2203      	movs	r2, #3
 8004eb0:	4650      	mov	r0, sl
 8004eb2:	7821      	ldrb	r1, [r4, #0]
 8004eb4:	f000 face 	bl	8005454 <memchr>
 8004eb8:	b138      	cbz	r0, 8004eca <_vfiprintf_r+0x176>
 8004eba:	2240      	movs	r2, #64	@ 0x40
 8004ebc:	9b04      	ldr	r3, [sp, #16]
 8004ebe:	eba0 000a 	sub.w	r0, r0, sl
 8004ec2:	4082      	lsls	r2, r0
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	3401      	adds	r4, #1
 8004ec8:	9304      	str	r3, [sp, #16]
 8004eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ece:	2206      	movs	r2, #6
 8004ed0:	4829      	ldr	r0, [pc, #164]	@ (8004f78 <_vfiprintf_r+0x224>)
 8004ed2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ed6:	f000 fabd 	bl	8005454 <memchr>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d03f      	beq.n	8004f5e <_vfiprintf_r+0x20a>
 8004ede:	4b27      	ldr	r3, [pc, #156]	@ (8004f7c <_vfiprintf_r+0x228>)
 8004ee0:	bb1b      	cbnz	r3, 8004f2a <_vfiprintf_r+0x1d6>
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	3307      	adds	r3, #7
 8004ee6:	f023 0307 	bic.w	r3, r3, #7
 8004eea:	3308      	adds	r3, #8
 8004eec:	9303      	str	r3, [sp, #12]
 8004eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef0:	443b      	add	r3, r7
 8004ef2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ef4:	e76a      	b.n	8004dcc <_vfiprintf_r+0x78>
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	2001      	movs	r0, #1
 8004efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004efe:	e7a8      	b.n	8004e52 <_vfiprintf_r+0xfe>
 8004f00:	2300      	movs	r3, #0
 8004f02:	f04f 0c0a 	mov.w	ip, #10
 8004f06:	4619      	mov	r1, r3
 8004f08:	3401      	adds	r4, #1
 8004f0a:	9305      	str	r3, [sp, #20]
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f12:	3a30      	subs	r2, #48	@ 0x30
 8004f14:	2a09      	cmp	r2, #9
 8004f16:	d903      	bls.n	8004f20 <_vfiprintf_r+0x1cc>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0c6      	beq.n	8004eaa <_vfiprintf_r+0x156>
 8004f1c:	9105      	str	r1, [sp, #20]
 8004f1e:	e7c4      	b.n	8004eaa <_vfiprintf_r+0x156>
 8004f20:	4604      	mov	r4, r0
 8004f22:	2301      	movs	r3, #1
 8004f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f28:	e7f0      	b.n	8004f0c <_vfiprintf_r+0x1b8>
 8004f2a:	ab03      	add	r3, sp, #12
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	462a      	mov	r2, r5
 8004f30:	4630      	mov	r0, r6
 8004f32:	4b13      	ldr	r3, [pc, #76]	@ (8004f80 <_vfiprintf_r+0x22c>)
 8004f34:	a904      	add	r1, sp, #16
 8004f36:	f3af 8000 	nop.w
 8004f3a:	4607      	mov	r7, r0
 8004f3c:	1c78      	adds	r0, r7, #1
 8004f3e:	d1d6      	bne.n	8004eee <_vfiprintf_r+0x19a>
 8004f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f42:	07d9      	lsls	r1, r3, #31
 8004f44:	d405      	bmi.n	8004f52 <_vfiprintf_r+0x1fe>
 8004f46:	89ab      	ldrh	r3, [r5, #12]
 8004f48:	059a      	lsls	r2, r3, #22
 8004f4a:	d402      	bmi.n	8004f52 <_vfiprintf_r+0x1fe>
 8004f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f4e:	f7fe fcc9 	bl	80038e4 <__retarget_lock_release_recursive>
 8004f52:	89ab      	ldrh	r3, [r5, #12]
 8004f54:	065b      	lsls	r3, r3, #25
 8004f56:	f53f af1f 	bmi.w	8004d98 <_vfiprintf_r+0x44>
 8004f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f5c:	e71e      	b.n	8004d9c <_vfiprintf_r+0x48>
 8004f5e:	ab03      	add	r3, sp, #12
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	462a      	mov	r2, r5
 8004f64:	4630      	mov	r0, r6
 8004f66:	4b06      	ldr	r3, [pc, #24]	@ (8004f80 <_vfiprintf_r+0x22c>)
 8004f68:	a904      	add	r1, sp, #16
 8004f6a:	f000 f87d 	bl	8005068 <_printf_i>
 8004f6e:	e7e4      	b.n	8004f3a <_vfiprintf_r+0x1e6>
 8004f70:	080056c3 	.word	0x080056c3
 8004f74:	080056c9 	.word	0x080056c9
 8004f78:	080056cd 	.word	0x080056cd
 8004f7c:	00000000 	.word	0x00000000
 8004f80:	08004d31 	.word	0x08004d31

08004f84 <_printf_common>:
 8004f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f88:	4616      	mov	r6, r2
 8004f8a:	4698      	mov	r8, r3
 8004f8c:	688a      	ldr	r2, [r1, #8]
 8004f8e:	690b      	ldr	r3, [r1, #16]
 8004f90:	4607      	mov	r7, r0
 8004f92:	4293      	cmp	r3, r2
 8004f94:	bfb8      	it	lt
 8004f96:	4613      	movlt	r3, r2
 8004f98:	6033      	str	r3, [r6, #0]
 8004f9a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fa4:	b10a      	cbz	r2, 8004faa <_printf_common+0x26>
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6033      	str	r3, [r6, #0]
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	0699      	lsls	r1, r3, #26
 8004fae:	bf42      	ittt	mi
 8004fb0:	6833      	ldrmi	r3, [r6, #0]
 8004fb2:	3302      	addmi	r3, #2
 8004fb4:	6033      	strmi	r3, [r6, #0]
 8004fb6:	6825      	ldr	r5, [r4, #0]
 8004fb8:	f015 0506 	ands.w	r5, r5, #6
 8004fbc:	d106      	bne.n	8004fcc <_printf_common+0x48>
 8004fbe:	f104 0a19 	add.w	sl, r4, #25
 8004fc2:	68e3      	ldr	r3, [r4, #12]
 8004fc4:	6832      	ldr	r2, [r6, #0]
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	42ab      	cmp	r3, r5
 8004fca:	dc2b      	bgt.n	8005024 <_printf_common+0xa0>
 8004fcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fd0:	6822      	ldr	r2, [r4, #0]
 8004fd2:	3b00      	subs	r3, #0
 8004fd4:	bf18      	it	ne
 8004fd6:	2301      	movne	r3, #1
 8004fd8:	0692      	lsls	r2, r2, #26
 8004fda:	d430      	bmi.n	800503e <_printf_common+0xba>
 8004fdc:	4641      	mov	r1, r8
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fe4:	47c8      	blx	r9
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d023      	beq.n	8005032 <_printf_common+0xae>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	6922      	ldr	r2, [r4, #16]
 8004fee:	f003 0306 	and.w	r3, r3, #6
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	bf14      	ite	ne
 8004ff6:	2500      	movne	r5, #0
 8004ff8:	6833      	ldreq	r3, [r6, #0]
 8004ffa:	f04f 0600 	mov.w	r6, #0
 8004ffe:	bf08      	it	eq
 8005000:	68e5      	ldreq	r5, [r4, #12]
 8005002:	f104 041a 	add.w	r4, r4, #26
 8005006:	bf08      	it	eq
 8005008:	1aed      	subeq	r5, r5, r3
 800500a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800500e:	bf08      	it	eq
 8005010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005014:	4293      	cmp	r3, r2
 8005016:	bfc4      	itt	gt
 8005018:	1a9b      	subgt	r3, r3, r2
 800501a:	18ed      	addgt	r5, r5, r3
 800501c:	42b5      	cmp	r5, r6
 800501e:	d11a      	bne.n	8005056 <_printf_common+0xd2>
 8005020:	2000      	movs	r0, #0
 8005022:	e008      	b.n	8005036 <_printf_common+0xb2>
 8005024:	2301      	movs	r3, #1
 8005026:	4652      	mov	r2, sl
 8005028:	4641      	mov	r1, r8
 800502a:	4638      	mov	r0, r7
 800502c:	47c8      	blx	r9
 800502e:	3001      	adds	r0, #1
 8005030:	d103      	bne.n	800503a <_printf_common+0xb6>
 8005032:	f04f 30ff 	mov.w	r0, #4294967295
 8005036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503a:	3501      	adds	r5, #1
 800503c:	e7c1      	b.n	8004fc2 <_printf_common+0x3e>
 800503e:	2030      	movs	r0, #48	@ 0x30
 8005040:	18e1      	adds	r1, r4, r3
 8005042:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800504c:	4422      	add	r2, r4
 800504e:	3302      	adds	r3, #2
 8005050:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005054:	e7c2      	b.n	8004fdc <_printf_common+0x58>
 8005056:	2301      	movs	r3, #1
 8005058:	4622      	mov	r2, r4
 800505a:	4641      	mov	r1, r8
 800505c:	4638      	mov	r0, r7
 800505e:	47c8      	blx	r9
 8005060:	3001      	adds	r0, #1
 8005062:	d0e6      	beq.n	8005032 <_printf_common+0xae>
 8005064:	3601      	adds	r6, #1
 8005066:	e7d9      	b.n	800501c <_printf_common+0x98>

08005068 <_printf_i>:
 8005068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	7e0f      	ldrb	r7, [r1, #24]
 800506e:	4691      	mov	r9, r2
 8005070:	2f78      	cmp	r7, #120	@ 0x78
 8005072:	4680      	mov	r8, r0
 8005074:	460c      	mov	r4, r1
 8005076:	469a      	mov	sl, r3
 8005078:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800507a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800507e:	d807      	bhi.n	8005090 <_printf_i+0x28>
 8005080:	2f62      	cmp	r7, #98	@ 0x62
 8005082:	d80a      	bhi.n	800509a <_printf_i+0x32>
 8005084:	2f00      	cmp	r7, #0
 8005086:	f000 80d1 	beq.w	800522c <_printf_i+0x1c4>
 800508a:	2f58      	cmp	r7, #88	@ 0x58
 800508c:	f000 80b8 	beq.w	8005200 <_printf_i+0x198>
 8005090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005094:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005098:	e03a      	b.n	8005110 <_printf_i+0xa8>
 800509a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800509e:	2b15      	cmp	r3, #21
 80050a0:	d8f6      	bhi.n	8005090 <_printf_i+0x28>
 80050a2:	a101      	add	r1, pc, #4	@ (adr r1, 80050a8 <_printf_i+0x40>)
 80050a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050a8:	08005101 	.word	0x08005101
 80050ac:	08005115 	.word	0x08005115
 80050b0:	08005091 	.word	0x08005091
 80050b4:	08005091 	.word	0x08005091
 80050b8:	08005091 	.word	0x08005091
 80050bc:	08005091 	.word	0x08005091
 80050c0:	08005115 	.word	0x08005115
 80050c4:	08005091 	.word	0x08005091
 80050c8:	08005091 	.word	0x08005091
 80050cc:	08005091 	.word	0x08005091
 80050d0:	08005091 	.word	0x08005091
 80050d4:	08005213 	.word	0x08005213
 80050d8:	0800513f 	.word	0x0800513f
 80050dc:	080051cd 	.word	0x080051cd
 80050e0:	08005091 	.word	0x08005091
 80050e4:	08005091 	.word	0x08005091
 80050e8:	08005235 	.word	0x08005235
 80050ec:	08005091 	.word	0x08005091
 80050f0:	0800513f 	.word	0x0800513f
 80050f4:	08005091 	.word	0x08005091
 80050f8:	08005091 	.word	0x08005091
 80050fc:	080051d5 	.word	0x080051d5
 8005100:	6833      	ldr	r3, [r6, #0]
 8005102:	1d1a      	adds	r2, r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6032      	str	r2, [r6, #0]
 8005108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800510c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005110:	2301      	movs	r3, #1
 8005112:	e09c      	b.n	800524e <_printf_i+0x1e6>
 8005114:	6833      	ldr	r3, [r6, #0]
 8005116:	6820      	ldr	r0, [r4, #0]
 8005118:	1d19      	adds	r1, r3, #4
 800511a:	6031      	str	r1, [r6, #0]
 800511c:	0606      	lsls	r6, r0, #24
 800511e:	d501      	bpl.n	8005124 <_printf_i+0xbc>
 8005120:	681d      	ldr	r5, [r3, #0]
 8005122:	e003      	b.n	800512c <_printf_i+0xc4>
 8005124:	0645      	lsls	r5, r0, #25
 8005126:	d5fb      	bpl.n	8005120 <_printf_i+0xb8>
 8005128:	f9b3 5000 	ldrsh.w	r5, [r3]
 800512c:	2d00      	cmp	r5, #0
 800512e:	da03      	bge.n	8005138 <_printf_i+0xd0>
 8005130:	232d      	movs	r3, #45	@ 0x2d
 8005132:	426d      	negs	r5, r5
 8005134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005138:	230a      	movs	r3, #10
 800513a:	4858      	ldr	r0, [pc, #352]	@ (800529c <_printf_i+0x234>)
 800513c:	e011      	b.n	8005162 <_printf_i+0xfa>
 800513e:	6821      	ldr	r1, [r4, #0]
 8005140:	6833      	ldr	r3, [r6, #0]
 8005142:	0608      	lsls	r0, r1, #24
 8005144:	f853 5b04 	ldr.w	r5, [r3], #4
 8005148:	d402      	bmi.n	8005150 <_printf_i+0xe8>
 800514a:	0649      	lsls	r1, r1, #25
 800514c:	bf48      	it	mi
 800514e:	b2ad      	uxthmi	r5, r5
 8005150:	2f6f      	cmp	r7, #111	@ 0x6f
 8005152:	6033      	str	r3, [r6, #0]
 8005154:	bf14      	ite	ne
 8005156:	230a      	movne	r3, #10
 8005158:	2308      	moveq	r3, #8
 800515a:	4850      	ldr	r0, [pc, #320]	@ (800529c <_printf_i+0x234>)
 800515c:	2100      	movs	r1, #0
 800515e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005162:	6866      	ldr	r6, [r4, #4]
 8005164:	2e00      	cmp	r6, #0
 8005166:	60a6      	str	r6, [r4, #8]
 8005168:	db05      	blt.n	8005176 <_printf_i+0x10e>
 800516a:	6821      	ldr	r1, [r4, #0]
 800516c:	432e      	orrs	r6, r5
 800516e:	f021 0104 	bic.w	r1, r1, #4
 8005172:	6021      	str	r1, [r4, #0]
 8005174:	d04b      	beq.n	800520e <_printf_i+0x1a6>
 8005176:	4616      	mov	r6, r2
 8005178:	fbb5 f1f3 	udiv	r1, r5, r3
 800517c:	fb03 5711 	mls	r7, r3, r1, r5
 8005180:	5dc7      	ldrb	r7, [r0, r7]
 8005182:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005186:	462f      	mov	r7, r5
 8005188:	42bb      	cmp	r3, r7
 800518a:	460d      	mov	r5, r1
 800518c:	d9f4      	bls.n	8005178 <_printf_i+0x110>
 800518e:	2b08      	cmp	r3, #8
 8005190:	d10b      	bne.n	80051aa <_printf_i+0x142>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	07df      	lsls	r7, r3, #31
 8005196:	d508      	bpl.n	80051aa <_printf_i+0x142>
 8005198:	6923      	ldr	r3, [r4, #16]
 800519a:	6861      	ldr	r1, [r4, #4]
 800519c:	4299      	cmp	r1, r3
 800519e:	bfde      	ittt	le
 80051a0:	2330      	movle	r3, #48	@ 0x30
 80051a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051aa:	1b92      	subs	r2, r2, r6
 80051ac:	6122      	str	r2, [r4, #16]
 80051ae:	464b      	mov	r3, r9
 80051b0:	4621      	mov	r1, r4
 80051b2:	4640      	mov	r0, r8
 80051b4:	f8cd a000 	str.w	sl, [sp]
 80051b8:	aa03      	add	r2, sp, #12
 80051ba:	f7ff fee3 	bl	8004f84 <_printf_common>
 80051be:	3001      	adds	r0, #1
 80051c0:	d14a      	bne.n	8005258 <_printf_i+0x1f0>
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295
 80051c6:	b004      	add	sp, #16
 80051c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	f043 0320 	orr.w	r3, r3, #32
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	2778      	movs	r7, #120	@ 0x78
 80051d6:	4832      	ldr	r0, [pc, #200]	@ (80052a0 <_printf_i+0x238>)
 80051d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	6831      	ldr	r1, [r6, #0]
 80051e0:	061f      	lsls	r7, r3, #24
 80051e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80051e6:	d402      	bmi.n	80051ee <_printf_i+0x186>
 80051e8:	065f      	lsls	r7, r3, #25
 80051ea:	bf48      	it	mi
 80051ec:	b2ad      	uxthmi	r5, r5
 80051ee:	6031      	str	r1, [r6, #0]
 80051f0:	07d9      	lsls	r1, r3, #31
 80051f2:	bf44      	itt	mi
 80051f4:	f043 0320 	orrmi.w	r3, r3, #32
 80051f8:	6023      	strmi	r3, [r4, #0]
 80051fa:	b11d      	cbz	r5, 8005204 <_printf_i+0x19c>
 80051fc:	2310      	movs	r3, #16
 80051fe:	e7ad      	b.n	800515c <_printf_i+0xf4>
 8005200:	4826      	ldr	r0, [pc, #152]	@ (800529c <_printf_i+0x234>)
 8005202:	e7e9      	b.n	80051d8 <_printf_i+0x170>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	f023 0320 	bic.w	r3, r3, #32
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	e7f6      	b.n	80051fc <_printf_i+0x194>
 800520e:	4616      	mov	r6, r2
 8005210:	e7bd      	b.n	800518e <_printf_i+0x126>
 8005212:	6833      	ldr	r3, [r6, #0]
 8005214:	6825      	ldr	r5, [r4, #0]
 8005216:	1d18      	adds	r0, r3, #4
 8005218:	6961      	ldr	r1, [r4, #20]
 800521a:	6030      	str	r0, [r6, #0]
 800521c:	062e      	lsls	r6, r5, #24
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	d501      	bpl.n	8005226 <_printf_i+0x1be>
 8005222:	6019      	str	r1, [r3, #0]
 8005224:	e002      	b.n	800522c <_printf_i+0x1c4>
 8005226:	0668      	lsls	r0, r5, #25
 8005228:	d5fb      	bpl.n	8005222 <_printf_i+0x1ba>
 800522a:	8019      	strh	r1, [r3, #0]
 800522c:	2300      	movs	r3, #0
 800522e:	4616      	mov	r6, r2
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	e7bc      	b.n	80051ae <_printf_i+0x146>
 8005234:	6833      	ldr	r3, [r6, #0]
 8005236:	2100      	movs	r1, #0
 8005238:	1d1a      	adds	r2, r3, #4
 800523a:	6032      	str	r2, [r6, #0]
 800523c:	681e      	ldr	r6, [r3, #0]
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	4630      	mov	r0, r6
 8005242:	f000 f907 	bl	8005454 <memchr>
 8005246:	b108      	cbz	r0, 800524c <_printf_i+0x1e4>
 8005248:	1b80      	subs	r0, r0, r6
 800524a:	6060      	str	r0, [r4, #4]
 800524c:	6863      	ldr	r3, [r4, #4]
 800524e:	6123      	str	r3, [r4, #16]
 8005250:	2300      	movs	r3, #0
 8005252:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005256:	e7aa      	b.n	80051ae <_printf_i+0x146>
 8005258:	4632      	mov	r2, r6
 800525a:	4649      	mov	r1, r9
 800525c:	4640      	mov	r0, r8
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	47d0      	blx	sl
 8005262:	3001      	adds	r0, #1
 8005264:	d0ad      	beq.n	80051c2 <_printf_i+0x15a>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	079b      	lsls	r3, r3, #30
 800526a:	d413      	bmi.n	8005294 <_printf_i+0x22c>
 800526c:	68e0      	ldr	r0, [r4, #12]
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	4298      	cmp	r0, r3
 8005272:	bfb8      	it	lt
 8005274:	4618      	movlt	r0, r3
 8005276:	e7a6      	b.n	80051c6 <_printf_i+0x15e>
 8005278:	2301      	movs	r3, #1
 800527a:	4632      	mov	r2, r6
 800527c:	4649      	mov	r1, r9
 800527e:	4640      	mov	r0, r8
 8005280:	47d0      	blx	sl
 8005282:	3001      	adds	r0, #1
 8005284:	d09d      	beq.n	80051c2 <_printf_i+0x15a>
 8005286:	3501      	adds	r5, #1
 8005288:	68e3      	ldr	r3, [r4, #12]
 800528a:	9903      	ldr	r1, [sp, #12]
 800528c:	1a5b      	subs	r3, r3, r1
 800528e:	42ab      	cmp	r3, r5
 8005290:	dcf2      	bgt.n	8005278 <_printf_i+0x210>
 8005292:	e7eb      	b.n	800526c <_printf_i+0x204>
 8005294:	2500      	movs	r5, #0
 8005296:	f104 0619 	add.w	r6, r4, #25
 800529a:	e7f5      	b.n	8005288 <_printf_i+0x220>
 800529c:	080056d4 	.word	0x080056d4
 80052a0:	080056e5 	.word	0x080056e5

080052a4 <__swbuf_r>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	460e      	mov	r6, r1
 80052a8:	4614      	mov	r4, r2
 80052aa:	4605      	mov	r5, r0
 80052ac:	b118      	cbz	r0, 80052b6 <__swbuf_r+0x12>
 80052ae:	6a03      	ldr	r3, [r0, #32]
 80052b0:	b90b      	cbnz	r3, 80052b6 <__swbuf_r+0x12>
 80052b2:	f7fe f9f1 	bl	8003698 <__sinit>
 80052b6:	69a3      	ldr	r3, [r4, #24]
 80052b8:	60a3      	str	r3, [r4, #8]
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	071a      	lsls	r2, r3, #28
 80052be:	d501      	bpl.n	80052c4 <__swbuf_r+0x20>
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	b943      	cbnz	r3, 80052d6 <__swbuf_r+0x32>
 80052c4:	4621      	mov	r1, r4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f82a 	bl	8005320 <__swsetup_r>
 80052cc:	b118      	cbz	r0, 80052d6 <__swbuf_r+0x32>
 80052ce:	f04f 37ff 	mov.w	r7, #4294967295
 80052d2:	4638      	mov	r0, r7
 80052d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	6922      	ldr	r2, [r4, #16]
 80052da:	b2f6      	uxtb	r6, r6
 80052dc:	1a98      	subs	r0, r3, r2
 80052de:	6963      	ldr	r3, [r4, #20]
 80052e0:	4637      	mov	r7, r6
 80052e2:	4283      	cmp	r3, r0
 80052e4:	dc05      	bgt.n	80052f2 <__swbuf_r+0x4e>
 80052e6:	4621      	mov	r1, r4
 80052e8:	4628      	mov	r0, r5
 80052ea:	f7ff fc81 	bl	8004bf0 <_fflush_r>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d1ed      	bne.n	80052ce <__swbuf_r+0x2a>
 80052f2:	68a3      	ldr	r3, [r4, #8]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	60a3      	str	r3, [r4, #8]
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	6022      	str	r2, [r4, #0]
 80052fe:	701e      	strb	r6, [r3, #0]
 8005300:	6962      	ldr	r2, [r4, #20]
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	429a      	cmp	r2, r3
 8005306:	d004      	beq.n	8005312 <__swbuf_r+0x6e>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	07db      	lsls	r3, r3, #31
 800530c:	d5e1      	bpl.n	80052d2 <__swbuf_r+0x2e>
 800530e:	2e0a      	cmp	r6, #10
 8005310:	d1df      	bne.n	80052d2 <__swbuf_r+0x2e>
 8005312:	4621      	mov	r1, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f7ff fc6b 	bl	8004bf0 <_fflush_r>
 800531a:	2800      	cmp	r0, #0
 800531c:	d0d9      	beq.n	80052d2 <__swbuf_r+0x2e>
 800531e:	e7d6      	b.n	80052ce <__swbuf_r+0x2a>

08005320 <__swsetup_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4b29      	ldr	r3, [pc, #164]	@ (80053c8 <__swsetup_r+0xa8>)
 8005324:	4605      	mov	r5, r0
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	460c      	mov	r4, r1
 800532a:	b118      	cbz	r0, 8005334 <__swsetup_r+0x14>
 800532c:	6a03      	ldr	r3, [r0, #32]
 800532e:	b90b      	cbnz	r3, 8005334 <__swsetup_r+0x14>
 8005330:	f7fe f9b2 	bl	8003698 <__sinit>
 8005334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005338:	0719      	lsls	r1, r3, #28
 800533a:	d422      	bmi.n	8005382 <__swsetup_r+0x62>
 800533c:	06da      	lsls	r2, r3, #27
 800533e:	d407      	bmi.n	8005350 <__swsetup_r+0x30>
 8005340:	2209      	movs	r2, #9
 8005342:	602a      	str	r2, [r5, #0]
 8005344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	e033      	b.n	80053b8 <__swsetup_r+0x98>
 8005350:	0758      	lsls	r0, r3, #29
 8005352:	d512      	bpl.n	800537a <__swsetup_r+0x5a>
 8005354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005356:	b141      	cbz	r1, 800536a <__swsetup_r+0x4a>
 8005358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800535c:	4299      	cmp	r1, r3
 800535e:	d002      	beq.n	8005366 <__swsetup_r+0x46>
 8005360:	4628      	mov	r0, r5
 8005362:	f7fe fad5 	bl	8003910 <_free_r>
 8005366:	2300      	movs	r3, #0
 8005368:	6363      	str	r3, [r4, #52]	@ 0x34
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	2300      	movs	r3, #0
 8005374:	6063      	str	r3, [r4, #4]
 8005376:	6923      	ldr	r3, [r4, #16]
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	f043 0308 	orr.w	r3, r3, #8
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	6923      	ldr	r3, [r4, #16]
 8005384:	b94b      	cbnz	r3, 800539a <__swsetup_r+0x7a>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800538c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005390:	d003      	beq.n	800539a <__swsetup_r+0x7a>
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 f890 	bl	80054ba <__smakebuf_r>
 800539a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800539e:	f013 0201 	ands.w	r2, r3, #1
 80053a2:	d00a      	beq.n	80053ba <__swsetup_r+0x9a>
 80053a4:	2200      	movs	r2, #0
 80053a6:	60a2      	str	r2, [r4, #8]
 80053a8:	6962      	ldr	r2, [r4, #20]
 80053aa:	4252      	negs	r2, r2
 80053ac:	61a2      	str	r2, [r4, #24]
 80053ae:	6922      	ldr	r2, [r4, #16]
 80053b0:	b942      	cbnz	r2, 80053c4 <__swsetup_r+0xa4>
 80053b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053b6:	d1c5      	bne.n	8005344 <__swsetup_r+0x24>
 80053b8:	bd38      	pop	{r3, r4, r5, pc}
 80053ba:	0799      	lsls	r1, r3, #30
 80053bc:	bf58      	it	pl
 80053be:	6962      	ldrpl	r2, [r4, #20]
 80053c0:	60a2      	str	r2, [r4, #8]
 80053c2:	e7f4      	b.n	80053ae <__swsetup_r+0x8e>
 80053c4:	2000      	movs	r0, #0
 80053c6:	e7f7      	b.n	80053b8 <__swsetup_r+0x98>
 80053c8:	20000188 	.word	0x20000188

080053cc <_raise_r>:
 80053cc:	291f      	cmp	r1, #31
 80053ce:	b538      	push	{r3, r4, r5, lr}
 80053d0:	4605      	mov	r5, r0
 80053d2:	460c      	mov	r4, r1
 80053d4:	d904      	bls.n	80053e0 <_raise_r+0x14>
 80053d6:	2316      	movs	r3, #22
 80053d8:	6003      	str	r3, [r0, #0]
 80053da:	f04f 30ff 	mov.w	r0, #4294967295
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80053e2:	b112      	cbz	r2, 80053ea <_raise_r+0x1e>
 80053e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053e8:	b94b      	cbnz	r3, 80053fe <_raise_r+0x32>
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 f830 	bl	8005450 <_getpid_r>
 80053f0:	4622      	mov	r2, r4
 80053f2:	4601      	mov	r1, r0
 80053f4:	4628      	mov	r0, r5
 80053f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053fa:	f000 b817 	b.w	800542c <_kill_r>
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d00a      	beq.n	8005418 <_raise_r+0x4c>
 8005402:	1c59      	adds	r1, r3, #1
 8005404:	d103      	bne.n	800540e <_raise_r+0x42>
 8005406:	2316      	movs	r3, #22
 8005408:	6003      	str	r3, [r0, #0]
 800540a:	2001      	movs	r0, #1
 800540c:	e7e7      	b.n	80053de <_raise_r+0x12>
 800540e:	2100      	movs	r1, #0
 8005410:	4620      	mov	r0, r4
 8005412:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005416:	4798      	blx	r3
 8005418:	2000      	movs	r0, #0
 800541a:	e7e0      	b.n	80053de <_raise_r+0x12>

0800541c <raise>:
 800541c:	4b02      	ldr	r3, [pc, #8]	@ (8005428 <raise+0xc>)
 800541e:	4601      	mov	r1, r0
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	f7ff bfd3 	b.w	80053cc <_raise_r>
 8005426:	bf00      	nop
 8005428:	20000188 	.word	0x20000188

0800542c <_kill_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	2300      	movs	r3, #0
 8005430:	4d06      	ldr	r5, [pc, #24]	@ (800544c <_kill_r+0x20>)
 8005432:	4604      	mov	r4, r0
 8005434:	4608      	mov	r0, r1
 8005436:	4611      	mov	r1, r2
 8005438:	602b      	str	r3, [r5, #0]
 800543a:	f7fc f84b 	bl	80014d4 <_kill>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	d102      	bne.n	8005448 <_kill_r+0x1c>
 8005442:	682b      	ldr	r3, [r5, #0]
 8005444:	b103      	cbz	r3, 8005448 <_kill_r+0x1c>
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	bd38      	pop	{r3, r4, r5, pc}
 800544a:	bf00      	nop
 800544c:	200004f0 	.word	0x200004f0

08005450 <_getpid_r>:
 8005450:	f7fc b839 	b.w	80014c6 <_getpid>

08005454 <memchr>:
 8005454:	4603      	mov	r3, r0
 8005456:	b510      	push	{r4, lr}
 8005458:	b2c9      	uxtb	r1, r1
 800545a:	4402      	add	r2, r0
 800545c:	4293      	cmp	r3, r2
 800545e:	4618      	mov	r0, r3
 8005460:	d101      	bne.n	8005466 <memchr+0x12>
 8005462:	2000      	movs	r0, #0
 8005464:	e003      	b.n	800546e <memchr+0x1a>
 8005466:	7804      	ldrb	r4, [r0, #0]
 8005468:	3301      	adds	r3, #1
 800546a:	428c      	cmp	r4, r1
 800546c:	d1f6      	bne.n	800545c <memchr+0x8>
 800546e:	bd10      	pop	{r4, pc}

08005470 <__swhatbuf_r>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	460c      	mov	r4, r1
 8005474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005478:	4615      	mov	r5, r2
 800547a:	2900      	cmp	r1, #0
 800547c:	461e      	mov	r6, r3
 800547e:	b096      	sub	sp, #88	@ 0x58
 8005480:	da0c      	bge.n	800549c <__swhatbuf_r+0x2c>
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	2100      	movs	r1, #0
 8005486:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800548a:	bf14      	ite	ne
 800548c:	2340      	movne	r3, #64	@ 0x40
 800548e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005492:	2000      	movs	r0, #0
 8005494:	6031      	str	r1, [r6, #0]
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	b016      	add	sp, #88	@ 0x58
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	466a      	mov	r2, sp
 800549e:	f000 f849 	bl	8005534 <_fstat_r>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	dbed      	blt.n	8005482 <__swhatbuf_r+0x12>
 80054a6:	9901      	ldr	r1, [sp, #4]
 80054a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80054ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80054b0:	4259      	negs	r1, r3
 80054b2:	4159      	adcs	r1, r3
 80054b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054b8:	e7eb      	b.n	8005492 <__swhatbuf_r+0x22>

080054ba <__smakebuf_r>:
 80054ba:	898b      	ldrh	r3, [r1, #12]
 80054bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054be:	079d      	lsls	r5, r3, #30
 80054c0:	4606      	mov	r6, r0
 80054c2:	460c      	mov	r4, r1
 80054c4:	d507      	bpl.n	80054d6 <__smakebuf_r+0x1c>
 80054c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	2301      	movs	r3, #1
 80054d0:	6163      	str	r3, [r4, #20]
 80054d2:	b003      	add	sp, #12
 80054d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d6:	466a      	mov	r2, sp
 80054d8:	ab01      	add	r3, sp, #4
 80054da:	f7ff ffc9 	bl	8005470 <__swhatbuf_r>
 80054de:	9f00      	ldr	r7, [sp, #0]
 80054e0:	4605      	mov	r5, r0
 80054e2:	4639      	mov	r1, r7
 80054e4:	4630      	mov	r0, r6
 80054e6:	f7fe fdb7 	bl	8004058 <_malloc_r>
 80054ea:	b948      	cbnz	r0, 8005500 <__smakebuf_r+0x46>
 80054ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054f0:	059a      	lsls	r2, r3, #22
 80054f2:	d4ee      	bmi.n	80054d2 <__smakebuf_r+0x18>
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	81a3      	strh	r3, [r4, #12]
 80054fe:	e7e2      	b.n	80054c6 <__smakebuf_r+0xc>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800550a:	81a3      	strh	r3, [r4, #12]
 800550c:	9b01      	ldr	r3, [sp, #4]
 800550e:	6020      	str	r0, [r4, #0]
 8005510:	b15b      	cbz	r3, 800552a <__smakebuf_r+0x70>
 8005512:	4630      	mov	r0, r6
 8005514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005518:	f000 f81e 	bl	8005558 <_isatty_r>
 800551c:	b128      	cbz	r0, 800552a <__smakebuf_r+0x70>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	f023 0303 	bic.w	r3, r3, #3
 8005524:	f043 0301 	orr.w	r3, r3, #1
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	431d      	orrs	r5, r3
 800552e:	81a5      	strh	r5, [r4, #12]
 8005530:	e7cf      	b.n	80054d2 <__smakebuf_r+0x18>
	...

08005534 <_fstat_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	2300      	movs	r3, #0
 8005538:	4d06      	ldr	r5, [pc, #24]	@ (8005554 <_fstat_r+0x20>)
 800553a:	4604      	mov	r4, r0
 800553c:	4608      	mov	r0, r1
 800553e:	4611      	mov	r1, r2
 8005540:	602b      	str	r3, [r5, #0]
 8005542:	f7fc f826 	bl	8001592 <_fstat>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d102      	bne.n	8005550 <_fstat_r+0x1c>
 800554a:	682b      	ldr	r3, [r5, #0]
 800554c:	b103      	cbz	r3, 8005550 <_fstat_r+0x1c>
 800554e:	6023      	str	r3, [r4, #0]
 8005550:	bd38      	pop	{r3, r4, r5, pc}
 8005552:	bf00      	nop
 8005554:	200004f0 	.word	0x200004f0

08005558 <_isatty_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	2300      	movs	r3, #0
 800555c:	4d05      	ldr	r5, [pc, #20]	@ (8005574 <_isatty_r+0x1c>)
 800555e:	4604      	mov	r4, r0
 8005560:	4608      	mov	r0, r1
 8005562:	602b      	str	r3, [r5, #0]
 8005564:	f7fc f824 	bl	80015b0 <_isatty>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d102      	bne.n	8005572 <_isatty_r+0x1a>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	b103      	cbz	r3, 8005572 <_isatty_r+0x1a>
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	200004f0 	.word	0x200004f0

08005578 <_init>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr

08005584 <_fini>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr
