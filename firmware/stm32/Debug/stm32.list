
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000130c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001418  08001418  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001418  08001418  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001418  08001418  00003004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001418  08001418  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001418  08001418  00002418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800141c  0800141c  0000241c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001420  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000004  08001424  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001424  00003060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000219e  00000000  00000000  0000302d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a16  00000000  00000000  000051cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  00005be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001f5  00000000  00000000  00005ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157eb  00000000  00000000  0000609d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003d5b  00000000  00000000  0001b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b90c  00000000  00000000  0001f5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009aeef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a18  00000000  00000000  0009af34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0009b94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001400 	.word	0x08001400

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001400 	.word	0x08001400

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <delay_ms>:
#include "../../MiddleWares/MCAL/TIMR/TIM_interface.h"
#include "../../MiddleWares/MCAL/GPIO/GPIO_interface.h"
#include <stdint.h>

// Dummy delay function (replace with HAL_Delay or TIM delay if available)
void delay_ms(uint32_t ms) {
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e003      	b.n	800074a <delay_ms+0x16>
        __asm("NOP");
 8000742:	bf00      	nop
    for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3301      	adds	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000750:	fb03 f202 	mul.w	r2, r3, r2
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	429a      	cmp	r2, r3
 8000758:	d8f3      	bhi.n	8000742 <delay_ms+0xe>
    }
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
	...

08000768 <main>:

int main(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b08e      	sub	sp, #56	@ 0x38
 800076c:	af06      	add	r7, sp, #24
    // Example hardware configuration (adjust if needed)
    TIM_TypeDef *leftTimer = TIM3;    // PA6 (CH1)
 800076e:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <main+0x8c>)
 8000770:	61fb      	str	r3, [r7, #28]
    TIM_TypeDef *rightTimer = TIM2;   // PA0 (CH1)
 8000772:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000776:	61bb      	str	r3, [r7, #24]

    uint8_t leftChannel = 1;          // TIM3_CH1
 8000778:	2301      	movs	r3, #1
 800077a:	75fb      	strb	r3, [r7, #23]
    uint8_t rightChannel = 1;         // TIM2_CH1
 800077c:	2301      	movs	r3, #1
 800077e:	75bb      	strb	r3, [r7, #22]

    GPIO_TypeDef *dirPin1 = GPIOA;    // Direction pin for Right Motor
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <main+0x90>)
 8000782:	613b      	str	r3, [r7, #16]
    uint8_t dirPin1Num = 2;           // PA2 (no conflict with PWM)
 8000784:	2302      	movs	r3, #2
 8000786:	73fb      	strb	r3, [r7, #15]

    GPIO_TypeDef *dirPin2 = GPIOA;    // Direction pin for Left Motor
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <main+0x90>)
 800078a:	60bb      	str	r3, [r7, #8]
    uint8_t dirPin2Num = 3;           // PA3 (no conflict with PWM)
 800078c:	2303      	movs	r3, #3
 800078e:	71fb      	strb	r3, [r7, #7]

    // Initialize the car system
    CAR_init(leftTimer, leftChannel, 1000.0f, dirPin1, dirPin1Num,
 8000790:	7df9      	ldrb	r1, [r7, #23]
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	9305      	str	r3, [sp, #20]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	9304      	str	r3, [sp, #16]
 800079a:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <main+0x94>)
 800079c:	9303      	str	r3, [sp, #12]
 800079e:	7dbb      	ldrb	r3, [r7, #22]
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <main+0x94>)
 80007ae:	69f8      	ldr	r0, [r7, #28]
 80007b0:	f000 f892 	bl	80008d8 <CAR_init>
             rightTimer, rightChannel, 1000.0f, dirPin2, dirPin2Num);

    // Test forward movement
    CAR_forward(90.0f);  // 70% speed
 80007b4:	4812      	ldr	r0, [pc, #72]	@ (8000800 <main+0x98>)
 80007b6:	f000 f8df 	bl	8000978 <CAR_forward>
    delay_ms(2000);
 80007ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007be:	f7ff ffb9 	bl	8000734 <delay_ms>

    // Test backward movement
    CAR_backwards(90.0f);
 80007c2:	480f      	ldr	r0, [pc, #60]	@ (8000800 <main+0x98>)
 80007c4:	f000 f910 	bl	80009e8 <CAR_backwards>
    delay_ms(2000);
 80007c8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007cc:	f7ff ffb2 	bl	8000734 <delay_ms>

    // Test right turn
    CAR_right(90.0f);
 80007d0:	480b      	ldr	r0, [pc, #44]	@ (8000800 <main+0x98>)
 80007d2:	f000 f941 	bl	8000a58 <CAR_right>
    delay_ms(2000);
 80007d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007da:	f7ff ffab 	bl	8000734 <delay_ms>

    // Test left turn
    CAR_left(90.0f);
 80007de:	4808      	ldr	r0, [pc, #32]	@ (8000800 <main+0x98>)
 80007e0:	f000 f974 	bl	8000acc <CAR_left>
    delay_ms(2000);
 80007e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007e8:	f7ff ffa4 	bl	8000734 <delay_ms>

    // Test stop
    CAR_stop();
 80007ec:	f000 f9a8 	bl	8000b40 <CAR_stop>

    while (1) {
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <main+0x88>
 80007f4:	40000400 	.word	0x40000400
 80007f8:	40010800 	.word	0x40010800
 80007fc:	447a0000 	.word	0x447a0000
 8000800:	42b40000 	.word	0x42b40000

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <NMI_Handler+0x4>

0800080c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <MemManage_Handler+0x4>

0800081c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <UsageFault_Handler+0x4>

0800082c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f82e 	bl	80008b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000868:	f7ff fff8 	bl	800085c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800086c:	480b      	ldr	r0, [pc, #44]	@ (800089c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800086e:	490c      	ldr	r1, [pc, #48]	@ (80008a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000870:	4a0c      	ldr	r2, [pc, #48]	@ (80008a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a09      	ldr	r2, [pc, #36]	@ (80008a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000884:	4c09      	ldr	r4, [pc, #36]	@ (80008ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000892:	f000 fd91 	bl	80013b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000896:	f7ff ff67 	bl	8000768 <main>
  bx lr
 800089a:	4770      	bx	lr
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008a4:	08001420 	.word	0x08001420
  ldr r2, =_sbss
 80008a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008ac:	20000060 	.word	0x20000060

080008b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_2_IRQHandler>
	...

080008b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <HAL_IncTick+0x1c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <HAL_IncTick+0x20>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a03      	ldr	r2, [pc, #12]	@ (80008d4 <HAL_IncTick+0x20>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000020 	.word	0x20000020

080008d8 <CAR_init>:
GPIO_TypeDef *DirPin1_global;
GPIO_TypeDef *DirPin2_global;
uint8_t Dir1pinNumber_global;
uint8_t Dir2pinNumber_global;

void CAR_init(TIM_TypeDef *TimxLeft ,uint8_t ChannelLeft, float FrequencyLeft ,GPIO_TypeDef *DirPin1,uint8_t Dir1pinNumber,TIM_TypeDef *TimxRight ,uint8_t ChannelRight, float FrequencyRight, GPIO_TypeDef *DirPin2,uint8_t Dir2pinNumber) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	460b      	mov	r3, r1
 80008e6:	72fb      	strb	r3, [r7, #11]
    DirPin1_global = DirPin1;
 80008e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000958 <CAR_init+0x80>)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	6013      	str	r3, [r2, #0]
    DirPin2_global = DirPin2;
 80008ee:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <CAR_init+0x84>)
 80008f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f2:	6013      	str	r3, [r2, #0]
    Dir1pinNumber_global= Dir1pinNumber;
 80008f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000960 <CAR_init+0x88>)
 80008f6:	7e3b      	ldrb	r3, [r7, #24]
 80008f8:	7013      	strb	r3, [r2, #0]
    Dir2pinNumber_global=Dir2pinNumber;
 80008fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000964 <CAR_init+0x8c>)
 80008fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000900:	7013      	strb	r3, [r2, #0]
    GPIO_pinMode(DirPin1,Dir1pinNumber,OUTPUT);
 8000902:	7e3b      	ldrb	r3, [r7, #24]
 8000904:	2203      	movs	r2, #3
 8000906:	4619      	mov	r1, r3
 8000908:	6838      	ldr	r0, [r7, #0]
 800090a:	f000 f937 	bl	8000b7c <GPIO_pinMode>
    GPIO_pinMode(DirPin2,Dir2pinNumber,OUTPUT);
 800090e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000912:	2203      	movs	r2, #3
 8000914:	4619      	mov	r1, r3
 8000916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000918:	f000 f930 	bl	8000b7c <GPIO_pinMode>
    TimxLeft_global = TimxLeft;
 800091c:	4a12      	ldr	r2, [pc, #72]	@ (8000968 <CAR_init+0x90>)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6013      	str	r3, [r2, #0]
    TimxRight_global = TimxRight;
 8000922:	4a12      	ldr	r2, [pc, #72]	@ (800096c <CAR_init+0x94>)
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	6013      	str	r3, [r2, #0]
    ChannelLeft_global = ChannelLeft;
 8000928:	4a11      	ldr	r2, [pc, #68]	@ (8000970 <CAR_init+0x98>)
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	7013      	strb	r3, [r2, #0]
    ChannelRight_global= ChannelRight;
 800092e:	4a11      	ldr	r2, [pc, #68]	@ (8000974 <CAR_init+0x9c>)
 8000930:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000934:	7013      	strb	r3, [r2, #0]
    TIM_initPWM(TimxLeft, ChannelLeft , FrequencyLeft);
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	4619      	mov	r1, r3
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f000 f9ed 	bl	8000d1c <TIM_initPWM>
    TIM_initPWM(TimxRight , ChannelRight , FrequencyRight);
 8000942:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	69f8      	ldr	r0, [r7, #28]
 800094c:	f000 f9e6 	bl	8000d1c <TIM_initPWM>


}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000030 	.word	0x20000030
 800095c:	20000034 	.word	0x20000034
 8000960:	20000038 	.word	0x20000038
 8000964:	20000039 	.word	0x20000039
 8000968:	20000024 	.word	0x20000024
 800096c:	20000028 	.word	0x20000028
 8000970:	2000002c 	.word	0x2000002c
 8000974:	2000002d 	.word	0x2000002d

08000978 <CAR_forward>:
void CAR_forward(float Speed){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    TIM_writePWM(TimxRight_global , ChannelRight_global , Speed);
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <CAR_forward+0x50>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a11      	ldr	r2, [pc, #68]	@ (80009cc <CAR_forward+0x54>)
 8000986:	7811      	ldrb	r1, [r2, #0]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fbc2 	bl	8001114 <TIM_writePWM>
    TIM_writePWM(TimxLeft_global , ChannelLeft_global , Speed);
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <CAR_forward+0x58>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0f      	ldr	r2, [pc, #60]	@ (80009d4 <CAR_forward+0x5c>)
 8000996:	7811      	ldrb	r1, [r2, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fbba 	bl	8001114 <TIM_writePWM>
    GPIO_digitalWrite(DirPin1_global,Dir1pinNumber_global,HIGH);
 80009a0:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <CAR_forward+0x60>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <CAR_forward+0x64>)
 80009a6:	7811      	ldrb	r1, [r2, #0]
 80009a8:	2200      	movs	r2, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f98a 	bl	8000cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirPin2_global,Dir2pinNumber_global,LOW);
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <CAR_forward+0x68>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <CAR_forward+0x6c>)
 80009b6:	7811      	ldrb	r1, [r2, #0]
 80009b8:	2201      	movs	r2, #1
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f982 	bl	8000cc4 <GPIO_digitalWrite>



}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000028 	.word	0x20000028
 80009cc:	2000002d 	.word	0x2000002d
 80009d0:	20000024 	.word	0x20000024
 80009d4:	2000002c 	.word	0x2000002c
 80009d8:	20000030 	.word	0x20000030
 80009dc:	20000038 	.word	0x20000038
 80009e0:	20000034 	.word	0x20000034
 80009e4:	20000039 	.word	0x20000039

080009e8 <CAR_backwards>:
void CAR_backwards(float Speed){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    TIM_writePWM(TimxRight_global , ChannelRight_global , Speed);
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <CAR_backwards+0x50>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a11      	ldr	r2, [pc, #68]	@ (8000a3c <CAR_backwards+0x54>)
 80009f6:	7811      	ldrb	r1, [r2, #0]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fb8a 	bl	8001114 <TIM_writePWM>
    TIM_writePWM(TimxLeft_global , ChannelLeft_global , Speed);
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <CAR_backwards+0x58>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <CAR_backwards+0x5c>)
 8000a06:	7811      	ldrb	r1, [r2, #0]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fb82 	bl	8001114 <TIM_writePWM>
    GPIO_digitalWrite(DirPin1_global,Dir1pinNumber_global,LOW);
 8000a10:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <CAR_backwards+0x60>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <CAR_backwards+0x64>)
 8000a16:	7811      	ldrb	r1, [r2, #0]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f952 	bl	8000cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirPin2_global,Dir2pinNumber_global,HIGH);
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <CAR_backwards+0x68>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0b      	ldr	r2, [pc, #44]	@ (8000a54 <CAR_backwards+0x6c>)
 8000a26:	7811      	ldrb	r1, [r2, #0]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f94a 	bl	8000cc4 <GPIO_digitalWrite>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000028 	.word	0x20000028
 8000a3c:	2000002d 	.word	0x2000002d
 8000a40:	20000024 	.word	0x20000024
 8000a44:	2000002c 	.word	0x2000002c
 8000a48:	20000030 	.word	0x20000030
 8000a4c:	20000038 	.word	0x20000038
 8000a50:	20000034 	.word	0x20000034
 8000a54:	20000039 	.word	0x20000039

08000a58 <CAR_right>:
void CAR_right(float Speed){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
    TIM_writePWM(TimxRight_global , ChannelRight_global , 0);
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <CAR_right+0x54>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <CAR_right+0x58>)
 8000a66:	7811      	ldrb	r1, [r2, #0]
 8000a68:	f04f 0200 	mov.w	r2, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fb51 	bl	8001114 <TIM_writePWM>
    TIM_writePWM(TimxLeft_global , ChannelLeft_global , Speed);
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <CAR_right+0x5c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a10      	ldr	r2, [pc, #64]	@ (8000ab8 <CAR_right+0x60>)
 8000a78:	7811      	ldrb	r1, [r2, #0]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fb49 	bl	8001114 <TIM_writePWM>
    GPIO_digitalWrite(DirPin1_global,Dir1pinNumber_global,HIGH);
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <CAR_right+0x64>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <CAR_right+0x68>)
 8000a88:	7811      	ldrb	r1, [r2, #0]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f919 	bl	8000cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirPin2_global,Dir2pinNumber_global,LOW);
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <CAR_right+0x6c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <CAR_right+0x70>)
 8000a98:	7811      	ldrb	r1, [r2, #0]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f911 	bl	8000cc4 <GPIO_digitalWrite>

}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000028 	.word	0x20000028
 8000ab0:	2000002d 	.word	0x2000002d
 8000ab4:	20000024 	.word	0x20000024
 8000ab8:	2000002c 	.word	0x2000002c
 8000abc:	20000030 	.word	0x20000030
 8000ac0:	20000038 	.word	0x20000038
 8000ac4:	20000034 	.word	0x20000034
 8000ac8:	20000039 	.word	0x20000039

08000acc <CAR_left>:
void CAR_left(float Speed){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    TIM_writePWM(TimxRight_global , ChannelRight_global , Speed);
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <CAR_left+0x54>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a12      	ldr	r2, [pc, #72]	@ (8000b24 <CAR_left+0x58>)
 8000ada:	7811      	ldrb	r1, [r2, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fb18 	bl	8001114 <TIM_writePWM>
    TIM_writePWM(TimxLeft_global , ChannelLeft_global , 0);
 8000ae4:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <CAR_left+0x5c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a10      	ldr	r2, [pc, #64]	@ (8000b2c <CAR_left+0x60>)
 8000aea:	7811      	ldrb	r1, [r2, #0]
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fb0f 	bl	8001114 <TIM_writePWM>
    GPIO_digitalWrite(DirPin1_global,Dir1pinNumber_global,HIGH);
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <CAR_left+0x64>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a0e      	ldr	r2, [pc, #56]	@ (8000b34 <CAR_left+0x68>)
 8000afc:	7811      	ldrb	r1, [r2, #0]
 8000afe:	2200      	movs	r2, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f8df 	bl	8000cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirPin2_global,Dir2pinNumber_global,LOW);
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <CAR_left+0x6c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <CAR_left+0x70>)
 8000b0c:	7811      	ldrb	r1, [r2, #0]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f8d7 	bl	8000cc4 <GPIO_digitalWrite>

}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000028 	.word	0x20000028
 8000b24:	2000002d 	.word	0x2000002d
 8000b28:	20000024 	.word	0x20000024
 8000b2c:	2000002c 	.word	0x2000002c
 8000b30:	20000030 	.word	0x20000030
 8000b34:	20000038 	.word	0x20000038
 8000b38:	20000034 	.word	0x20000034
 8000b3c:	20000039 	.word	0x20000039

08000b40 <CAR_stop>:
void CAR_stop(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
    TIM_writePWM(TimxRight_global , ChannelRight_global , 0);
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <CAR_stop+0x2c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a09      	ldr	r2, [pc, #36]	@ (8000b70 <CAR_stop+0x30>)
 8000b4a:	7811      	ldrb	r1, [r2, #0]
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fadf 	bl	8001114 <TIM_writePWM>
    TIM_writePWM(TimxLeft_global , ChannelLeft_global , 0);
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <CAR_stop+0x34>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <CAR_stop+0x38>)
 8000b5c:	7811      	ldrb	r1, [r2, #0]
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fad6 	bl	8001114 <TIM_writePWM>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000028 	.word	0x20000028
 8000b70:	2000002d 	.word	0x2000002d
 8000b74:	20000024 	.word	0x20000024
 8000b78:	2000002c 	.word	0x2000002c

08000b7c <GPIO_pinMode>:
#include "GPIO_interface.h"

void GPIO_pinMode(GPIO_TypeDef *GPIOX, uint8_t pinNumber, GPIO_MODE mode){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8000b8c:	78fb      	ldrb	r3, [r7, #3]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	f200 808b 	bhi.w	8000caa <GPIO_pinMode+0x12e>
		return;
	}
	// Initialize the clock of port x
    if (GPIOX == GPIOA) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a47      	ldr	r2, [pc, #284]	@ (8000cb4 <GPIO_pinMode+0x138>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d106      	bne.n	8000baa <GPIO_pinMode+0x2e>
		SET_BIT(RCC->APB2ENR, 2);
 8000b9c:	4b46      	ldr	r3, [pc, #280]	@ (8000cb8 <GPIO_pinMode+0x13c>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a45      	ldr	r2, [pc, #276]	@ (8000cb8 <GPIO_pinMode+0x13c>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	e014      	b.n	8000bd4 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOB) {
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a43      	ldr	r2, [pc, #268]	@ (8000cbc <GPIO_pinMode+0x140>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d106      	bne.n	8000bc0 <GPIO_pinMode+0x44>
		SET_BIT(RCC->APB2ENR, 3);
 8000bb2:	4b41      	ldr	r3, [pc, #260]	@ (8000cb8 <GPIO_pinMode+0x13c>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	4a40      	ldr	r2, [pc, #256]	@ (8000cb8 <GPIO_pinMode+0x13c>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6193      	str	r3, [r2, #24]
 8000bbe:	e009      	b.n	8000bd4 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOC) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8000cc0 <GPIO_pinMode+0x144>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d105      	bne.n	8000bd4 <GPIO_pinMode+0x58>
		SET_BIT(RCC->APB2ENR, 4);
 8000bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb8 <GPIO_pinMode+0x13c>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8000cb8 <GPIO_pinMode+0x13c>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6193      	str	r3, [r2, #24]
    }
	volatile uint8_t pinIndex = pinNumber % 8;
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	72fb      	strb	r3, [r7, #11]

	volatile uint32_t *CRX;
	if (pinNumber < 8 && pinNumber >= 0){
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	2b07      	cmp	r3, #7
 8000be2:	d802      	bhi.n	8000bea <GPIO_pinMode+0x6e>
		CRX = &GPIOX->CRL;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	e008      	b.n	8000bfc <GPIO_pinMode+0x80>
	}else if(pinNumber >= 8 && pinNumber < 16){
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	2b07      	cmp	r3, #7
 8000bee:	d905      	bls.n	8000bfc <GPIO_pinMode+0x80>
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	2b0f      	cmp	r3, #15
 8000bf4:	d802      	bhi.n	8000bfc <GPIO_pinMode+0x80>
		CRX = &GPIOX->CRH;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	60fb      	str	r3, [r7, #12]
	}
	// Zero the CRX register's specific pin mode not the whole register
	*CRX &= ~(0xF << (4*(pinIndex)));
 8000bfc:	7afb      	ldrb	r3, [r7, #11]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	601a      	str	r2, [r3, #0]
	if (mode == OUTPUT){
 8000c14:	78bb      	ldrb	r3, [r7, #2]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d10a      	bne.n	8000c30 <GPIO_pinMode+0xb4>
		*CRX |= (0x2 << (4*(pinIndex)));
 8000c1a:	7afb      	ldrb	r3, [r7, #11]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	2202      	movs	r2, #2
 8000c22:	409a      	lsls	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	e03d      	b.n	8000cac <GPIO_pinMode+0x130>
	}else if (mode == INPUT_FLOAT){
 8000c30:	78bb      	ldrb	r3, [r7, #2]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d10a      	bne.n	8000c4c <GPIO_pinMode+0xd0>
		*CRX |= (0x4 << (4*(pinIndex)));
 8000c36:	7afb      	ldrb	r3, [r7, #11]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e02f      	b.n	8000cac <GPIO_pinMode+0x130>
	}else if (mode == INPUT_PULLUP){
 8000c4c:	78bb      	ldrb	r3, [r7, #2]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d113      	bne.n	8000c7a <GPIO_pinMode+0xfe>
		*CRX |= (0x8 << (4*(pinIndex)));
 8000c52:	7afb      	ldrb	r3, [r7, #11]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	2208      	movs	r2, #8
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	601a      	str	r2, [r3, #0]
		SET_BIT(GPIOX->ODR, pinNumber);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	78fa      	ldrb	r2, [r7, #3]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c72:	431a      	orrs	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	e018      	b.n	8000cac <GPIO_pinMode+0x130>
	}else if (mode == INPUT_PULLDOWN){
 8000c7a:	78bb      	ldrb	r3, [r7, #2]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d115      	bne.n	8000cac <GPIO_pinMode+0x130>
		*CRX |= (0x8 << (4*(pinIndex)));
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	2208      	movs	r2, #8
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	78fa      	ldrb	r2, [r7, #3]
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	e000      	b.n	8000cac <GPIO_pinMode+0x130>
		return;
 8000caa:	bf00      	nop
	}
}
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	40011000 	.word	0x40011000

08000cc4 <GPIO_digitalWrite>:

void GPIO_digitalWrite(GPIO_TypeDef *GPIOX, uint8_t pinNumber, PIN_LEVEL level){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	d81a      	bhi.n	8000d10 <GPIO_digitalWrite+0x4c>
		return;
	}
	if (level == HIGH){
 8000cda:	78bb      	ldrb	r3, [r7, #2]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d109      	bne.n	8000cf4 <GPIO_digitalWrite+0x30>
		SET_BIT(GPIOX->ODR, pinNumber);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	78fa      	ldrb	r2, [r7, #3]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	e00e      	b.n	8000d12 <GPIO_digitalWrite+0x4e>
	}else if(level == LOW){
 8000cf4:	78bb      	ldrb	r3, [r7, #2]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10b      	bne.n	8000d12 <GPIO_digitalWrite+0x4e>
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	2101      	movs	r1, #1
 8000d02:	fa01 f202 	lsl.w	r2, r1, r2
 8000d06:	43d2      	mvns	r2, r2
 8000d08:	401a      	ands	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	e000      	b.n	8000d12 <GPIO_digitalWrite+0x4e>
		return;
 8000d10:	bf00      	nop
	}
}
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
	...

08000d1c <TIM_initPWM>:
volatile void (*callback3)();
volatile void (*callback4)();
uint32_t millis=0;
uint16_t trigTime_ms_global ;

void TIM_initPWM(TIM_TypeDef *TIMX, uint8_t channel, float frequency){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	460b      	mov	r3, r1
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	72fb      	strb	r3, [r7, #11]
	if (channel < 1 || channel > 4){
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 81eb 	beq.w	8001108 <TIM_initPWM+0x3ec>
 8000d32:	7afb      	ldrb	r3, [r7, #11]
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	f200 81e7 	bhi.w	8001108 <TIM_initPWM+0x3ec>
		return;
	}
	// init clock and corresponding pin in the GPIO
	if (TIMX == TIM2) {
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d40:	d150      	bne.n	8000de4 <TIM_initPWM+0xc8>
	    SET_BIT(RCC->APB1ENR, 0); // Enable TIM2 clock
 8000d42:	4b9a      	ldr	r3, [pc, #616]	@ (8000fac <TIM_initPWM+0x290>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a99      	ldr	r2, [pc, #612]	@ (8000fac <TIM_initPWM+0x290>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	61d3      	str	r3, [r2, #28]
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // Enable GPIOA clock
 8000d4e:	4b97      	ldr	r3, [pc, #604]	@ (8000fac <TIM_initPWM+0x290>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a96      	ldr	r2, [pc, #600]	@ (8000fac <TIM_initPWM+0x290>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6193      	str	r3, [r2, #24]
	    switch (channel) {
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	f200 80e8 	bhi.w	8000f34 <TIM_initPWM+0x218>
 8000d64:	a201      	add	r2, pc, #4	@ (adr r2, 8000d6c <TIM_initPWM+0x50>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000d7d 	.word	0x08000d7d
 8000d70:	08000d97 	.word	0x08000d97
 8000d74:	08000db1 	.word	0x08000db1
 8000d78:	08000dcb 	.word	0x08000dcb
	    case 1: // PA0
	        GPIOA->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8000d7c:	4b8c      	ldr	r3, [pc, #560]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a8b      	ldr	r2, [pc, #556]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000d82:	f023 030f 	bic.w	r3, r3, #15
 8000d86:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_CNF0_1); // 2 MHz, AF PP
 8000d88:	4b89      	ldr	r3, [pc, #548]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a88      	ldr	r2, [pc, #544]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000d8e:	f043 030a 	orr.w	r3, r3, #10
 8000d92:	6013      	str	r3, [r2, #0]
	        break;
 8000d94:	e0ce      	b.n	8000f34 <TIM_initPWM+0x218>
	    case 2: // PA1
	        GPIOA->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);
 8000d96:	4b86      	ldr	r3, [pc, #536]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a85      	ldr	r2, [pc, #532]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000d9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000da0:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1);
 8000da2:	4b83      	ldr	r3, [pc, #524]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a82      	ldr	r2, [pc, #520]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000da8:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000dac:	6013      	str	r3, [r2, #0]
	        break;
 8000dae:	e0c1      	b.n	8000f34 <TIM_initPWM+0x218>
	    case 3: // PA2
	        GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8000db0:	4b7f      	ldr	r3, [pc, #508]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a7e      	ldr	r2, [pc, #504]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000db6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000dba:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_CNF2_1);
 8000dbc:	4b7c      	ldr	r3, [pc, #496]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a7b      	ldr	r2, [pc, #492]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000dc2:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 8000dc6:	6013      	str	r3, [r2, #0]
	        break;
 8000dc8:	e0b4      	b.n	8000f34 <TIM_initPWM+0x218>
	    case 4: // PA3
	        GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8000dca:	4b79      	ldr	r3, [pc, #484]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a78      	ldr	r2, [pc, #480]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000dd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000dd4:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE3_1 | GPIO_CRL_CNF3_1);
 8000dd6:	4b76      	ldr	r3, [pc, #472]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a75      	ldr	r2, [pc, #468]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000ddc:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000de0:	6013      	str	r3, [r2, #0]
	        break;
 8000de2:	e0a7      	b.n	8000f34 <TIM_initPWM+0x218>
	    }
	} else if (TIMX == TIM3) {
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4a73      	ldr	r2, [pc, #460]	@ (8000fb4 <TIM_initPWM+0x298>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d14f      	bne.n	8000e8c <TIM_initPWM+0x170>
	    SET_BIT(RCC->APB1ENR, 1); // Enable TIM3 clock
 8000dec:	4b6f      	ldr	r3, [pc, #444]	@ (8000fac <TIM_initPWM+0x290>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	4a6e      	ldr	r2, [pc, #440]	@ (8000fac <TIM_initPWM+0x290>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	61d3      	str	r3, [r2, #28]
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN; // Enable GPIOA & GPIOB
 8000df8:	4b6c      	ldr	r3, [pc, #432]	@ (8000fac <TIM_initPWM+0x290>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a6b      	ldr	r2, [pc, #428]	@ (8000fac <TIM_initPWM+0x290>)
 8000dfe:	f043 030c 	orr.w	r3, r3, #12
 8000e02:	6193      	str	r3, [r2, #24]
	    switch (channel) {
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	f200 8093 	bhi.w	8000f34 <TIM_initPWM+0x218>
 8000e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e14 <TIM_initPWM+0xf8>)
 8000e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e14:	08000e25 	.word	0x08000e25
 8000e18:	08000e3f 	.word	0x08000e3f
 8000e1c:	08000e59 	.word	0x08000e59
 8000e20:	08000e73 	.word	0x08000e73
	    case 1: // PA6
	        GPIOA->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8000e24:	4b62      	ldr	r3, [pc, #392]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a61      	ldr	r2, [pc, #388]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000e2a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000e2e:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1);
 8000e30:	4b5f      	ldr	r3, [pc, #380]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a5e      	ldr	r2, [pc, #376]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000e36:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8000e3a:	6013      	str	r3, [r2, #0]
	        break;
 8000e3c:	e07a      	b.n	8000f34 <TIM_initPWM+0x218>
	    case 2: // PA7
	        GPIOA->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8000e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a5b      	ldr	r2, [pc, #364]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000e44:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000e48:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1);
 8000e4a:	4b59      	ldr	r3, [pc, #356]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a58      	ldr	r2, [pc, #352]	@ (8000fb0 <TIM_initPWM+0x294>)
 8000e50:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 8000e54:	6013      	str	r3, [r2, #0]
	        break;
 8000e56:	e06d      	b.n	8000f34 <TIM_initPWM+0x218>
	    case 3: // PB0
	        GPIOB->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8000e58:	4b57      	ldr	r3, [pc, #348]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a56      	ldr	r2, [pc, #344]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000e5e:	f023 030f 	bic.w	r3, r3, #15
 8000e62:	6013      	str	r3, [r2, #0]
	        GPIOB->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_CNF0_1);
 8000e64:	4b54      	ldr	r3, [pc, #336]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a53      	ldr	r2, [pc, #332]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000e6a:	f043 030a 	orr.w	r3, r3, #10
 8000e6e:	6013      	str	r3, [r2, #0]
	        break;
 8000e70:	e060      	b.n	8000f34 <TIM_initPWM+0x218>
	    case 4: // PB1
	        GPIOB->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);
 8000e72:	4b51      	ldr	r3, [pc, #324]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a50      	ldr	r2, [pc, #320]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000e78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000e7c:	6013      	str	r3, [r2, #0]
	        GPIOB->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1);
 8000e7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a4d      	ldr	r2, [pc, #308]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000e84:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000e88:	6013      	str	r3, [r2, #0]
	        break;
 8000e8a:	e053      	b.n	8000f34 <TIM_initPWM+0x218>
	    }
	} else if (TIMX == TIM4) {
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4a4b      	ldr	r2, [pc, #300]	@ (8000fbc <TIM_initPWM+0x2a0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d14f      	bne.n	8000f34 <TIM_initPWM+0x218>
	    SET_BIT(RCC->APB1ENR, 2); // Enable TIM4 clock
 8000e94:	4b45      	ldr	r3, [pc, #276]	@ (8000fac <TIM_initPWM+0x290>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	4a44      	ldr	r2, [pc, #272]	@ (8000fac <TIM_initPWM+0x290>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	61d3      	str	r3, [r2, #28]
	    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; // Enable GPIOB clock
 8000ea0:	4b42      	ldr	r3, [pc, #264]	@ (8000fac <TIM_initPWM+0x290>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a41      	ldr	r2, [pc, #260]	@ (8000fac <TIM_initPWM+0x290>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6193      	str	r3, [r2, #24]
	    switch (channel) {
 8000eac:	7afb      	ldrb	r3, [r7, #11]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d83f      	bhi.n	8000f34 <TIM_initPWM+0x218>
 8000eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8000ebc <TIM_initPWM+0x1a0>)
 8000eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eba:	bf00      	nop
 8000ebc:	08000ecd 	.word	0x08000ecd
 8000ec0:	08000ee7 	.word	0x08000ee7
 8000ec4:	08000f01 	.word	0x08000f01
 8000ec8:	08000f1b 	.word	0x08000f1b
	    case 1: // PB6
	        GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8000ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a39      	ldr	r2, [pc, #228]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000ed2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000ed6:	6013      	str	r3, [r2, #0]
	        GPIOB->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1);
 8000ed8:	4b37      	ldr	r3, [pc, #220]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a36      	ldr	r2, [pc, #216]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000ede:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8000ee2:	6013      	str	r3, [r2, #0]
	        break;
 8000ee4:	e026      	b.n	8000f34 <TIM_initPWM+0x218>
	    case 2: // PB7
	        GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8000ee6:	4b34      	ldr	r3, [pc, #208]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a33      	ldr	r2, [pc, #204]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000eec:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000ef0:	6013      	str	r3, [r2, #0]
	        GPIOB->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1);
 8000ef2:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a30      	ldr	r2, [pc, #192]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000ef8:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 8000efc:	6013      	str	r3, [r2, #0]
	        break;
 8000efe:	e019      	b.n	8000f34 <TIM_initPWM+0x218>
	    case 3: // PB8
	        GPIOB->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 8000f00:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000f06:	f023 030f 	bic.w	r3, r3, #15
 8000f0a:	6053      	str	r3, [r2, #4]
	        GPIOB->CRH |= (GPIO_CRH_MODE8_1 | GPIO_CRH_CNF8_1);
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	4a29      	ldr	r2, [pc, #164]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000f12:	f043 030a 	orr.w	r3, r3, #10
 8000f16:	6053      	str	r3, [r2, #4]
	        break;
 8000f18:	e00c      	b.n	8000f34 <TIM_initPWM+0x218>
	    case 4: // PB9
	        GPIOB->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 8000f1a:	4b27      	ldr	r3, [pc, #156]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	4a26      	ldr	r2, [pc, #152]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000f20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f24:	6053      	str	r3, [r2, #4]
	        GPIOB->CRH |= (GPIO_CRH_MODE9_1 | GPIO_CRH_CNF9_1);
 8000f26:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4a23      	ldr	r2, [pc, #140]	@ (8000fb8 <TIM_initPWM+0x29c>)
 8000f2c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000f30:	6053      	str	r3, [r2, #4]
	        break;
 8000f32:	bf00      	nop
	    }
	}

	// direction upward
	CLEAR_BIT(TIMX->CR1, 4);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f023 0210 	bic.w	r2, r3, #16
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	601a      	str	r2, [r3, #0]
	// mode 'edge aligned'
	CLEAR_BIT(TIMX->CR1, 5);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 0220 	bic.w	r2, r3, #32
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIMX->CR1, 6);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	601a      	str	r2, [r3, #0]
	// set the ARR preload
	SET_BIT(TIMX->CR1, 7);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	601a      	str	r2, [r3, #0]
	//enable the capture compare corresponding pin
	SET_BIT(TIMX->CCER, (4*(channel-1)));
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	7afa      	ldrb	r2, [r7, #11]
 8000f6a:	3a01      	subs	r2, #1
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	431a      	orrs	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	621a      	str	r2, [r3, #32]
	// choose the polarity of the pin to active high
	CLEAR_BIT(TIMX->CCER, (4*(channel-1)+1));
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	7afa      	ldrb	r2, [r7, #11]
 8000f80:	3a01      	subs	r2, #1
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	3201      	adds	r2, #1
 8000f86:	2101      	movs	r1, #1
 8000f88:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8c:	43d2      	mvns	r2, r2
 8000f8e:	401a      	ands	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	621a      	str	r2, [r3, #32]

	volatile uint32_t *CCMRX;
	uint8_t modChannel = 1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	76fb      	strb	r3, [r7, #27]
	if (channel <= 2){
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d810      	bhi.n	8000fc0 <TIM_initPWM+0x2a4>
		CCMRX = &TIMX->CCMR1;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3318      	adds	r3, #24
 8000fa2:	61fb      	str	r3, [r7, #28]
		modChannel = channel;
 8000fa4:	7afb      	ldrb	r3, [r7, #11]
 8000fa6:	76fb      	strb	r3, [r7, #27]
 8000fa8:	e010      	b.n	8000fcc <TIM_initPWM+0x2b0>
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40000400 	.word	0x40000400
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	40000800 	.word	0x40000800
	}else{
		CCMRX = &TIMX->CCMR2;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	331c      	adds	r3, #28
 8000fc4:	61fb      	str	r3, [r7, #28]
		modChannel = channel-2;
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	76fb      	strb	r3, [r7, #27]
	}
	// set the channel mode to be output
	CLEAR_BIT(*CCMRX, (8*(modChannel-1)));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	7efa      	ldrb	r2, [r7, #27]
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	00d2      	lsls	r2, r2, #3
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fdc:	43d2      	mvns	r2, r2
 8000fde:	401a      	ands	r2, r3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(*CCMRX, (8*(modChannel-1)+1));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	7efa      	ldrb	r2, [r7, #27]
 8000fea:	3a01      	subs	r2, #1
 8000fec:	00d2      	lsls	r2, r2, #3
 8000fee:	3201      	adds	r2, #1
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	43d2      	mvns	r2, r2
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	601a      	str	r2, [r3, #0]
	// set the channel preload enable
	SET_BIT(*CCMRX, (8*(modChannel-1)+3));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	7efa      	ldrb	r2, [r7, #27]
 8001004:	3a01      	subs	r2, #1
 8001006:	00d2      	lsls	r2, r2, #3
 8001008:	3203      	adds	r2, #3
 800100a:	2101      	movs	r1, #1
 800100c:	fa01 f202 	lsl.w	r2, r1, r2
 8001010:	431a      	orrs	r2, r3
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	601a      	str	r2, [r3, #0]
	// select PWM mode 1
	CLEAR_BIT(*CCMRX, (8*(modChannel-1)+4));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	7efa      	ldrb	r2, [r7, #27]
 800101c:	3a01      	subs	r2, #1
 800101e:	00d2      	lsls	r2, r2, #3
 8001020:	3204      	adds	r2, #4
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	43d2      	mvns	r2, r2
 800102a:	401a      	ands	r2, r3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	601a      	str	r2, [r3, #0]
	SET_BIT(*CCMRX, (8*(modChannel-1)+5));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	7efa      	ldrb	r2, [r7, #27]
 8001036:	3a01      	subs	r2, #1
 8001038:	00d2      	lsls	r2, r2, #3
 800103a:	3205      	adds	r2, #5
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	431a      	orrs	r2, r3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	601a      	str	r2, [r3, #0]
	SET_BIT(*CCMRX, (8*(modChannel-1)+6));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	7efa      	ldrb	r2, [r7, #27]
 800104e:	3a01      	subs	r2, #1
 8001050:	00d2      	lsls	r2, r2, #3
 8001052:	3206      	adds	r2, #6
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	431a      	orrs	r2, r3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	601a      	str	r2, [r3, #0]

	// setting the psc with zero
	TIMX->PSC = 0;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
	// calculating prescaler and arr for specific frequency
	float currentARR = (8000000/((frequency*(TIMX->PSC+1))))-1;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106a:	3301      	adds	r3, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f923 	bl	80002b8 <__aeabi_ui2f>
 8001072:	4603      	mov	r3, r0
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f976 	bl	8000368 <__aeabi_fmul>
 800107c:	4603      	mov	r3, r0
 800107e:	4619      	mov	r1, r3
 8001080:	4823      	ldr	r0, [pc, #140]	@ (8001110 <TIM_initPWM+0x3f4>)
 8001082:	f7ff fa25 	bl	80004d0 <__aeabi_fdiv>
 8001086:	4603      	mov	r3, r0
 8001088:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f861 	bl	8000154 <__aeabi_fsub>
 8001092:	4603      	mov	r3, r0
 8001094:	617b      	str	r3, [r7, #20]
	while (currentARR >= 65536){
 8001096:	e01c      	b.n	80010d2 <TIM_initPWM+0x3b6>
		TIMX->PSC += 1;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	629a      	str	r2, [r3, #40]	@ 0x28
		currentARR = (8000000/((frequency*(TIMX->PSC+1))))-1;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a6:	3301      	adds	r3, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f905 	bl	80002b8 <__aeabi_ui2f>
 80010ae:	4603      	mov	r3, r0
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f958 	bl	8000368 <__aeabi_fmul>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4814      	ldr	r0, [pc, #80]	@ (8001110 <TIM_initPWM+0x3f4>)
 80010be:	f7ff fa07 	bl	80004d0 <__aeabi_fdiv>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f843 	bl	8000154 <__aeabi_fsub>
 80010ce:	4603      	mov	r3, r0
 80010d0:	617b      	str	r3, [r7, #20]
	while (currentARR >= 65536){
 80010d2:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff faf8 	bl	80006cc <__aeabi_fcmpge>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1da      	bne.n	8001098 <TIM_initPWM+0x37c>
	}
	TIMX->ARR = currentARR;
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f7ff fb06 	bl	80006f4 <__aeabi_f2uiz>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	SET_BIT(TIMX->EGR, 0);  // UG: Update Generation
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f043 0201 	orr.w	r2, r3, #1
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	615a      	str	r2, [r3, #20]
	// start counting
	SET_BIT(TIMX->CR1, 0);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e000      	b.n	800110a <TIM_initPWM+0x3ee>
		return;
 8001108:	bf00      	nop
}
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	4af42400 	.word	0x4af42400

08001114 <TIM_writePWM>:

void TIM_writePWM(TIM_TypeDef *TIMX, uint8_t channel, float dutyCycle){
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	460b      	mov	r3, r1
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	72fb      	strb	r3, [r7, #11]
	if (channel < 1 || channel > 4 || dutyCycle < 0 || dutyCycle > 100){
 8001122:	7afb      	ldrb	r3, [r7, #11]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d044      	beq.n	80011b2 <TIM_writePWM+0x9e>
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	2b04      	cmp	r3, #4
 800112c:	d841      	bhi.n	80011b2 <TIM_writePWM+0x9e>
 800112e:	f04f 0100 	mov.w	r1, #0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fab6 	bl	80006a4 <__aeabi_fcmplt>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d139      	bne.n	80011b2 <TIM_writePWM+0x9e>
 800113e:	491f      	ldr	r1, [pc, #124]	@ (80011bc <TIM_writePWM+0xa8>)
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff facd 	bl	80006e0 <__aeabi_fcmpgt>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d132      	bne.n	80011b2 <TIM_writePWM+0x9e>
		return;
	}
	volatile uint32_t *CCRX;
	if (channel == 1) {
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d103      	bne.n	800115a <TIM_writePWM+0x46>
		CCRX = &TIMX->CCR1;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3334      	adds	r3, #52	@ 0x34
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e013      	b.n	8001182 <TIM_writePWM+0x6e>
    } else if (channel == 2) {
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d103      	bne.n	8001168 <TIM_writePWM+0x54>
    	CCRX = &TIMX->CCR2;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3338      	adds	r3, #56	@ 0x38
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	e00c      	b.n	8001182 <TIM_writePWM+0x6e>
    } else if (channel == 3) {
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d103      	bne.n	8001176 <TIM_writePWM+0x62>
    	CCRX = &TIMX->CCR3;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	333c      	adds	r3, #60	@ 0x3c
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	e005      	b.n	8001182 <TIM_writePWM+0x6e>
    } else if (channel == 4) {
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	2b04      	cmp	r3, #4
 800117a:	d102      	bne.n	8001182 <TIM_writePWM+0x6e>
    	CCRX = &TIMX->CCR4;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3340      	adds	r3, #64	@ 0x40
 8001180:	617b      	str	r3, [r7, #20]
    }
	*CCRX = (dutyCycle/100)*(TIMX->ARR);
 8001182:	490e      	ldr	r1, [pc, #56]	@ (80011bc <TIM_writePWM+0xa8>)
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff f9a3 	bl	80004d0 <__aeabi_fdiv>
 800118a:	4603      	mov	r3, r0
 800118c:	461c      	mov	r4, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f890 	bl	80002b8 <__aeabi_ui2f>
 8001198:	4603      	mov	r3, r0
 800119a:	4619      	mov	r1, r3
 800119c:	4620      	mov	r0, r4
 800119e:	f7ff f8e3 	bl	8000368 <__aeabi_fmul>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff faa5 	bl	80006f4 <__aeabi_f2uiz>
 80011aa:	4602      	mov	r2, r0
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e000      	b.n	80011b4 <TIM_writePWM+0xa0>
		return;
 80011b2:	bf00      	nop
}
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	42c80000 	.word	0x42c80000

080011c0 <TIM2_IRQHandler>:
{
    return millis;
}


void TIM2_IRQHandler(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC1IF){
 80011c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d016      	beq.n	8001200 <TIM2_IRQHandler+0x40>
		TIM2->SR &= ~TIM_SR_CC1IF;
 80011d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011dc:	f023 0302 	bic.w	r3, r3, #2
 80011e0:	6113      	str	r3, [r2, #16]
		TIM2->CCR1 += trigTime_ms_global;
 80011e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <TIM2_IRQHandler+0x98>)
 80011ea:	8812      	ldrh	r2, [r2, #0]
 80011ec:	4611      	mov	r1, r2
 80011ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011f2:	440b      	add	r3, r1
 80011f4:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <TIM2_IRQHandler+0x9c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a17      	ldr	r2, [pc, #92]	@ (800125c <TIM2_IRQHandler+0x9c>)
 80011fe:	6013      	str	r3, [r2, #0]
	 }
	if ((TIM2->SR & (1 << 0)) == 1){ // check the uif flag
 8001200:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b01      	cmp	r3, #1
 800120c:	d122      	bne.n	8001254 <TIM2_IRQHandler+0x94>
		TIM2->SR &= ~(1 << 0); // clear the uif
 800120e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6113      	str	r3, [r2, #16]
		counter2 ++;
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <TIM2_IRQHandler+0xa0>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	3301      	adds	r3, #1
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <TIM2_IRQHandler+0xa0>)
 800122a:	801a      	strh	r2, [r3, #0]
		if (counter2 == n2){
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <TIM2_IRQHandler+0xa0>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <TIM2_IRQHandler+0xa4>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	429a      	cmp	r2, r3
 800123a:	d10b      	bne.n	8001254 <TIM2_IRQHandler+0x94>
			counter2 = 0;
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <TIM2_IRQHandler+0xa0>)
 800123e:	2200      	movs	r2, #0
 8001240:	801a      	strh	r2, [r3, #0]
			TIM2->CNT = preload2; // set the preload
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <TIM2_IRQHandler+0xa8>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800124c:	625a      	str	r2, [r3, #36]	@ 0x24
			callback2();
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <TIM2_IRQHandler+0xac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4798      	blx	r3
		}
	}
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2000005c 	.word	0x2000005c
 800125c:	20000058 	.word	0x20000058
 8001260:	20000046 	.word	0x20000046
 8001264:	20000040 	.word	0x20000040
 8001268:	2000003a 	.word	0x2000003a
 800126c:	2000004c 	.word	0x2000004c

08001270 <TIM3_IRQHandler>:

void TIM3_IRQHandler(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	if ((TIM3->SR & (1 << 0)) == 1){ // check the uif flag
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <TIM3_IRQHandler+0x88>)
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	d138      	bne.n	80012f2 <TIM3_IRQHandler+0x82>
		if (TIM3->SR & TIM_SR_CC1IF){
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <TIM3_IRQHandler+0x88>)
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d012      	beq.n	80012b2 <TIM3_IRQHandler+0x42>
			TIM3->SR &= ~TIM_SR_CC1IF;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <TIM3_IRQHandler+0x88>)
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	4a19      	ldr	r2, [pc, #100]	@ (80012f8 <TIM3_IRQHandler+0x88>)
 8001292:	f023 0302 	bic.w	r3, r3, #2
 8001296:	6113      	str	r3, [r2, #16]
			TIM3->CCR1 += trigTime_ms_global;
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <TIM3_IRQHandler+0x88>)
 800129a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129c:	4a17      	ldr	r2, [pc, #92]	@ (80012fc <TIM3_IRQHandler+0x8c>)
 800129e:	8812      	ldrh	r2, [r2, #0]
 80012a0:	4611      	mov	r1, r2
 80012a2:	4a15      	ldr	r2, [pc, #84]	@ (80012f8 <TIM3_IRQHandler+0x88>)
 80012a4:	440b      	add	r3, r1
 80012a6:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <TIM3_IRQHandler+0x90>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a14      	ldr	r2, [pc, #80]	@ (8001300 <TIM3_IRQHandler+0x90>)
 80012b0:	6013      	str	r3, [r2, #0]
	 }
		TIM3->SR &= ~(1 << 0); // clear the uif
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <TIM3_IRQHandler+0x88>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	4a10      	ldr	r2, [pc, #64]	@ (80012f8 <TIM3_IRQHandler+0x88>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6113      	str	r3, [r2, #16]
		counter3 ++;
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <TIM3_IRQHandler+0x94>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <TIM3_IRQHandler+0x94>)
 80012ca:	801a      	strh	r2, [r3, #0]
		if (counter3 == n3){
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <TIM3_IRQHandler+0x94>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <TIM3_IRQHandler+0x98>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	429a      	cmp	r2, r3
 80012da:	d10a      	bne.n	80012f2 <TIM3_IRQHandler+0x82>
			counter3 = 0;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <TIM3_IRQHandler+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	801a      	strh	r2, [r3, #0]
			TIM3->CNT = preload3; // set the preload
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <TIM3_IRQHandler+0x9c>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <TIM3_IRQHandler+0x88>)
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24
			callback3();
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <TIM3_IRQHandler+0xa0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4798      	blx	r3
		}
	}
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40000400 	.word	0x40000400
 80012fc:	2000005c 	.word	0x2000005c
 8001300:	20000058 	.word	0x20000058
 8001304:	20000048 	.word	0x20000048
 8001308:	20000042 	.word	0x20000042
 800130c:	2000003c 	.word	0x2000003c
 8001310:	20000050 	.word	0x20000050

08001314 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	if ((TIM4->SR & (1 << 0)) == 1){ // check the uif flag
 8001318:	4b20      	ldr	r3, [pc, #128]	@ (800139c <TIM4_IRQHandler+0x88>)
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d138      	bne.n	8001396 <TIM4_IRQHandler+0x82>
		if (TIM4->SR & TIM_SR_CC1IF){
 8001324:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <TIM4_IRQHandler+0x88>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d012      	beq.n	8001356 <TIM4_IRQHandler+0x42>
			TIM4->SR &= ~TIM_SR_CC1IF;
 8001330:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <TIM4_IRQHandler+0x88>)
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	4a19      	ldr	r2, [pc, #100]	@ (800139c <TIM4_IRQHandler+0x88>)
 8001336:	f023 0302 	bic.w	r3, r3, #2
 800133a:	6113      	str	r3, [r2, #16]
			TIM4->CCR1 += trigTime_ms_global;
 800133c:	4b17      	ldr	r3, [pc, #92]	@ (800139c <TIM4_IRQHandler+0x88>)
 800133e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001340:	4a17      	ldr	r2, [pc, #92]	@ (80013a0 <TIM4_IRQHandler+0x8c>)
 8001342:	8812      	ldrh	r2, [r2, #0]
 8001344:	4611      	mov	r1, r2
 8001346:	4a15      	ldr	r2, [pc, #84]	@ (800139c <TIM4_IRQHandler+0x88>)
 8001348:	440b      	add	r3, r1
 800134a:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 800134c:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <TIM4_IRQHandler+0x90>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a14      	ldr	r2, [pc, #80]	@ (80013a4 <TIM4_IRQHandler+0x90>)
 8001354:	6013      	str	r3, [r2, #0]
	 }
		TIM4->SR &= ~(1 << 0); // clear the uif
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <TIM4_IRQHandler+0x88>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a10      	ldr	r2, [pc, #64]	@ (800139c <TIM4_IRQHandler+0x88>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6113      	str	r3, [r2, #16]
		counter4 ++;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <TIM4_IRQHandler+0x94>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	3301      	adds	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <TIM4_IRQHandler+0x94>)
 800136e:	801a      	strh	r2, [r3, #0]
		if (counter4 == n4){
 8001370:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <TIM4_IRQHandler+0x94>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <TIM4_IRQHandler+0x98>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	429a      	cmp	r2, r3
 800137e:	d10a      	bne.n	8001396 <TIM4_IRQHandler+0x82>
			counter4 = 0;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <TIM4_IRQHandler+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	801a      	strh	r2, [r3, #0]
			TIM4->CNT = preload4; // set the preload
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <TIM4_IRQHandler+0x9c>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <TIM4_IRQHandler+0x88>)
 800138e:	625a      	str	r2, [r3, #36]	@ 0x24
			callback4();
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <TIM4_IRQHandler+0xa0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4798      	blx	r3
		}
	}
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40000800 	.word	0x40000800
 80013a0:	2000005c 	.word	0x2000005c
 80013a4:	20000058 	.word	0x20000058
 80013a8:	2000004a 	.word	0x2000004a
 80013ac:	20000044 	.word	0x20000044
 80013b0:	2000003e 	.word	0x2000003e
 80013b4:	20000054 	.word	0x20000054

080013b8 <__libc_init_array>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	2600      	movs	r6, #0
 80013bc:	4d0c      	ldr	r5, [pc, #48]	@ (80013f0 <__libc_init_array+0x38>)
 80013be:	4c0d      	ldr	r4, [pc, #52]	@ (80013f4 <__libc_init_array+0x3c>)
 80013c0:	1b64      	subs	r4, r4, r5
 80013c2:	10a4      	asrs	r4, r4, #2
 80013c4:	42a6      	cmp	r6, r4
 80013c6:	d109      	bne.n	80013dc <__libc_init_array+0x24>
 80013c8:	f000 f81a 	bl	8001400 <_init>
 80013cc:	2600      	movs	r6, #0
 80013ce:	4d0a      	ldr	r5, [pc, #40]	@ (80013f8 <__libc_init_array+0x40>)
 80013d0:	4c0a      	ldr	r4, [pc, #40]	@ (80013fc <__libc_init_array+0x44>)
 80013d2:	1b64      	subs	r4, r4, r5
 80013d4:	10a4      	asrs	r4, r4, #2
 80013d6:	42a6      	cmp	r6, r4
 80013d8:	d105      	bne.n	80013e6 <__libc_init_array+0x2e>
 80013da:	bd70      	pop	{r4, r5, r6, pc}
 80013dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80013e0:	4798      	blx	r3
 80013e2:	3601      	adds	r6, #1
 80013e4:	e7ee      	b.n	80013c4 <__libc_init_array+0xc>
 80013e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ea:	4798      	blx	r3
 80013ec:	3601      	adds	r6, #1
 80013ee:	e7f2      	b.n	80013d6 <__libc_init_array+0x1e>
 80013f0:	08001418 	.word	0x08001418
 80013f4:	08001418 	.word	0x08001418
 80013f8:	08001418 	.word	0x08001418
 80013fc:	0800141c 	.word	0x0800141c

08001400 <_init>:
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	bf00      	nop
 8001404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001406:	bc08      	pop	{r3}
 8001408:	469e      	mov	lr, r3
 800140a:	4770      	bx	lr

0800140c <_fini>:
 800140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140e:	bf00      	nop
 8001410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001412:	bc08      	pop	{r3}
 8001414:	469e      	mov	lr, r3
 8001416:	4770      	bx	lr
