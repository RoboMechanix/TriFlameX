
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000570  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800067c  0800067c  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800067c  0800067c  00002008  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800067c  0800067c  00002008  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800067c  0800067c  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800067c  0800067c  0000167c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000680  08000680  00001680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08000684  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000008  0800068c  00002008  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  0800068c  00002064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001905  00000000  00000000  00002031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000079d  00000000  00000000  00003936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  000040d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000196  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016166  00000000  00000000  000044a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000327e  00000000  00000000  0001a60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007efa2  00000000  00000000  0001d88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c82c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006f8  00000000  00000000  0009c870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0009cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08000664 	.word	0x08000664

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08000664 	.word	0x08000664

0800014c <main>:
#include <main.h>

MOVECOMMAND currentCommand = CMD_NONE;
uint64_t x = 0;
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	TIM_initMillis(TIM2, 1);
 8000150:	2101      	movs	r1, #1
 8000152:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000156:	f000 f8d7 	bl	8000308 <TIM_initMillis>
	TIM2->CNT=59000;
 800015a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800015e:	f24e 6278 	movw	r2, #59000	@ 0xe678
 8000162:	625a      	str	r2, [r3, #36]	@ 0x24
	while (1) {

		x = TIM_Millis();
 8000164:	f000 f92a 	bl	80003bc <TIM_Millis>
 8000168:	4602      	mov	r2, r0
 800016a:	460b      	mov	r3, r1
 800016c:	4901      	ldr	r1, [pc, #4]	@ (8000174 <main+0x28>)
 800016e:	e9c1 2300 	strd	r2, r3, [r1]
 8000172:	e7f7      	b.n	8000164 <main+0x18>
 8000174:	20000028 	.word	0x20000028

08000178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800017c:	bf00      	nop
 800017e:	e7fd      	b.n	800017c <NMI_Handler+0x4>

08000180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000184:	bf00      	nop
 8000186:	e7fd      	b.n	8000184 <HardFault_Handler+0x4>

08000188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800018c:	bf00      	nop
 800018e:	e7fd      	b.n	800018c <MemManage_Handler+0x4>

08000190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000194:	bf00      	nop
 8000196:	e7fd      	b.n	8000194 <BusFault_Handler+0x4>

08000198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800019c:	bf00      	nop
 800019e:	e7fd      	b.n	800019c <UsageFault_Handler+0x4>

080001a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001b0:	bf00      	nop
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr

080001c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001c8:	f000 f82e 	bl	8000228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001cc:	bf00      	nop
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80001dc:	f7ff fff8 	bl	80001d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e0:	480b      	ldr	r0, [pc, #44]	@ (8000210 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80001e2:	490c      	ldr	r1, [pc, #48]	@ (8000214 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80001e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000218 <LoopFillZerobss+0x16>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e8:	e002      	b.n	80001f0 <LoopCopyDataInit>

080001ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ee:	3304      	adds	r3, #4

080001f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f4:	d3f9      	bcc.n	80001ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001f6:	4a09      	ldr	r2, [pc, #36]	@ (800021c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80001f8:	4c09      	ldr	r4, [pc, #36]	@ (8000220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001fc:	e001      	b.n	8000202 <LoopFillZerobss>

080001fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000200:	3204      	adds	r2, #4

08000202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000204:	d3fb      	bcc.n	80001fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000206:	f000 fa09 	bl	800061c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800020a:	f7ff ff9f 	bl	800014c <main>
  bx lr
 800020e:	4770      	bx	lr
  ldr r0, =_sdata
 8000210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000214:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000218:	08000684 	.word	0x08000684
  ldr r2, =_sbss
 800021c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000220:	20000064 	.word	0x20000064

08000224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000224:	e7fe      	b.n	8000224 <ADC1_2_IRQHandler>
	...

08000228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800022c:	4b05      	ldr	r3, [pc, #20]	@ (8000244 <HAL_IncTick+0x1c>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	461a      	mov	r2, r3
 8000232:	4b05      	ldr	r3, [pc, #20]	@ (8000248 <HAL_IncTick+0x20>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4413      	add	r3, r2
 8000238:	4a03      	ldr	r2, [pc, #12]	@ (8000248 <HAL_IncTick+0x20>)
 800023a:	6013      	str	r3, [r2, #0]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	20000000 	.word	0x20000000
 8000248:	20000030 	.word	0x20000030

0800024c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025a:	2b00      	cmp	r3, #0
 800025c:	db0b      	blt.n	8000276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	f003 021f 	and.w	r2, r3, #31
 8000264:	4906      	ldr	r1, [pc, #24]	@ (8000280 <__NVIC_EnableIRQ+0x34>)
 8000266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026a:	095b      	lsrs	r3, r3, #5
 800026c:	2001      	movs	r0, #1
 800026e:	fa00 f202 	lsl.w	r2, r0, r2
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	e000e100 	.word	0xe000e100

08000284 <enableTimerClock>:
		TIM_delay(TIMX, chunk);
		delay_ms -= chunk;
	}
}

void enableTimerClock(TIM_TypeDef *TIMx) {
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	switch ((uint32_t) TIMx) {
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4a1a      	ldr	r2, [pc, #104]	@ (80002f8 <enableTimerClock+0x74>)
 8000290:	4293      	cmp	r3, r2
 8000292:	d00f      	beq.n	80002b4 <enableTimerClock+0x30>
 8000294:	4a18      	ldr	r2, [pc, #96]	@ (80002f8 <enableTimerClock+0x74>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d828      	bhi.n	80002ec <enableTimerClock+0x68>
 800029a:	4a18      	ldr	r2, [pc, #96]	@ (80002fc <enableTimerClock+0x78>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d01e      	beq.n	80002de <enableTimerClock+0x5a>
 80002a0:	4a16      	ldr	r2, [pc, #88]	@ (80002fc <enableTimerClock+0x78>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d822      	bhi.n	80002ec <enableTimerClock+0x68>
 80002a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80002aa:	d00a      	beq.n	80002c2 <enableTimerClock+0x3e>
 80002ac:	4a14      	ldr	r2, [pc, #80]	@ (8000300 <enableTimerClock+0x7c>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d00e      	beq.n	80002d0 <enableTimerClock+0x4c>
		break;
	case (uint32_t) TIM4:
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
		break;
	default:
		break;
 80002b2:	e01b      	b.n	80002ec <enableTimerClock+0x68>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80002b4:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <enableTimerClock+0x80>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a12      	ldr	r2, [pc, #72]	@ (8000304 <enableTimerClock+0x80>)
 80002ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80002be:	6193      	str	r3, [r2, #24]
		break;
 80002c0:	e015      	b.n	80002ee <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002c2:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <enableTimerClock+0x80>)
 80002c4:	69db      	ldr	r3, [r3, #28]
 80002c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000304 <enableTimerClock+0x80>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	61d3      	str	r3, [r2, #28]
		break;
 80002ce:	e00e      	b.n	80002ee <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <enableTimerClock+0x80>)
 80002d2:	69db      	ldr	r3, [r3, #28]
 80002d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000304 <enableTimerClock+0x80>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	61d3      	str	r3, [r2, #28]
		break;
 80002dc:	e007      	b.n	80002ee <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80002de:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <enableTimerClock+0x80>)
 80002e0:	69db      	ldr	r3, [r3, #28]
 80002e2:	4a08      	ldr	r2, [pc, #32]	@ (8000304 <enableTimerClock+0x80>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	61d3      	str	r3, [r2, #28]
		break;
 80002ea:	e000      	b.n	80002ee <enableTimerClock+0x6a>
		break;
 80002ec:	bf00      	nop
	}
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40012c00 	.word	0x40012c00
 80002fc:	40000800 	.word	0x40000800
 8000300:	40000400 	.word	0x40000400
 8000304:	40021000 	.word	0x40021000

08000308 <TIM_initMillis>:
	}

	// start counting
	SET_BIT(TIMX->CR1, 0);
}
void TIM_initMillis(TIM_TypeDef *TIMX, uint16_t trigTime_ms) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	807b      	strh	r3, [r7, #2]
	enableTimerClock(TIMX);
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f7ff ffb5 	bl	8000284 <enableTimerClock>
	TIMX->CR1 = 0;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
	trigTime_ms_global = trigTime_ms;
 8000320:	4a23      	ldr	r2, [pc, #140]	@ (80003b0 <TIM_initMillis+0xa8>)
 8000322:	887b      	ldrh	r3, [r7, #2]
 8000324:	8013      	strh	r3, [r2, #0]
	TIMX->CCER |= TIM_CCER_CC1E;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6a1b      	ldr	r3, [r3, #32]
 800032a:	f043 0201 	orr.w	r2, r3, #1
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	621a      	str	r2, [r3, #32]
	TIMX->DIER |= TIM_DIER_CC1IE;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f043 0202 	orr.w	r2, r3, #2
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	60da      	str	r2, [r3, #12]
	TIMX->CCMR1 &= ~TIM_CCMR1_CC1S;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f023 0203 	bic.w	r2, r3, #3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	619a      	str	r2, [r3, #24]
	TIMX->CNT = 0;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2200      	movs	r2, #0
 800034e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIMX->PSC = 8000 - 1;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000356:	629a      	str	r2, [r3, #40]	@ 0x28
	TIMX->ARR = (60000) - 1;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800035e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (TIMX == TIM2) {
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000366:	d103      	bne.n	8000370 <TIM_initMillis+0x68>
		NVIC_EnableIRQ(TIM2_IRQn);
 8000368:	201c      	movs	r0, #28
 800036a:	f7ff ff6f 	bl	800024c <__NVIC_EnableIRQ>
 800036e:	e00e      	b.n	800038e <TIM_initMillis+0x86>
	} else if (TIMX == TIM3) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a10      	ldr	r2, [pc, #64]	@ (80003b4 <TIM_initMillis+0xac>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d103      	bne.n	8000380 <TIM_initMillis+0x78>
		NVIC_EnableIRQ(TIM3_IRQn);
 8000378:	201d      	movs	r0, #29
 800037a:	f7ff ff67 	bl	800024c <__NVIC_EnableIRQ>
 800037e:	e006      	b.n	800038e <TIM_initMillis+0x86>
	} else if (TIMX == TIM4) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a0d      	ldr	r2, [pc, #52]	@ (80003b8 <TIM_initMillis+0xb0>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d102      	bne.n	800038e <TIM_initMillis+0x86>
		NVIC_EnableIRQ(TIM4_IRQn);
 8000388:	201e      	movs	r0, #30
 800038a:	f7ff ff5f 	bl	800024c <__NVIC_EnableIRQ>
	}

	TIMX->CR1 |= TIM_CR1_CEN;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f043 0201 	orr.w	r2, r3, #1
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	601a      	str	r2, [r3, #0]
	TIMX->CCR1 = TIMX->CNT + trigTime_ms_global;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800039e:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <TIM_initMillis+0xa8>)
 80003a0:	8812      	ldrh	r2, [r2, #0]
 80003a2:	441a      	add	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000060 	.word	0x20000060
 80003b4:	40000400 	.word	0x40000400
 80003b8:	40000800 	.word	0x40000800

080003bc <TIM_Millis>:

uint64_t TIM_Millis() {
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	if (isFirstTime) {
 80003c0:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <TIM_Millis+0x30>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d009      	beq.n	80003dc <TIM_Millis+0x20>
		isFirstTime = 0;
 80003c8:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <TIM_Millis+0x30>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
		millis = 0;
 80003ce:	4908      	ldr	r1, [pc, #32]	@ (80003f0 <TIM_Millis+0x34>)
 80003d0:	f04f 0200 	mov.w	r2, #0
 80003d4:	f04f 0300 	mov.w	r3, #0
 80003d8:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return millis;
 80003dc:	4b04      	ldr	r3, [pc, #16]	@ (80003f0 <TIM_Millis+0x34>)
 80003de:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80003e2:	4610      	mov	r0, r2
 80003e4:	4619      	mov	r1, r3
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	20000004 	.word	0x20000004
 80003f0:	20000058 	.word	0x20000058

080003f4 <TIM2_IRQHandler>:

void TIM2_IRQHandler() {
 80003f4:	b598      	push	{r3, r4, r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC1IF) {
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fc:	691b      	ldr	r3, [r3, #16]
 80003fe:	f003 0302 	and.w	r3, r3, #2
 8000402:	2b00      	cmp	r3, #0
 8000404:	d01a      	beq.n	800043c <TIM2_IRQHandler+0x48>
		TIM2->SR &= ~TIM_SR_CC1IF;
 8000406:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000410:	f023 0302 	bic.w	r3, r3, #2
 8000414:	6113      	str	r3, [r2, #16]
		TIM2->CCR1 = TIM2->CNT + trigTime_ms_global;
 8000416:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800041a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800041c:	4a1d      	ldr	r2, [pc, #116]	@ (8000494 <TIM2_IRQHandler+0xa0>)
 800041e:	8812      	ldrh	r2, [r2, #0]
 8000420:	4614      	mov	r4, r2
 8000422:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000426:	4423      	add	r3, r4
 8000428:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 800042a:	4b1b      	ldr	r3, [pc, #108]	@ (8000498 <TIM2_IRQHandler+0xa4>)
 800042c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000430:	1c50      	adds	r0, r2, #1
 8000432:	f143 0100 	adc.w	r1, r3, #0
 8000436:	4b18      	ldr	r3, [pc, #96]	@ (8000498 <TIM2_IRQHandler+0xa4>)
 8000438:	e9c3 0100 	strd	r0, r1, [r3]
//		if (isFirstTime) {
//			isFirstTime = 0;
//			millis = 0;
//		}
	}
	if ((TIM2->SR & (1 << 0)) == 1) { // check the uif flag
 800043c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	2b01      	cmp	r3, #1
 8000448:	d122      	bne.n	8000490 <TIM2_IRQHandler+0x9c>
		TIM2->SR &= ~(1 << 0); // clear the uif
 800044a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800044e:	691b      	ldr	r3, [r3, #16]
 8000450:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000454:	f023 0301 	bic.w	r3, r3, #1
 8000458:	6113      	str	r3, [r2, #16]
		counter2++;
 800045a:	4b10      	ldr	r3, [pc, #64]	@ (800049c <TIM2_IRQHandler+0xa8>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	b29b      	uxth	r3, r3
 8000460:	3301      	adds	r3, #1
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <TIM2_IRQHandler+0xa8>)
 8000466:	801a      	strh	r2, [r3, #0]
		if (counter2 == n2) {
 8000468:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <TIM2_IRQHandler+0xa8>)
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	b29a      	uxth	r2, r3
 800046e:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <TIM2_IRQHandler+0xac>)
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	b29b      	uxth	r3, r3
 8000474:	429a      	cmp	r2, r3
 8000476:	d10b      	bne.n	8000490 <TIM2_IRQHandler+0x9c>
			counter2 = 0;
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <TIM2_IRQHandler+0xa8>)
 800047a:	2200      	movs	r2, #0
 800047c:	801a      	strh	r2, [r3, #0]
			TIM2->CNT = preload2; // set the preload
 800047e:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <TIM2_IRQHandler+0xb0>)
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	b29a      	uxth	r2, r3
 8000484:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000488:	625a      	str	r2, [r3, #36]	@ 0x24
			callback2();
 800048a:	4b07      	ldr	r3, [pc, #28]	@ (80004a8 <TIM2_IRQHandler+0xb4>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4798      	blx	r3
		}
	}
}
 8000490:	bf00      	nop
 8000492:	bd98      	pop	{r3, r4, r7, pc}
 8000494:	20000060 	.word	0x20000060
 8000498:	20000058 	.word	0x20000058
 800049c:	20000040 	.word	0x20000040
 80004a0:	2000003a 	.word	0x2000003a
 80004a4:	20000034 	.word	0x20000034
 80004a8:	20000048 	.word	0x20000048

080004ac <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 80004ac:	b598      	push	{r3, r4, r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	if ((TIM3->SR & (1 << 0)) == 1) { // check the uif flag
 80004b0:	4b25      	ldr	r3, [pc, #148]	@ (8000548 <TIM3_IRQHandler+0x9c>)
 80004b2:	691b      	ldr	r3, [r3, #16]
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d142      	bne.n	8000542 <TIM3_IRQHandler+0x96>
		if (TIM3->SR & TIM_SR_CC1IF) {
 80004bc:	4b22      	ldr	r3, [pc, #136]	@ (8000548 <TIM3_IRQHandler+0x9c>)
 80004be:	691b      	ldr	r3, [r3, #16]
 80004c0:	f003 0302 	and.w	r3, r3, #2
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d016      	beq.n	80004f6 <TIM3_IRQHandler+0x4a>
			TIM3->SR &= ~TIM_SR_CC1IF;
 80004c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000548 <TIM3_IRQHandler+0x9c>)
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000548 <TIM3_IRQHandler+0x9c>)
 80004ce:	f023 0302 	bic.w	r3, r3, #2
 80004d2:	6113      	str	r3, [r2, #16]
			TIM3->CCR1 = TIM3->CNT + trigTime_ms_global;
 80004d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <TIM3_IRQHandler+0x9c>)
 80004d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004d8:	4a1c      	ldr	r2, [pc, #112]	@ (800054c <TIM3_IRQHandler+0xa0>)
 80004da:	8812      	ldrh	r2, [r2, #0]
 80004dc:	4614      	mov	r4, r2
 80004de:	4a1a      	ldr	r2, [pc, #104]	@ (8000548 <TIM3_IRQHandler+0x9c>)
 80004e0:	4423      	add	r3, r4
 80004e2:	6353      	str	r3, [r2, #52]	@ 0x34
			millis++;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <TIM3_IRQHandler+0xa4>)
 80004e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004ea:	1c50      	adds	r0, r2, #1
 80004ec:	f143 0100 	adc.w	r1, r3, #0
 80004f0:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <TIM3_IRQHandler+0xa4>)
 80004f2:	e9c3 0100 	strd	r0, r1, [r3]
//			if (isFirstTime) {
//				isFirstTime = 0;
//				millis = 0;
//			}
		}
		if ((TIM3->SR & (1 << 0)) == 1) {
 80004f6:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <TIM3_IRQHandler+0x9c>)
 80004f8:	691b      	ldr	r3, [r3, #16]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d11f      	bne.n	8000542 <TIM3_IRQHandler+0x96>
			TIM3->SR &= ~(1 << 0); // clear the uif
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <TIM3_IRQHandler+0x9c>)
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	4a10      	ldr	r2, [pc, #64]	@ (8000548 <TIM3_IRQHandler+0x9c>)
 8000508:	f023 0301 	bic.w	r3, r3, #1
 800050c:	6113      	str	r3, [r2, #16]
			counter3++;
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <TIM3_IRQHandler+0xa8>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	b29b      	uxth	r3, r3
 8000514:	3301      	adds	r3, #1
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <TIM3_IRQHandler+0xa8>)
 800051a:	801a      	strh	r2, [r3, #0]
			if (counter3 == n3) {
 800051c:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <TIM3_IRQHandler+0xa8>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	b29a      	uxth	r2, r3
 8000522:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <TIM3_IRQHandler+0xac>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	b29b      	uxth	r3, r3
 8000528:	429a      	cmp	r2, r3
 800052a:	d10a      	bne.n	8000542 <TIM3_IRQHandler+0x96>
				counter3 = 0;
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <TIM3_IRQHandler+0xa8>)
 800052e:	2200      	movs	r2, #0
 8000530:	801a      	strh	r2, [r3, #0]
				TIM3->CNT = preload3; // set the preload
 8000532:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <TIM3_IRQHandler+0xb0>)
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	b29a      	uxth	r2, r3
 8000538:	4b03      	ldr	r3, [pc, #12]	@ (8000548 <TIM3_IRQHandler+0x9c>)
 800053a:	625a      	str	r2, [r3, #36]	@ 0x24
				callback3();
 800053c:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <TIM3_IRQHandler+0xb4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4798      	blx	r3
			}
		}
	}
}
 8000542:	bf00      	nop
 8000544:	bd98      	pop	{r3, r4, r7, pc}
 8000546:	bf00      	nop
 8000548:	40000400 	.word	0x40000400
 800054c:	20000060 	.word	0x20000060
 8000550:	20000058 	.word	0x20000058
 8000554:	20000042 	.word	0x20000042
 8000558:	2000003c 	.word	0x2000003c
 800055c:	20000036 	.word	0x20000036
 8000560:	2000004c 	.word	0x2000004c

08000564 <TIM4_IRQHandler>:

void TIM4_IRQHandler() {
 8000564:	b598      	push	{r3, r4, r7, lr}
 8000566:	af00      	add	r7, sp, #0
	if ((TIM4->SR & (1 << 0)) == 1) { // check the uif flag
 8000568:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <TIM4_IRQHandler+0x9c>)
 800056a:	691b      	ldr	r3, [r3, #16]
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	2b01      	cmp	r3, #1
 8000572:	d142      	bne.n	80005fa <TIM4_IRQHandler+0x96>
		if (TIM4->SR & TIM_SR_CC1IF) {
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <TIM4_IRQHandler+0x9c>)
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	f003 0302 	and.w	r3, r3, #2
 800057c:	2b00      	cmp	r3, #0
 800057e:	d016      	beq.n	80005ae <TIM4_IRQHandler+0x4a>
			TIM4->SR &= ~TIM_SR_CC1IF;
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <TIM4_IRQHandler+0x9c>)
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	4a1e      	ldr	r2, [pc, #120]	@ (8000600 <TIM4_IRQHandler+0x9c>)
 8000586:	f023 0302 	bic.w	r3, r3, #2
 800058a:	6113      	str	r3, [r2, #16]
			TIM4->CCR1 = TIM4->CNT + trigTime_ms_global;
 800058c:	4b1c      	ldr	r3, [pc, #112]	@ (8000600 <TIM4_IRQHandler+0x9c>)
 800058e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000590:	4a1c      	ldr	r2, [pc, #112]	@ (8000604 <TIM4_IRQHandler+0xa0>)
 8000592:	8812      	ldrh	r2, [r2, #0]
 8000594:	4614      	mov	r4, r2
 8000596:	4a1a      	ldr	r2, [pc, #104]	@ (8000600 <TIM4_IRQHandler+0x9c>)
 8000598:	4423      	add	r3, r4
 800059a:	6353      	str	r3, [r2, #52]	@ 0x34
			millis++;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <TIM4_IRQHandler+0xa4>)
 800059e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005a2:	1c50      	adds	r0, r2, #1
 80005a4:	f143 0100 	adc.w	r1, r3, #0
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <TIM4_IRQHandler+0xa4>)
 80005aa:	e9c3 0100 	strd	r0, r1, [r3]
//			if (isFirstTime) {
//				isFirstTime = 0;
//				millis = 0;
//			}
		}
		if ((TIM4->SR & (1 << 0)) == 1) {
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <TIM4_IRQHandler+0x9c>)
 80005b0:	691b      	ldr	r3, [r3, #16]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d11f      	bne.n	80005fa <TIM4_IRQHandler+0x96>
			TIM4->SR &= ~(1 << 0); // clear the uif
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <TIM4_IRQHandler+0x9c>)
 80005bc:	691b      	ldr	r3, [r3, #16]
 80005be:	4a10      	ldr	r2, [pc, #64]	@ (8000600 <TIM4_IRQHandler+0x9c>)
 80005c0:	f023 0301 	bic.w	r3, r3, #1
 80005c4:	6113      	str	r3, [r2, #16]
			counter4++;
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <TIM4_IRQHandler+0xa8>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	3301      	adds	r3, #1
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <TIM4_IRQHandler+0xa8>)
 80005d2:	801a      	strh	r2, [r3, #0]
			if (counter4 == n4) {
 80005d4:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <TIM4_IRQHandler+0xa8>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <TIM4_IRQHandler+0xac>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d10a      	bne.n	80005fa <TIM4_IRQHandler+0x96>
				counter4 = 0;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <TIM4_IRQHandler+0xa8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	801a      	strh	r2, [r3, #0]
				TIM4->CNT = preload4; // set the preload
 80005ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <TIM4_IRQHandler+0xb0>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <TIM4_IRQHandler+0x9c>)
 80005f2:	625a      	str	r2, [r3, #36]	@ 0x24
				callback4();
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <TIM4_IRQHandler+0xb4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4798      	blx	r3
			}
		}
	}
}
 80005fa:	bf00      	nop
 80005fc:	bd98      	pop	{r3, r4, r7, pc}
 80005fe:	bf00      	nop
 8000600:	40000800 	.word	0x40000800
 8000604:	20000060 	.word	0x20000060
 8000608:	20000058 	.word	0x20000058
 800060c:	20000044 	.word	0x20000044
 8000610:	2000003e 	.word	0x2000003e
 8000614:	20000038 	.word	0x20000038
 8000618:	20000050 	.word	0x20000050

0800061c <__libc_init_array>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	2600      	movs	r6, #0
 8000620:	4d0c      	ldr	r5, [pc, #48]	@ (8000654 <__libc_init_array+0x38>)
 8000622:	4c0d      	ldr	r4, [pc, #52]	@ (8000658 <__libc_init_array+0x3c>)
 8000624:	1b64      	subs	r4, r4, r5
 8000626:	10a4      	asrs	r4, r4, #2
 8000628:	42a6      	cmp	r6, r4
 800062a:	d109      	bne.n	8000640 <__libc_init_array+0x24>
 800062c:	f000 f81a 	bl	8000664 <_init>
 8000630:	2600      	movs	r6, #0
 8000632:	4d0a      	ldr	r5, [pc, #40]	@ (800065c <__libc_init_array+0x40>)
 8000634:	4c0a      	ldr	r4, [pc, #40]	@ (8000660 <__libc_init_array+0x44>)
 8000636:	1b64      	subs	r4, r4, r5
 8000638:	10a4      	asrs	r4, r4, #2
 800063a:	42a6      	cmp	r6, r4
 800063c:	d105      	bne.n	800064a <__libc_init_array+0x2e>
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f855 3b04 	ldr.w	r3, [r5], #4
 8000644:	4798      	blx	r3
 8000646:	3601      	adds	r6, #1
 8000648:	e7ee      	b.n	8000628 <__libc_init_array+0xc>
 800064a:	f855 3b04 	ldr.w	r3, [r5], #4
 800064e:	4798      	blx	r3
 8000650:	3601      	adds	r6, #1
 8000652:	e7f2      	b.n	800063a <__libc_init_array+0x1e>
 8000654:	0800067c 	.word	0x0800067c
 8000658:	0800067c 	.word	0x0800067c
 800065c:	0800067c 	.word	0x0800067c
 8000660:	08000680 	.word	0x08000680

08000664 <_init>:
 8000664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000666:	bf00      	nop
 8000668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066a:	bc08      	pop	{r3}
 800066c:	469e      	mov	lr, r3
 800066e:	4770      	bx	lr

08000670 <_fini>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	bf00      	nop
 8000674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000676:	bc08      	pop	{r3}
 8000678:	469e      	mov	lr, r3
 800067a:	4770      	bx	lr
