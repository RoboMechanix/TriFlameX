
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000420  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800052c  0800052c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800052c  0800052c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800052c  0800052c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800052c  0800052c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800052c  0800052c  0000152c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000530  08000530  00001530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000534  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000538  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000538  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f44  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000060a  00000000  00000000  00002f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00003580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000152  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015487  00000000  00000000  000038ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000027af  00000000  00000000  00018d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b44a  00000000  00000000  0001b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009693a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000598  00000000  00000000  00096980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00096f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000514 	.word	0x08000514

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000514 	.word	0x08000514

0800014c <main>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "../../MiddleWares/MCAL/GPIO/GPIO_interface.h"

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	GPIO_pinMode(GPIOB, 7, OUTPUT);
 8000150:	2203      	movs	r2, #3
 8000152:	2107      	movs	r1, #7
 8000154:	4810      	ldr	r0, [pc, #64]	@ (8000198 <main+0x4c>)
 8000156:	f000 f88d 	bl	8000274 <GPIO_pinMode>
	GPIO_pinMode(GPIOA, 6, INPUT_PULLDOWN);
 800015a:	2201      	movs	r2, #1
 800015c:	2106      	movs	r1, #6
 800015e:	480f      	ldr	r0, [pc, #60]	@ (800019c <main+0x50>)
 8000160:	f000 f888 	bl	8000274 <GPIO_pinMode>
    while (1)
	{
    	if (GPIO_digitalRead(GPIOA, 6)){
 8000164:	2106      	movs	r1, #6
 8000166:	480d      	ldr	r0, [pc, #52]	@ (800019c <main+0x50>)
 8000168:	f000 f993 	bl	8000492 <GPIO_digitalRead>
 800016c:	4603      	mov	r3, r0
 800016e:	2b00      	cmp	r3, #0
 8000170:	d004      	beq.n	800017c <main+0x30>
    		GPIO_digitalWrite(GPIOB, 7, HIGH);
 8000172:	2200      	movs	r2, #0
 8000174:	2107      	movs	r1, #7
 8000176:	4808      	ldr	r0, [pc, #32]	@ (8000198 <main+0x4c>)
 8000178:	f000 f960 	bl	800043c <GPIO_digitalWrite>
    	}if(!GPIO_digitalRead(GPIOB, 6)){
 800017c:	2106      	movs	r1, #6
 800017e:	4806      	ldr	r0, [pc, #24]	@ (8000198 <main+0x4c>)
 8000180:	f000 f987 	bl	8000492 <GPIO_digitalRead>
 8000184:	4603      	mov	r3, r0
 8000186:	2b00      	cmp	r3, #0
 8000188:	d1ec      	bne.n	8000164 <main+0x18>
    		GPIO_digitalWrite(GPIOB, 7, LOW);
 800018a:	2201      	movs	r2, #1
 800018c:	2107      	movs	r1, #7
 800018e:	4802      	ldr	r0, [pc, #8]	@ (8000198 <main+0x4c>)
 8000190:	f000 f954 	bl	800043c <GPIO_digitalWrite>
    	if (GPIO_digitalRead(GPIOA, 6)){
 8000194:	e7e6      	b.n	8000164 <main+0x18>
 8000196:	bf00      	nop
 8000198:	40010c00 	.word	0x40010c00
 800019c:	40010800 	.word	0x40010800

080001a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80001a4:	bf00      	nop
 80001a6:	e7fd      	b.n	80001a4 <NMI_Handler+0x4>

080001a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001ac:	bf00      	nop
 80001ae:	e7fd      	b.n	80001ac <HardFault_Handler+0x4>

080001b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001b4:	bf00      	nop
 80001b6:	e7fd      	b.n	80001b4 <MemManage_Handler+0x4>

080001b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001bc:	bf00      	nop
 80001be:	e7fd      	b.n	80001bc <BusFault_Handler+0x4>

080001c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001c4:	bf00      	nop
 80001c6:	e7fd      	b.n	80001c4 <UsageFault_Handler+0x4>

080001c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr

080001e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001f0:	f000 f82e 	bl	8000250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr

08000204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000204:	f7ff fff8 	bl	80001f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000208:	480b      	ldr	r0, [pc, #44]	@ (8000238 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800020a:	490c      	ldr	r1, [pc, #48]	@ (800023c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800020c:	4a0c      	ldr	r2, [pc, #48]	@ (8000240 <LoopFillZerobss+0x16>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021e:	4a09      	ldr	r2, [pc, #36]	@ (8000244 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000220:	4c09      	ldr	r4, [pc, #36]	@ (8000248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800022e:	f000 f94d 	bl	80004cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ff8b 	bl	800014c <main>
  bx lr
 8000236:	4770      	bx	lr
  ldr r0, =_sdata
 8000238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800023c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000240:	08000534 	.word	0x08000534
  ldr r2, =_sbss
 8000244:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000248:	20000024 	.word	0x20000024

0800024c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800024c:	e7fe      	b.n	800024c <ADC1_2_IRQHandler>
	...

08000250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000254:	4b05      	ldr	r3, [pc, #20]	@ (800026c <HAL_IncTick+0x1c>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	461a      	mov	r2, r3
 800025a:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <HAL_IncTick+0x20>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4413      	add	r3, r2
 8000260:	4a03      	ldr	r2, [pc, #12]	@ (8000270 <HAL_IncTick+0x20>)
 8000262:	6013      	str	r3, [r2, #0]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	20000000 	.word	0x20000000
 8000270:	20000020 	.word	0x20000020

08000274 <GPIO_pinMode>:
#include "GPIO_interface.h"

void GPIO_pinMode(GPIO_TypeDef *GPIOX, uint8_t pinNumber, GPIO_MODE mode){
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
 8000280:	4613      	mov	r3, r2
 8000282:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8000284:	78fb      	ldrb	r3, [r7, #3]
 8000286:	2b0f      	cmp	r3, #15
 8000288:	f200 80c6 	bhi.w	8000418 <GPIO_pinMode+0x1a4>
		return;
	}
	// Initialize the clock of port x
    if (GPIOX == GPIOA) {
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4a65      	ldr	r2, [pc, #404]	@ (8000424 <GPIO_pinMode+0x1b0>)
 8000290:	4293      	cmp	r3, r2
 8000292:	d106      	bne.n	80002a2 <GPIO_pinMode+0x2e>
		SET_BIT(RCC->APB2ENR, 2);
 8000294:	4b64      	ldr	r3, [pc, #400]	@ (8000428 <GPIO_pinMode+0x1b4>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a63      	ldr	r2, [pc, #396]	@ (8000428 <GPIO_pinMode+0x1b4>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	e02a      	b.n	80002f8 <GPIO_pinMode+0x84>
    } else if (GPIOX == GPIOB) {
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a61      	ldr	r2, [pc, #388]	@ (800042c <GPIO_pinMode+0x1b8>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d106      	bne.n	80002b8 <GPIO_pinMode+0x44>
		SET_BIT(RCC->APB2ENR, 3);
 80002aa:	4b5f      	ldr	r3, [pc, #380]	@ (8000428 <GPIO_pinMode+0x1b4>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	4a5e      	ldr	r2, [pc, #376]	@ (8000428 <GPIO_pinMode+0x1b4>)
 80002b0:	f043 0308 	orr.w	r3, r3, #8
 80002b4:	6193      	str	r3, [r2, #24]
 80002b6:	e01f      	b.n	80002f8 <GPIO_pinMode+0x84>
    } else if (GPIOX == GPIOC) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a5d      	ldr	r2, [pc, #372]	@ (8000430 <GPIO_pinMode+0x1bc>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d106      	bne.n	80002ce <GPIO_pinMode+0x5a>
		SET_BIT(RCC->APB2ENR, 4);
 80002c0:	4b59      	ldr	r3, [pc, #356]	@ (8000428 <GPIO_pinMode+0x1b4>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a58      	ldr	r2, [pc, #352]	@ (8000428 <GPIO_pinMode+0x1b4>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	e014      	b.n	80002f8 <GPIO_pinMode+0x84>
    } else if (GPIOX == GPIOD){
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a58      	ldr	r2, [pc, #352]	@ (8000434 <GPIO_pinMode+0x1c0>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_pinMode+0x70>
    	SET_BIT(RCC->APB2ENR, 5);
 80002d6:	4b54      	ldr	r3, [pc, #336]	@ (8000428 <GPIO_pinMode+0x1b4>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a53      	ldr	r2, [pc, #332]	@ (8000428 <GPIO_pinMode+0x1b4>)
 80002dc:	f043 0320 	orr.w	r3, r3, #32
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	e009      	b.n	80002f8 <GPIO_pinMode+0x84>
    } else if (GPIOX == GPIOE){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a54      	ldr	r2, [pc, #336]	@ (8000438 <GPIO_pinMode+0x1c4>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d105      	bne.n	80002f8 <GPIO_pinMode+0x84>
    	SET_BIT(RCC->APB2ENR, 6);
 80002ec:	4b4e      	ldr	r3, [pc, #312]	@ (8000428 <GPIO_pinMode+0x1b4>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a4d      	ldr	r2, [pc, #308]	@ (8000428 <GPIO_pinMode+0x1b4>)
 80002f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002f6:	6193      	str	r3, [r2, #24]
    }
	volatile uint8_t pinIndex = pinNumber % 8;
 80002f8:	78fb      	ldrb	r3, [r7, #3]
 80002fa:	f003 0307 	and.w	r3, r3, #7
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	72fb      	strb	r3, [r7, #11]

	volatile uint32_t *CRX;
	if (pinNumber < 8 && pinNumber >= 0){
 8000302:	78fb      	ldrb	r3, [r7, #3]
 8000304:	2b07      	cmp	r3, #7
 8000306:	d802      	bhi.n	800030e <GPIO_pinMode+0x9a>
		CRX = &GPIOX->CRL;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	e008      	b.n	8000320 <GPIO_pinMode+0xac>
	}else if(pinNumber >= 8 && pinNumber < 16){
 800030e:	78fb      	ldrb	r3, [r7, #3]
 8000310:	2b07      	cmp	r3, #7
 8000312:	d905      	bls.n	8000320 <GPIO_pinMode+0xac>
 8000314:	78fb      	ldrb	r3, [r7, #3]
 8000316:	2b0f      	cmp	r3, #15
 8000318:	d802      	bhi.n	8000320 <GPIO_pinMode+0xac>
		CRX = &GPIOX->CRH;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	3304      	adds	r3, #4
 800031e:	60fb      	str	r3, [r7, #12]
	}
	// Zero the CRX register
	*CRX &= 0;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
	if (mode == OUTPUT){
 800032a:	78bb      	ldrb	r3, [r7, #2]
 800032c:	2b03      	cmp	r3, #3
 800032e:	d115      	bne.n	800035c <GPIO_pinMode+0xe8>
		if (pinIndex == 0){
 8000330:	7afb      	ldrb	r3, [r7, #11]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d106      	bne.n	8000346 <GPIO_pinMode+0xd2>
			*CRX |= (0x2 << 0);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f043 0202 	orr.w	r2, r3, #2
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	e069      	b.n	800041a <GPIO_pinMode+0x1a6>
		}else{
			*CRX |= (0x2 << (4*(pinIndex)));
 8000346:	7afb      	ldrb	r3, [r7, #11]
 8000348:	b2db      	uxtb	r3, r3
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	2202      	movs	r2, #2
 800034e:	409a      	lsls	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	431a      	orrs	r2, r3
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	e05e      	b.n	800041a <GPIO_pinMode+0x1a6>
		}
	}else if (mode == INPUT_FLOAT){
 800035c:	78bb      	ldrb	r3, [r7, #2]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d115      	bne.n	800038e <GPIO_pinMode+0x11a>
		if (pinIndex == 0){
 8000362:	7afb      	ldrb	r3, [r7, #11]
 8000364:	b2db      	uxtb	r3, r3
 8000366:	2b00      	cmp	r3, #0
 8000368:	d106      	bne.n	8000378 <GPIO_pinMode+0x104>
			*CRX |= (0x4 << 0);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f043 0204 	orr.w	r2, r3, #4
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	e050      	b.n	800041a <GPIO_pinMode+0x1a6>
		}else{
			*CRX |= (0x4 << (4*(pinIndex)));
 8000378:	7afb      	ldrb	r3, [r7, #11]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	2204      	movs	r2, #4
 8000380:	409a      	lsls	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	431a      	orrs	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	e045      	b.n	800041a <GPIO_pinMode+0x1a6>
		}
	}else if (mode == INPUT_PULLUP){
 800038e:	78bb      	ldrb	r3, [r7, #2]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d11e      	bne.n	80003d2 <GPIO_pinMode+0x15e>
		if (pinIndex == 0){
 8000394:	7afb      	ldrb	r3, [r7, #11]
 8000396:	b2db      	uxtb	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d106      	bne.n	80003aa <GPIO_pinMode+0x136>
			*CRX |= (0x8 << 0);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f043 0208 	orr.w	r2, r3, #8
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	e009      	b.n	80003be <GPIO_pinMode+0x14a>
		}else{
			*CRX |= (0x8 << (4*(pinIndex)));
 80003aa:	7afb      	ldrb	r3, [r7, #11]
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	2208      	movs	r2, #8
 80003b2:	409a      	lsls	r2, r3
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	431a      	orrs	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	601a      	str	r2, [r3, #0]
		}
		SET_BIT(GPIOX->ODR, pinNumber);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68db      	ldr	r3, [r3, #12]
 80003c2:	78fa      	ldrb	r2, [r7, #3]
 80003c4:	2101      	movs	r1, #1
 80003c6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ca:	431a      	orrs	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	e023      	b.n	800041a <GPIO_pinMode+0x1a6>
	}else if (mode == INPUT_PULLDOWN){
 80003d2:	78bb      	ldrb	r3, [r7, #2]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d120      	bne.n	800041a <GPIO_pinMode+0x1a6>
		if (pinIndex == 0){
 80003d8:	7afb      	ldrb	r3, [r7, #11]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d106      	bne.n	80003ee <GPIO_pinMode+0x17a>
			*CRX |= (0x8 << 0);
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f043 0208 	orr.w	r2, r3, #8
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	e009      	b.n	8000402 <GPIO_pinMode+0x18e>
		}else{
			*CRX |= (0x8 << (4*(pinIndex)));
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	2208      	movs	r2, #8
 80003f6:	409a      	lsls	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	431a      	orrs	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	601a      	str	r2, [r3, #0]
		}
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	78fa      	ldrb	r2, [r7, #3]
 8000408:	2101      	movs	r1, #1
 800040a:	fa01 f202 	lsl.w	r2, r1, r2
 800040e:	43d2      	mvns	r2, r2
 8000410:	401a      	ands	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	e000      	b.n	800041a <GPIO_pinMode+0x1a6>
		return;
 8000418:	bf00      	nop
	}
}
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40010800 	.word	0x40010800
 8000428:	40021000 	.word	0x40021000
 800042c:	40010c00 	.word	0x40010c00
 8000430:	40011000 	.word	0x40011000
 8000434:	40011400 	.word	0x40011400
 8000438:	40011800 	.word	0x40011800

0800043c <GPIO_digitalWrite>:

void GPIO_digitalWrite(GPIO_TypeDef *GPIOX, uint8_t pinNumber, PIN_LEVEL level){
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
 8000448:	4613      	mov	r3, r2
 800044a:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	2b0f      	cmp	r3, #15
 8000450:	d81a      	bhi.n	8000488 <GPIO_digitalWrite+0x4c>
		return;
	}
	if (level == HIGH){
 8000452:	78bb      	ldrb	r3, [r7, #2]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d109      	bne.n	800046c <GPIO_digitalWrite+0x30>
		SET_BIT(GPIOX->ODR, pinNumber);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	78fa      	ldrb	r2, [r7, #3]
 800045e:	2101      	movs	r1, #1
 8000460:	fa01 f202 	lsl.w	r2, r1, r2
 8000464:	431a      	orrs	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	e00e      	b.n	800048a <GPIO_digitalWrite+0x4e>
	}else if(level == LOW){
 800046c:	78bb      	ldrb	r3, [r7, #2]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d10b      	bne.n	800048a <GPIO_digitalWrite+0x4e>
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	78fa      	ldrb	r2, [r7, #3]
 8000478:	2101      	movs	r1, #1
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	43d2      	mvns	r2, r2
 8000480:	401a      	ands	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	e000      	b.n	800048a <GPIO_digitalWrite+0x4e>
		return;
 8000488:	bf00      	nop
	}
}
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr

08000492 <GPIO_digitalRead>:

uint8_t GPIO_digitalRead(GPIO_TypeDef *GPIOX, uint8_t pinNumber){
 8000492:	b480      	push	{r7}
 8000494:	b083      	sub	sp, #12
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	460b      	mov	r3, r1
 800049c:	70fb      	strb	r3, [r7, #3]
	if (pinNumber < 0 || pinNumber > 15){
 800049e:	78fb      	ldrb	r3, [r7, #3]
 80004a0:	2b0f      	cmp	r3, #15
 80004a2:	d901      	bls.n	80004a8 <GPIO_digitalRead+0x16>
		return 99;
 80004a4:	2363      	movs	r3, #99	@ 0x63
 80004a6:	e00b      	b.n	80004c0 <GPIO_digitalRead+0x2e>
	}
	return READ_BIT(GPIOX->IDR, pinNumber);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	78fa      	ldrb	r2, [r7, #3]
 80004ae:	2101      	movs	r1, #1
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	4013      	ands	r3, r2
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	bf14      	ite	ne
 80004ba:	2301      	movne	r3, #1
 80004bc:	2300      	moveq	r3, #0
 80004be:	b2db      	uxtb	r3, r3
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
	...

080004cc <__libc_init_array>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	2600      	movs	r6, #0
 80004d0:	4d0c      	ldr	r5, [pc, #48]	@ (8000504 <__libc_init_array+0x38>)
 80004d2:	4c0d      	ldr	r4, [pc, #52]	@ (8000508 <__libc_init_array+0x3c>)
 80004d4:	1b64      	subs	r4, r4, r5
 80004d6:	10a4      	asrs	r4, r4, #2
 80004d8:	42a6      	cmp	r6, r4
 80004da:	d109      	bne.n	80004f0 <__libc_init_array+0x24>
 80004dc:	f000 f81a 	bl	8000514 <_init>
 80004e0:	2600      	movs	r6, #0
 80004e2:	4d0a      	ldr	r5, [pc, #40]	@ (800050c <__libc_init_array+0x40>)
 80004e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000510 <__libc_init_array+0x44>)
 80004e6:	1b64      	subs	r4, r4, r5
 80004e8:	10a4      	asrs	r4, r4, #2
 80004ea:	42a6      	cmp	r6, r4
 80004ec:	d105      	bne.n	80004fa <__libc_init_array+0x2e>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f4:	4798      	blx	r3
 80004f6:	3601      	adds	r6, #1
 80004f8:	e7ee      	b.n	80004d8 <__libc_init_array+0xc>
 80004fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fe:	4798      	blx	r3
 8000500:	3601      	adds	r6, #1
 8000502:	e7f2      	b.n	80004ea <__libc_init_array+0x1e>
 8000504:	0800052c 	.word	0x0800052c
 8000508:	0800052c 	.word	0x0800052c
 800050c:	0800052c 	.word	0x0800052c
 8000510:	08000530 	.word	0x08000530

08000514 <_init>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	bf00      	nop
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr

08000520 <_fini>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	bf00      	nop
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr
