
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e68  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f74  08000f74  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f74  08000f74  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000f74  08000f74  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000f74  08000f74  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f74  08000f74  00001f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f78  08000f78  00001f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000f7c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000f80  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000f80  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000172a  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007fa  00000000  00000000  00003757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  00003f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000019a  00000000  00000000  000041a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001562c  00000000  00000000  0000433a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003272  00000000  00000000  00019966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b5cc  00000000  00000000  0001cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000981a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000086c  00000000  00000000  000981e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00098a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000f5c 	.word	0x08000f5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000f5c 	.word	0x08000f5c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <ADC_init>:

float map(float val, float from1, float to1, float from2, float to2){
	return (val/(to1-from1)*(to2-from1));
}

void ADC_init(){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 9); // start the clock
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <ADC_init+0xa8>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a27      	ldr	r2, [pc, #156]	@ (80007dc <ADC_init+0xa8>)
 8000740:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000744:	6193      	str	r3, [r2, #24]
	ADC1->CR2 |= (1 << 0); // power the adc
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <ADC_init+0xac>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	4a25      	ldr	r2, [pc, #148]	@ (80007e0 <ADC_init+0xac>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6093      	str	r3, [r2, #8]
	for (volatile int i = 0; i < 1000; i++) {
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	e002      	b.n	800075e <ADC_init+0x2a>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3301      	adds	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000764:	dbf8      	blt.n	8000758 <ADC_init+0x24>
	    // Delay loop, intentionally empty
	}
	ADC1->CR2 |= (1 << 0); // repower the adc
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <ADC_init+0xac>)
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <ADC_init+0xac>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6093      	str	r3, [r2, #8]
    ADC1->CR2 &= ~(1 << 11);   // Right alignment by default
 8000772:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <ADC_init+0xac>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	4a1a      	ldr	r2, [pc, #104]	@ (80007e0 <ADC_init+0xac>)
 8000778:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800077c:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1 << 1); // continuous conversion
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <ADC_init+0xac>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <ADC_init+0xac>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1 << 2); // calibrate
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <ADC_init+0xac>)
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <ADC_init+0xac>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6093      	str	r3, [r2, #8]
	while (ADC1->CR2 & (1 << 2)); // wait for the calibration
 8000796:	bf00      	nop
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <ADC_init+0xac>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f9      	bne.n	8000798 <ADC_init+0x64>
	ADC1->SMPR2 |= (3 << 0); // sampling cycles of 28.5 cycles
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <ADC_init+0xac>)
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <ADC_init+0xac>)
 80007aa:	f043 0303 	orr.w	r3, r3, #3
 80007ae:	6113      	str	r3, [r2, #16]
	ADC1->SQR1 &= ~(0xF << 20); // choose length of 1 conversion
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <ADC_init+0xac>)
 80007b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <ADC_init+0xac>)
 80007b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80007ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR3 |= (0 << 0); // choose the order
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <ADC_init+0xac>)
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <ADC_init+0xac>)
 80007c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007c2:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->CR2 |= (1 << 22); // start conversion
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <ADC_init+0xac>)
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	4a05      	ldr	r2, [pc, #20]	@ (80007e0 <ADC_init+0xac>)
 80007ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007ce:	6093      	str	r3, [r2, #8]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40012400 	.word	0x40012400

080007e4 <main>:
    return ADC1->DR;
}


int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 2) | (1 << 3); // CLK PA, PB
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <main+0x58>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a13      	ldr	r2, [pc, #76]	@ (800083c <main+0x58>)
 80007ee:	f043 030c 	orr.w	r3, r3, #12
 80007f2:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0;
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <main+0x5c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <main+0x5c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
	GPIOB->CRL &= 0;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <main+0x60>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <main+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= 0x44444440; // pin A0 analog input
 8000808:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <main+0x5c>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	490c      	ldr	r1, [pc, #48]	@ (8000840 <main+0x5c>)
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <main+0x64>)
 8000810:	4313      	orrs	r3, r2
 8000812:	600b      	str	r3, [r1, #0]
	ADC_init();
 8000814:	f7ff ff8e 	bl	8000734 <ADC_init>
	GPIO_pinMode(GPIOA, 6, INPUT_PULLUP);
 8000818:	2200      	movs	r2, #0
 800081a:	2106      	movs	r1, #6
 800081c:	4808      	ldr	r0, [pc, #32]	@ (8000840 <main+0x5c>)
 800081e:	f000 f883 	bl	8000928 <GPIO_pinMode>
	TIM_initPWM(TIM2, 1, 50);
 8000822:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <main+0x68>)
 8000824:	2101      	movs	r1, #1
 8000826:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800082a:	f000 f921 	bl	8000a70 <TIM_initPWM>
//	GPIO_pinMode(GPIOB, 12, OUTPUT);
//	TIM_initDelay(TIM2, 10);
	while (1)
	{

		TIM_writePWM(TIM2, 1, 2.5);
 800082e:	4a08      	ldr	r2, [pc, #32]	@ (8000850 <main+0x6c>)
 8000830:	2101      	movs	r1, #1
 8000832:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000836:	f000 fb17 	bl	8000e68 <TIM_writePWM>
 800083a:	e7f8      	b.n	800082e <main+0x4a>
 800083c:	40021000 	.word	0x40021000
 8000840:	40010800 	.word	0x40010800
 8000844:	40010c00 	.word	0x40010c00
 8000848:	44444440 	.word	0x44444440
 800084c:	42480000 	.word	0x42480000
 8000850:	40200000 	.word	0x40200000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <NMI_Handler+0x4>

0800085c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <MemManage_Handler+0x4>

0800086c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <UsageFault_Handler+0x4>

0800087c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f82e 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b8:	f7ff fff8 	bl	80008ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008bc:	480b      	ldr	r0, [pc, #44]	@ (80008ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008be:	490c      	ldr	r1, [pc, #48]	@ (80008f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008c0:	4a0c      	ldr	r2, [pc, #48]	@ (80008f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a09      	ldr	r2, [pc, #36]	@ (80008f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008d4:	4c09      	ldr	r4, [pc, #36]	@ (80008fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e2:	f000 fb17 	bl	8000f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff ff7d 	bl	80007e4 <main>
  bx lr
 80008ea:	4770      	bx	lr
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008f4:	08000f7c 	.word	0x08000f7c
  ldr r2, =_sbss
 80008f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008fc:	20000024 	.word	0x20000024

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <HAL_IncTick+0x1c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <HAL_IncTick+0x20>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a03      	ldr	r2, [pc, #12]	@ (8000924 <HAL_IncTick+0x20>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	20000000 	.word	0x20000000
 8000924:	20000020 	.word	0x20000020

08000928 <GPIO_pinMode>:
#include "GPIO_interface.h"

void GPIO_pinMode(GPIO_TypeDef *GPIOX, uint8_t pinNumber, GPIO_MODE mode){
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
 8000934:	4613      	mov	r3, r2
 8000936:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	2b0f      	cmp	r3, #15
 800093c:	f200 808b 	bhi.w	8000a56 <GPIO_pinMode+0x12e>
		return;
	}
	// Initialize the clock of port x
    if (GPIOX == GPIOA) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a47      	ldr	r2, [pc, #284]	@ (8000a60 <GPIO_pinMode+0x138>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d106      	bne.n	8000956 <GPIO_pinMode+0x2e>
		SET_BIT(RCC->APB2ENR, 2);
 8000948:	4b46      	ldr	r3, [pc, #280]	@ (8000a64 <GPIO_pinMode+0x13c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a45      	ldr	r2, [pc, #276]	@ (8000a64 <GPIO_pinMode+0x13c>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	e014      	b.n	8000980 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOB) {
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a43      	ldr	r2, [pc, #268]	@ (8000a68 <GPIO_pinMode+0x140>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d106      	bne.n	800096c <GPIO_pinMode+0x44>
		SET_BIT(RCC->APB2ENR, 3);
 800095e:	4b41      	ldr	r3, [pc, #260]	@ (8000a64 <GPIO_pinMode+0x13c>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a40      	ldr	r2, [pc, #256]	@ (8000a64 <GPIO_pinMode+0x13c>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	e009      	b.n	8000980 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOC) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a6c <GPIO_pinMode+0x144>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d105      	bne.n	8000980 <GPIO_pinMode+0x58>
		SET_BIT(RCC->APB2ENR, 4);
 8000974:	4b3b      	ldr	r3, [pc, #236]	@ (8000a64 <GPIO_pinMode+0x13c>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a3a      	ldr	r2, [pc, #232]	@ (8000a64 <GPIO_pinMode+0x13c>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6193      	str	r3, [r2, #24]
    }
	volatile uint8_t pinIndex = pinNumber % 8;
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	b2db      	uxtb	r3, r3
 8000988:	72fb      	strb	r3, [r7, #11]

	volatile uint32_t *CRX;
	if (pinNumber < 8 && pinNumber >= 0){
 800098a:	78fb      	ldrb	r3, [r7, #3]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d802      	bhi.n	8000996 <GPIO_pinMode+0x6e>
		CRX = &GPIOX->CRL;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e008      	b.n	80009a8 <GPIO_pinMode+0x80>
	}else if(pinNumber >= 8 && pinNumber < 16){
 8000996:	78fb      	ldrb	r3, [r7, #3]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d905      	bls.n	80009a8 <GPIO_pinMode+0x80>
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d802      	bhi.n	80009a8 <GPIO_pinMode+0x80>
		CRX = &GPIOX->CRH;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3304      	adds	r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]
	}
	// Zero the CRX register's specific pin mode not the whole register
	*CRX &= ~(0xF << (4*(pinIndex)));
 80009a8:	7afb      	ldrb	r3, [r7, #11]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	220f      	movs	r2, #15
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43da      	mvns	r2, r3
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	401a      	ands	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	601a      	str	r2, [r3, #0]
	if (mode == OUTPUT){
 80009c0:	78bb      	ldrb	r3, [r7, #2]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d10a      	bne.n	80009dc <GPIO_pinMode+0xb4>
		*CRX |= (0x2 << (4*(pinIndex)));
 80009c6:	7afb      	ldrb	r3, [r7, #11]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	2202      	movs	r2, #2
 80009ce:	409a      	lsls	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	431a      	orrs	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e03d      	b.n	8000a58 <GPIO_pinMode+0x130>
	}else if (mode == INPUT_FLOAT){
 80009dc:	78bb      	ldrb	r3, [r7, #2]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d10a      	bne.n	80009f8 <GPIO_pinMode+0xd0>
		*CRX |= (0x4 << (4*(pinIndex)));
 80009e2:	7afb      	ldrb	r3, [r7, #11]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	2204      	movs	r2, #4
 80009ea:	409a      	lsls	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	431a      	orrs	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	e02f      	b.n	8000a58 <GPIO_pinMode+0x130>
	}else if (mode == INPUT_PULLUP){
 80009f8:	78bb      	ldrb	r3, [r7, #2]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d113      	bne.n	8000a26 <GPIO_pinMode+0xfe>
		*CRX |= (0x8 << (4*(pinIndex)));
 80009fe:	7afb      	ldrb	r3, [r7, #11]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	2208      	movs	r2, #8
 8000a06:	409a      	lsls	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	601a      	str	r2, [r3, #0]
		SET_BIT(GPIOX->ODR, pinNumber);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	78fa      	ldrb	r2, [r7, #3]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	e018      	b.n	8000a58 <GPIO_pinMode+0x130>
	}else if (mode == INPUT_PULLDOWN){
 8000a26:	78bb      	ldrb	r3, [r7, #2]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d115      	bne.n	8000a58 <GPIO_pinMode+0x130>
		*CRX |= (0x8 << (4*(pinIndex)));
 8000a2c:	7afb      	ldrb	r3, [r7, #11]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	2208      	movs	r2, #8
 8000a34:	409a      	lsls	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	78fa      	ldrb	r2, [r7, #3]
 8000a46:	2101      	movs	r1, #1
 8000a48:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4c:	43d2      	mvns	r2, r2
 8000a4e:	401a      	ands	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	e000      	b.n	8000a58 <GPIO_pinMode+0x130>
		return;
 8000a56:	bf00      	nop
	}
}
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40010800 	.word	0x40010800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40010c00 	.word	0x40010c00
 8000a6c:	40011000 	.word	0x40011000

08000a70 <TIM_initPWM>:
#include "TIM_interface.h"

void TIM_initPWM(TIM_TypeDef *TIMX, uint8_t channel, float frequency){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	72fb      	strb	r3, [r7, #11]
	if (channel < 1 || channel > 4){
 8000a7e:	7afb      	ldrb	r3, [r7, #11]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 81eb 	beq.w	8000e5c <TIM_initPWM+0x3ec>
 8000a86:	7afb      	ldrb	r3, [r7, #11]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	f200 81e7 	bhi.w	8000e5c <TIM_initPWM+0x3ec>
		return;
	}
	// init clock and corresponding pin in the GPIO
	if (TIMX == TIM2) {
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a94:	d150      	bne.n	8000b38 <TIM_initPWM+0xc8>
	    SET_BIT(RCC->APB1ENR, 0); // Enable TIM2 clock
 8000a96:	4b9a      	ldr	r3, [pc, #616]	@ (8000d00 <TIM_initPWM+0x290>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a99      	ldr	r2, [pc, #612]	@ (8000d00 <TIM_initPWM+0x290>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	61d3      	str	r3, [r2, #28]
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // Enable GPIOA clock
 8000aa2:	4b97      	ldr	r3, [pc, #604]	@ (8000d00 <TIM_initPWM+0x290>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4a96      	ldr	r2, [pc, #600]	@ (8000d00 <TIM_initPWM+0x290>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6193      	str	r3, [r2, #24]
	    switch (channel) {
 8000aae:	7afb      	ldrb	r3, [r7, #11]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	f200 80e8 	bhi.w	8000c88 <TIM_initPWM+0x218>
 8000ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac0 <TIM_initPWM+0x50>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ad1 	.word	0x08000ad1
 8000ac4:	08000aeb 	.word	0x08000aeb
 8000ac8:	08000b05 	.word	0x08000b05
 8000acc:	08000b1f 	.word	0x08000b1f
	    case 1: // PA0
	        GPIOA->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8000ad0:	4b8c      	ldr	r3, [pc, #560]	@ (8000d04 <TIM_initPWM+0x294>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a8b      	ldr	r2, [pc, #556]	@ (8000d04 <TIM_initPWM+0x294>)
 8000ad6:	f023 030f 	bic.w	r3, r3, #15
 8000ada:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_CNF0_1); // 2 MHz, AF PP
 8000adc:	4b89      	ldr	r3, [pc, #548]	@ (8000d04 <TIM_initPWM+0x294>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a88      	ldr	r2, [pc, #544]	@ (8000d04 <TIM_initPWM+0x294>)
 8000ae2:	f043 030a 	orr.w	r3, r3, #10
 8000ae6:	6013      	str	r3, [r2, #0]
	        break;
 8000ae8:	e0ce      	b.n	8000c88 <TIM_initPWM+0x218>
	    case 2: // PA1
	        GPIOA->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);
 8000aea:	4b86      	ldr	r3, [pc, #536]	@ (8000d04 <TIM_initPWM+0x294>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a85      	ldr	r2, [pc, #532]	@ (8000d04 <TIM_initPWM+0x294>)
 8000af0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000af4:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1);
 8000af6:	4b83      	ldr	r3, [pc, #524]	@ (8000d04 <TIM_initPWM+0x294>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a82      	ldr	r2, [pc, #520]	@ (8000d04 <TIM_initPWM+0x294>)
 8000afc:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000b00:	6013      	str	r3, [r2, #0]
	        break;
 8000b02:	e0c1      	b.n	8000c88 <TIM_initPWM+0x218>
	    case 3: // PA2
	        GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8000b04:	4b7f      	ldr	r3, [pc, #508]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a7e      	ldr	r2, [pc, #504]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000b0e:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_CNF2_1);
 8000b10:	4b7c      	ldr	r3, [pc, #496]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a7b      	ldr	r2, [pc, #492]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b16:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 8000b1a:	6013      	str	r3, [r2, #0]
	        break;
 8000b1c:	e0b4      	b.n	8000c88 <TIM_initPWM+0x218>
	    case 4: // PA3
	        GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8000b1e:	4b79      	ldr	r3, [pc, #484]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a78      	ldr	r2, [pc, #480]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000b28:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE3_1 | GPIO_CRL_CNF3_1);
 8000b2a:	4b76      	ldr	r3, [pc, #472]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a75      	ldr	r2, [pc, #468]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b30:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000b34:	6013      	str	r3, [r2, #0]
	        break;
 8000b36:	e0a7      	b.n	8000c88 <TIM_initPWM+0x218>
	    }
	} else if (TIMX == TIM3) {
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4a73      	ldr	r2, [pc, #460]	@ (8000d08 <TIM_initPWM+0x298>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d14f      	bne.n	8000be0 <TIM_initPWM+0x170>
	    SET_BIT(RCC->APB1ENR, 1); // Enable TIM3 clock
 8000b40:	4b6f      	ldr	r3, [pc, #444]	@ (8000d00 <TIM_initPWM+0x290>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	4a6e      	ldr	r2, [pc, #440]	@ (8000d00 <TIM_initPWM+0x290>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	61d3      	str	r3, [r2, #28]
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN; // Enable GPIOA & GPIOB
 8000b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8000d00 <TIM_initPWM+0x290>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a6b      	ldr	r2, [pc, #428]	@ (8000d00 <TIM_initPWM+0x290>)
 8000b52:	f043 030c 	orr.w	r3, r3, #12
 8000b56:	6193      	str	r3, [r2, #24]
	    switch (channel) {
 8000b58:	7afb      	ldrb	r3, [r7, #11]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	f200 8093 	bhi.w	8000c88 <TIM_initPWM+0x218>
 8000b62:	a201      	add	r2, pc, #4	@ (adr r2, 8000b68 <TIM_initPWM+0xf8>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000b79 	.word	0x08000b79
 8000b6c:	08000b93 	.word	0x08000b93
 8000b70:	08000bad 	.word	0x08000bad
 8000b74:	08000bc7 	.word	0x08000bc7
	    case 1: // PA6
	        GPIOA->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8000b78:	4b62      	ldr	r3, [pc, #392]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a61      	ldr	r2, [pc, #388]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b7e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000b82:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1);
 8000b84:	4b5f      	ldr	r3, [pc, #380]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a5e      	ldr	r2, [pc, #376]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b8a:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8000b8e:	6013      	str	r3, [r2, #0]
	        break;
 8000b90:	e07a      	b.n	8000c88 <TIM_initPWM+0x218>
	    case 2: // PA7
	        GPIOA->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8000b92:	4b5c      	ldr	r3, [pc, #368]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a5b      	ldr	r2, [pc, #364]	@ (8000d04 <TIM_initPWM+0x294>)
 8000b98:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000b9c:	6013      	str	r3, [r2, #0]
	        GPIOA->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1);
 8000b9e:	4b59      	ldr	r3, [pc, #356]	@ (8000d04 <TIM_initPWM+0x294>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a58      	ldr	r2, [pc, #352]	@ (8000d04 <TIM_initPWM+0x294>)
 8000ba4:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 8000ba8:	6013      	str	r3, [r2, #0]
	        break;
 8000baa:	e06d      	b.n	8000c88 <TIM_initPWM+0x218>
	    case 3: // PB0
	        GPIOB->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8000bac:	4b57      	ldr	r3, [pc, #348]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a56      	ldr	r2, [pc, #344]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000bb2:	f023 030f 	bic.w	r3, r3, #15
 8000bb6:	6013      	str	r3, [r2, #0]
	        GPIOB->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_CNF0_1);
 8000bb8:	4b54      	ldr	r3, [pc, #336]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a53      	ldr	r2, [pc, #332]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000bbe:	f043 030a 	orr.w	r3, r3, #10
 8000bc2:	6013      	str	r3, [r2, #0]
	        break;
 8000bc4:	e060      	b.n	8000c88 <TIM_initPWM+0x218>
	    case 4: // PB1
	        GPIOB->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);
 8000bc6:	4b51      	ldr	r3, [pc, #324]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a50      	ldr	r2, [pc, #320]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000bcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000bd0:	6013      	str	r3, [r2, #0]
	        GPIOB->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1);
 8000bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a4d      	ldr	r2, [pc, #308]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000bd8:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000bdc:	6013      	str	r3, [r2, #0]
	        break;
 8000bde:	e053      	b.n	8000c88 <TIM_initPWM+0x218>
	    }
	} else if (TIMX == TIM4) {
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4a4b      	ldr	r2, [pc, #300]	@ (8000d10 <TIM_initPWM+0x2a0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14f      	bne.n	8000c88 <TIM_initPWM+0x218>
	    SET_BIT(RCC->APB1ENR, 2); // Enable TIM4 clock
 8000be8:	4b45      	ldr	r3, [pc, #276]	@ (8000d00 <TIM_initPWM+0x290>)
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	4a44      	ldr	r2, [pc, #272]	@ (8000d00 <TIM_initPWM+0x290>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	61d3      	str	r3, [r2, #28]
	    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; // Enable GPIOB clock
 8000bf4:	4b42      	ldr	r3, [pc, #264]	@ (8000d00 <TIM_initPWM+0x290>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a41      	ldr	r2, [pc, #260]	@ (8000d00 <TIM_initPWM+0x290>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
	    switch (channel) {
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d83f      	bhi.n	8000c88 <TIM_initPWM+0x218>
 8000c08:	a201      	add	r2, pc, #4	@ (adr r2, 8000c10 <TIM_initPWM+0x1a0>)
 8000c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0e:	bf00      	nop
 8000c10:	08000c21 	.word	0x08000c21
 8000c14:	08000c3b 	.word	0x08000c3b
 8000c18:	08000c55 	.word	0x08000c55
 8000c1c:	08000c6f 	.word	0x08000c6f
	    case 1: // PB6
	        GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8000c20:	4b3a      	ldr	r3, [pc, #232]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a39      	ldr	r2, [pc, #228]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c26:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000c2a:	6013      	str	r3, [r2, #0]
	        GPIOB->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1);
 8000c2c:	4b37      	ldr	r3, [pc, #220]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a36      	ldr	r2, [pc, #216]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c32:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8000c36:	6013      	str	r3, [r2, #0]
	        break;
 8000c38:	e026      	b.n	8000c88 <TIM_initPWM+0x218>
	    case 2: // PB7
	        GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8000c3a:	4b34      	ldr	r3, [pc, #208]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a33      	ldr	r2, [pc, #204]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c40:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c44:	6013      	str	r3, [r2, #0]
	        GPIOB->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1);
 8000c46:	4b31      	ldr	r3, [pc, #196]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a30      	ldr	r2, [pc, #192]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c4c:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 8000c50:	6013      	str	r3, [r2, #0]
	        break;
 8000c52:	e019      	b.n	8000c88 <TIM_initPWM+0x218>
	    case 3: // PB8
	        GPIOB->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 8000c54:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	4a2c      	ldr	r2, [pc, #176]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c5a:	f023 030f 	bic.w	r3, r3, #15
 8000c5e:	6053      	str	r3, [r2, #4]
	        GPIOB->CRH |= (GPIO_CRH_MODE8_1 | GPIO_CRH_CNF8_1);
 8000c60:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	4a29      	ldr	r2, [pc, #164]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c66:	f043 030a 	orr.w	r3, r3, #10
 8000c6a:	6053      	str	r3, [r2, #4]
	        break;
 8000c6c:	e00c      	b.n	8000c88 <TIM_initPWM+0x218>
	    case 4: // PB9
	        GPIOB->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 8000c6e:	4b27      	ldr	r3, [pc, #156]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	4a26      	ldr	r2, [pc, #152]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000c78:	6053      	str	r3, [r2, #4]
	        GPIOB->CRH |= (GPIO_CRH_MODE9_1 | GPIO_CRH_CNF9_1);
 8000c7a:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	4a23      	ldr	r2, [pc, #140]	@ (8000d0c <TIM_initPWM+0x29c>)
 8000c80:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000c84:	6053      	str	r3, [r2, #4]
	        break;
 8000c86:	bf00      	nop
	    }
	}

	// direction
	CLEAR_BIT(TIMX->CR1, 4);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f023 0210 	bic.w	r2, r3, #16
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]
	// mode 'edge aligned'
	CLEAR_BIT(TIMX->CR1, 5);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f023 0220 	bic.w	r2, r3, #32
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIMX->CR1, 6);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	601a      	str	r2, [r3, #0]
	// set the ARR preload
	SET_BIT(TIMX->CR1, 7);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	601a      	str	r2, [r3, #0]
	//enable the capture compare corresponding pin
	SET_BIT(TIMX->CCER, (4*(channel-1)));
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	7afa      	ldrb	r2, [r7, #11]
 8000cbe:	3a01      	subs	r2, #1
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	621a      	str	r2, [r3, #32]
	// choose the polarity of the pin to active high
	CLEAR_BIT(TIMX->CCER, (4*(channel-1)+1));
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6a1b      	ldr	r3, [r3, #32]
 8000cd2:	7afa      	ldrb	r2, [r7, #11]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	3201      	adds	r2, #1
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce0:	43d2      	mvns	r2, r2
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	621a      	str	r2, [r3, #32]

	volatile uint32_t *CCMRX;
	uint8_t modChannel = 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	76fb      	strb	r3, [r7, #27]
	if (channel <= 2){
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d810      	bhi.n	8000d14 <TIM_initPWM+0x2a4>
		CCMRX = &TIMX->CCMR1;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3318      	adds	r3, #24
 8000cf6:	61fb      	str	r3, [r7, #28]
		modChannel = channel;
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	76fb      	strb	r3, [r7, #27]
 8000cfc:	e010      	b.n	8000d20 <TIM_initPWM+0x2b0>
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010800 	.word	0x40010800
 8000d08:	40000400 	.word	0x40000400
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	40000800 	.word	0x40000800
	}else{
		CCMRX = &TIMX->CCMR2;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	331c      	adds	r3, #28
 8000d18:	61fb      	str	r3, [r7, #28]
		modChannel = channel-2;
 8000d1a:	7afb      	ldrb	r3, [r7, #11]
 8000d1c:	3b02      	subs	r3, #2
 8000d1e:	76fb      	strb	r3, [r7, #27]
	}
	// set the channel mode to be output
	CLEAR_BIT(*CCMRX, (8*(modChannel-1)));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	7efa      	ldrb	r2, [r7, #27]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	00d2      	lsls	r2, r2, #3
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	401a      	ands	r2, r3
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(*CCMRX, (8*(modChannel-1)+1));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	7efa      	ldrb	r2, [r7, #27]
 8000d3e:	3a01      	subs	r2, #1
 8000d40:	00d2      	lsls	r2, r2, #3
 8000d42:	3201      	adds	r2, #1
 8000d44:	2101      	movs	r1, #1
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	43d2      	mvns	r2, r2
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	601a      	str	r2, [r3, #0]
	// set the channel preload enable
	SET_BIT(*CCMRX, (8*(modChannel-1)+3));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	7efa      	ldrb	r2, [r7, #27]
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	00d2      	lsls	r2, r2, #3
 8000d5c:	3203      	adds	r2, #3
 8000d5e:	2101      	movs	r1, #1
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	431a      	orrs	r2, r3
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	601a      	str	r2, [r3, #0]
	// select PWM mode 1
	CLEAR_BIT(*CCMRX, (8*(modChannel-1)+4));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	7efa      	ldrb	r2, [r7, #27]
 8000d70:	3a01      	subs	r2, #1
 8000d72:	00d2      	lsls	r2, r2, #3
 8000d74:	3204      	adds	r2, #4
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	43d2      	mvns	r2, r2
 8000d7e:	401a      	ands	r2, r3
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	601a      	str	r2, [r3, #0]
	SET_BIT(*CCMRX, (8*(modChannel-1)+5));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	7efa      	ldrb	r2, [r7, #27]
 8000d8a:	3a01      	subs	r2, #1
 8000d8c:	00d2      	lsls	r2, r2, #3
 8000d8e:	3205      	adds	r2, #5
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	431a      	orrs	r2, r3
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	601a      	str	r2, [r3, #0]
	SET_BIT(*CCMRX, (8*(modChannel-1)+6));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	7efa      	ldrb	r2, [r7, #27]
 8000da2:	3a01      	subs	r2, #1
 8000da4:	00d2      	lsls	r2, r2, #3
 8000da6:	3206      	adds	r2, #6
 8000da8:	2101      	movs	r1, #1
 8000daa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dae:	431a      	orrs	r2, r3
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	601a      	str	r2, [r3, #0]

	// setting the psc with zero
	TIMX->PSC = 0;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	@ 0x28
	// calculating prescaler and arr for specific frequency
	float currentARR = (8000000/((frequency*(TIMX->PSC+1))))-1;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fa79 	bl	80002b8 <__aeabi_ui2f>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff facc 	bl	8000368 <__aeabi_fmul>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4823      	ldr	r0, [pc, #140]	@ (8000e64 <TIM_initPWM+0x3f4>)
 8000dd6:	f7ff fb7b 	bl	80004d0 <__aeabi_fdiv>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff f9b7 	bl	8000154 <__aeabi_fsub>
 8000de6:	4603      	mov	r3, r0
 8000de8:	617b      	str	r3, [r7, #20]
	while (currentARR >= 65536){
 8000dea:	e01c      	b.n	8000e26 <TIM_initPWM+0x3b6>
		TIMX->PSC += 1;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	629a      	str	r2, [r3, #40]	@ 0x28
		currentARR = (8000000/((frequency*(TIMX->PSC+1))))-1;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fa5b 	bl	80002b8 <__aeabi_ui2f>
 8000e02:	4603      	mov	r3, r0
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff faae 	bl	8000368 <__aeabi_fmul>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4814      	ldr	r0, [pc, #80]	@ (8000e64 <TIM_initPWM+0x3f4>)
 8000e12:	f7ff fb5d 	bl	80004d0 <__aeabi_fdiv>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff f999 	bl	8000154 <__aeabi_fsub>
 8000e22:	4603      	mov	r3, r0
 8000e24:	617b      	str	r3, [r7, #20]
	while (currentARR >= 65536){
 8000e26:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff fc4e 	bl	80006cc <__aeabi_fcmpge>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1da      	bne.n	8000dec <TIM_initPWM+0x37c>
	}
	TIMX->ARR = currentARR;
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff fc5c 	bl	80006f4 <__aeabi_f2uiz>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	62da      	str	r2, [r3, #44]	@ 0x2c
	SET_BIT(TIMX->EGR, 0);  // UG: Update Generation
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f043 0201 	orr.w	r2, r3, #1
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	615a      	str	r2, [r3, #20]
	// start counting
	SET_BIT(TIMX->CR1, 0);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e000      	b.n	8000e5e <TIM_initPWM+0x3ee>
		return;
 8000e5c:	bf00      	nop
}
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	4af42400 	.word	0x4af42400

08000e68 <TIM_writePWM>:

void TIM_writePWM(TIM_TypeDef *TIMX, uint8_t channel, float dutyCycle){
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	460b      	mov	r3, r1
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	72fb      	strb	r3, [r7, #11]
	if (channel < 1 || channel > 4 || dutyCycle < 0 || dutyCycle > 100){
 8000e76:	7afb      	ldrb	r3, [r7, #11]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d044      	beq.n	8000f06 <TIM_writePWM+0x9e>
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	d841      	bhi.n	8000f06 <TIM_writePWM+0x9e>
 8000e82:	f04f 0100 	mov.w	r1, #0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fc0c 	bl	80006a4 <__aeabi_fcmplt>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d139      	bne.n	8000f06 <TIM_writePWM+0x9e>
 8000e92:	491f      	ldr	r1, [pc, #124]	@ (8000f10 <TIM_writePWM+0xa8>)
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fc23 	bl	80006e0 <__aeabi_fcmpgt>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d132      	bne.n	8000f06 <TIM_writePWM+0x9e>
		return;
	}
	volatile uint32_t *CCRX;
	if (channel == 1) {
 8000ea0:	7afb      	ldrb	r3, [r7, #11]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d103      	bne.n	8000eae <TIM_writePWM+0x46>
		CCRX = &TIMX->CCR1;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3334      	adds	r3, #52	@ 0x34
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e013      	b.n	8000ed6 <TIM_writePWM+0x6e>
    } else if (channel == 2) {
 8000eae:	7afb      	ldrb	r3, [r7, #11]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d103      	bne.n	8000ebc <TIM_writePWM+0x54>
    	CCRX = &TIMX->CCR2;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3338      	adds	r3, #56	@ 0x38
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e00c      	b.n	8000ed6 <TIM_writePWM+0x6e>
    } else if (channel == 3) {
 8000ebc:	7afb      	ldrb	r3, [r7, #11]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d103      	bne.n	8000eca <TIM_writePWM+0x62>
    	CCRX = &TIMX->CCR3;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	333c      	adds	r3, #60	@ 0x3c
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e005      	b.n	8000ed6 <TIM_writePWM+0x6e>
    } else if (channel == 4) {
 8000eca:	7afb      	ldrb	r3, [r7, #11]
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d102      	bne.n	8000ed6 <TIM_writePWM+0x6e>
    	CCRX = &TIMX->CCR4;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3340      	adds	r3, #64	@ 0x40
 8000ed4:	617b      	str	r3, [r7, #20]
    }
	*CCRX = (dutyCycle/100)*(TIMX->ARR);
 8000ed6:	490e      	ldr	r1, [pc, #56]	@ (8000f10 <TIM_writePWM+0xa8>)
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff faf9 	bl	80004d0 <__aeabi_fdiv>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461c      	mov	r4, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff f9e6 	bl	80002b8 <__aeabi_ui2f>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f7ff fa39 	bl	8000368 <__aeabi_fmul>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fbfb 	bl	80006f4 <__aeabi_f2uiz>
 8000efe:	4602      	mov	r2, r0
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e000      	b.n	8000f08 <TIM_writePWM+0xa0>
		return;
 8000f06:	bf00      	nop
}
 8000f08:	371c      	adds	r7, #28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	42c80000 	.word	0x42c80000

08000f14 <__libc_init_array>:
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	2600      	movs	r6, #0
 8000f18:	4d0c      	ldr	r5, [pc, #48]	@ (8000f4c <__libc_init_array+0x38>)
 8000f1a:	4c0d      	ldr	r4, [pc, #52]	@ (8000f50 <__libc_init_array+0x3c>)
 8000f1c:	1b64      	subs	r4, r4, r5
 8000f1e:	10a4      	asrs	r4, r4, #2
 8000f20:	42a6      	cmp	r6, r4
 8000f22:	d109      	bne.n	8000f38 <__libc_init_array+0x24>
 8000f24:	f000 f81a 	bl	8000f5c <_init>
 8000f28:	2600      	movs	r6, #0
 8000f2a:	4d0a      	ldr	r5, [pc, #40]	@ (8000f54 <__libc_init_array+0x40>)
 8000f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f58 <__libc_init_array+0x44>)
 8000f2e:	1b64      	subs	r4, r4, r5
 8000f30:	10a4      	asrs	r4, r4, #2
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d105      	bne.n	8000f42 <__libc_init_array+0x2e>
 8000f36:	bd70      	pop	{r4, r5, r6, pc}
 8000f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f3c:	4798      	blx	r3
 8000f3e:	3601      	adds	r6, #1
 8000f40:	e7ee      	b.n	8000f20 <__libc_init_array+0xc>
 8000f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f46:	4798      	blx	r3
 8000f48:	3601      	adds	r6, #1
 8000f4a:	e7f2      	b.n	8000f32 <__libc_init_array+0x1e>
 8000f4c:	08000f74 	.word	0x08000f74
 8000f50:	08000f74 	.word	0x08000f74
 8000f54:	08000f74 	.word	0x08000f74
 8000f58:	08000f78 	.word	0x08000f78

08000f5c <_init>:
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	bf00      	nop
 8000f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f62:	bc08      	pop	{r3}
 8000f64:	469e      	mov	lr, r3
 8000f66:	4770      	bx	lr

08000f68 <_fini>:
 8000f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6a:	bf00      	nop
 8000f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6e:	bc08      	pop	{r3}
 8000f70:	469e      	mov	lr, r3
 8000f72:	4770      	bx	lr
