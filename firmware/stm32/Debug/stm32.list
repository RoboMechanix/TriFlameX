
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08000fa4  08000fa4  00001fa4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010a8  080010a8  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080010a8  080010a8  00003054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080010a8  080010a8  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010a8  080010a8  000020a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010ac  080010ac  000020ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080010b0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000058  08001104  00003058  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08001104  000031f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002181  00000000  00000000  0000307d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b10  00000000  00000000  000051fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b8  00000000  00000000  00005d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001f0  00000000  00000000  00005fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166ba  00000000  00000000  000061b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004562  00000000  00000000  0001c872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f1c5  00000000  00000000  00020dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ff99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b48  00000000  00000000  0009ffdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000a0b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08000f8c 	.word	0x08000f8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08000f8c 	.word	0x08000f8c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
char y =0;
uint16_t distance;



int main(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= 0xFFFFF;
 800064e:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <main+0x70>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a19      	ldr	r2, [pc, #100]	@ (80006b8 <main+0x70>)
 8000654:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000658:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800065c:	6193      	str	r3, [r2, #24]
	GPIOB -> CRH = 0x44442244;
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <main+0x74>)
 8000660:	4a17      	ldr	r2, [pc, #92]	@ (80006c0 <main+0x78>)
 8000662:	605a      	str	r2, [r3, #4]
	GPIOA -> CRL = 0x24444444;
 8000664:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <main+0x7c>)
 8000666:	4a18      	ldr	r2, [pc, #96]	@ (80006c8 <main+0x80>)
 8000668:	601a      	str	r2, [r3, #0]
	//turnON(0);

	UART_init(1,BAUDRATE);
 800066a:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fa96 	bl	8000ba0 <UART_init>
	while (1) {
		UARTMessage msg;
		do {
		    msg = UART_receive_message(1);
 8000674:	463b      	mov	r3, r7
 8000676:	2101      	movs	r1, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fb53 	bl	8000d24 <UART_receive_message>
		} while (msg.type == MSG_NONE);
 800067e:	783b      	ldrb	r3, [r7, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f7      	beq.n	8000674 <main+0x2c>

		    switch (msg.type) {
 8000684:	783b      	ldrb	r3, [r7, #0]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d113      	bne.n	80006b2 <main+0x6a>
		        case MSG_COMMAND_DISTANCE:
		        if (msg.command == 1) {
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d106      	bne.n	800069e <main+0x56>
		        	                // GO
		         turnON(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f000 f81d 	bl	80006d0 <turnON>
		         turnOFF(0);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f836 	bl	8000708 <turnOFF>
 800069c:	e005      	b.n	80006aa <main+0x62>
		        } else {
		        	                // STOP
		        turnON(0);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f816 	bl	80006d0 <turnON>
		        turnOFF(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 f82f 	bl	8000708 <turnOFF>
		        }

		        distance = msg.distance;
 80006aa:	887a      	ldrh	r2, [r7, #2]
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <main+0x84>)
 80006ae:	801a      	strh	r2, [r3, #0]
		            break;
 80006b0:	e000      	b.n	80006b4 <main+0x6c>
		        default:
		            break;
 80006b2:	bf00      	nop
	while (1) {
 80006b4:	e7de      	b.n	8000674 <main+0x2c>
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	44442244 	.word	0x44442244
 80006c4:	40010800 	.word	0x40010800
 80006c8:	24444444 	.word	0x24444444
 80006cc:	20000074 	.word	0x20000074

080006d0 <turnON>:

	}

}

void turnON(char i){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]

	switch (i){
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <turnON+0x16>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d005      	beq.n	80006f0 <turnON+0x20>
	case 0 : GPIOB ->ODR = (1<<10); return;
	case 1 : GPIOB ->ODR = (1<<11); return;
	default : return;
 80006e4:	e009      	b.n	80006fa <turnON+0x2a>
	case 0 : GPIOB ->ODR = (1<<10); return;
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <turnON+0x34>)
 80006e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	e004      	b.n	80006fa <turnON+0x2a>
	case 1 : GPIOB ->ODR = (1<<11); return;
 80006f0:	4b04      	ldr	r3, [pc, #16]	@ (8000704 <turnON+0x34>)
 80006f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	bf00      	nop
	}
}
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40010c00 	.word	0x40010c00

08000708 <turnOFF>:

void turnOFF(char i){
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]

	switch (i){
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <turnOFF+0x16>
 8000718:	2b01      	cmp	r3, #1
 800071a:	d005      	beq.n	8000728 <turnOFF+0x20>
	case 0 : GPIOB ->ODR = ~(1<<10); return;
	case 1 : GPIOB ->ODR = ~(1<<11); return;
	default : return;
 800071c:	e009      	b.n	8000732 <turnOFF+0x2a>
	case 0 : GPIOB ->ODR = ~(1<<10); return;
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <turnOFF+0x34>)
 8000720:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	e004      	b.n	8000732 <turnOFF+0x2a>
	case 1 : GPIOB ->ODR = ~(1<<11); return;
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <turnOFF+0x34>)
 800072a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	bf00      	nop
	}
}
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40010c00 	.word	0x40010c00

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <NMI_Handler+0x4>

08000748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <MemManage_Handler+0x4>

08000758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <UsageFault_Handler+0x4>

08000768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f82e 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a4:	f7ff fff8 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007aa:	490c      	ldr	r1, [pc, #48]	@ (80007dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007ac:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007c0:	4c09      	ldr	r4, [pc, #36]	@ (80007e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ce:	f000 fbb9 	bl	8000f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d2:	f7ff ff39 	bl	8000648 <main>
  bx lr
 80007d6:	4770      	bx	lr
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80007e0:	080010b0 	.word	0x080010b0
  ldr r2, =_sbss
 80007e4:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80007e8:	200001f4 	.word	0x200001f4

080007ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_2_IRQHandler>
	...

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b05      	ldr	r3, [pc, #20]	@ (800080c <HAL_IncTick+0x1c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <HAL_IncTick+0x20>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a03      	ldr	r2, [pc, #12]	@ (8000810 <HAL_IncTick+0x20>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000000 	.word	0x20000000
 8000810:	20000078 	.word	0x20000078

08000814 <GPIO_pinMode>:
#include "GPIO_interface.h"

void GPIO_pinMode(GPIO_TypeDef *GPIOX, uint8_t pinNumber, GPIO_MODE mode){
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
 8000820:	4613      	mov	r3, r2
 8000822:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b0f      	cmp	r3, #15
 8000828:	f200 8099 	bhi.w	800095e <GPIO_pinMode+0x14a>
		return;
	}
	// Initialize the clock of port x
    if (GPIOX == GPIOA) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a4e      	ldr	r2, [pc, #312]	@ (8000968 <GPIO_pinMode+0x154>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <GPIO_pinMode+0x2e>
		SET_BIT(RCC->APB2ENR, 2);
 8000834:	4b4d      	ldr	r3, [pc, #308]	@ (800096c <GPIO_pinMode+0x158>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a4c      	ldr	r2, [pc, #304]	@ (800096c <GPIO_pinMode+0x158>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	e014      	b.n	800086c <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOB) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a4a      	ldr	r2, [pc, #296]	@ (8000970 <GPIO_pinMode+0x15c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d106      	bne.n	8000858 <GPIO_pinMode+0x44>
		SET_BIT(RCC->APB2ENR, 3);
 800084a:	4b48      	ldr	r3, [pc, #288]	@ (800096c <GPIO_pinMode+0x158>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a47      	ldr	r2, [pc, #284]	@ (800096c <GPIO_pinMode+0x158>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	e009      	b.n	800086c <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOC) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a46      	ldr	r2, [pc, #280]	@ (8000974 <GPIO_pinMode+0x160>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d105      	bne.n	800086c <GPIO_pinMode+0x58>
		SET_BIT(RCC->APB2ENR, 4);
 8000860:	4b42      	ldr	r3, [pc, #264]	@ (800096c <GPIO_pinMode+0x158>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a41      	ldr	r2, [pc, #260]	@ (800096c <GPIO_pinMode+0x158>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6193      	str	r3, [r2, #24]
    }
	volatile uint8_t pinIndex = pinNumber % 8;
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	b2db      	uxtb	r3, r3
 8000874:	72fb      	strb	r3, [r7, #11]

	volatile uint32_t *CRX;
	if (pinNumber < 8 && pinNumber >= 0){
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	2b07      	cmp	r3, #7
 800087a:	d802      	bhi.n	8000882 <GPIO_pinMode+0x6e>
		CRX = &GPIOX->CRL;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e008      	b.n	8000894 <GPIO_pinMode+0x80>
	}else if(pinNumber >= 8 && pinNumber < 16){
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	2b07      	cmp	r3, #7
 8000886:	d905      	bls.n	8000894 <GPIO_pinMode+0x80>
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	2b0f      	cmp	r3, #15
 800088c:	d802      	bhi.n	8000894 <GPIO_pinMode+0x80>
		CRX = &GPIOX->CRH;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3304      	adds	r3, #4
 8000892:	60fb      	str	r3, [r7, #12]
	}
	// Zero the CRX register's specific pin mode not the whole register
	*CRX &= ~(0xF << (4*(pinIndex)));
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	220f      	movs	r2, #15
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	43da      	mvns	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	401a      	ands	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	601a      	str	r2, [r3, #0]
	if (mode == OUTPUT){
 80008ac:	78bb      	ldrb	r3, [r7, #2]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d10a      	bne.n	80008c8 <GPIO_pinMode+0xb4>
		*CRX |= (0x2 << (4*(pinIndex)));
 80008b2:	7afb      	ldrb	r3, [r7, #11]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	2202      	movs	r2, #2
 80008ba:	409a      	lsls	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	431a      	orrs	r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e04b      	b.n	8000960 <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_FLOAT){
 80008c8:	78bb      	ldrb	r3, [r7, #2]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d10a      	bne.n	80008e4 <GPIO_pinMode+0xd0>
		*CRX |= (0x4 << (4*(pinIndex)));
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	2204      	movs	r2, #4
 80008d6:	409a      	lsls	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	431a      	orrs	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	e03d      	b.n	8000960 <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_PULLUP){
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d113      	bne.n	8000912 <GPIO_pinMode+0xfe>
		*CRX |= (0x8 << (4*(pinIndex)));
 80008ea:	7afb      	ldrb	r3, [r7, #11]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	2208      	movs	r2, #8
 80008f2:	409a      	lsls	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	431a      	orrs	r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	601a      	str	r2, [r3, #0]
		SET_BIT(GPIOX->ODR, pinNumber);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	78fa      	ldrb	r2, [r7, #3]
 8000904:	2101      	movs	r1, #1
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	431a      	orrs	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	e026      	b.n	8000960 <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_PULLDOWN){
 8000912:	78bb      	ldrb	r3, [r7, #2]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d114      	bne.n	8000942 <GPIO_pinMode+0x12e>
		*CRX |= (0x8 << (4*(pinIndex)));
 8000918:	7afb      	ldrb	r3, [r7, #11]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	2208      	movs	r2, #8
 8000920:	409a      	lsls	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	431a      	orrs	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	78fa      	ldrb	r2, [r7, #3]
 8000932:	2101      	movs	r1, #1
 8000934:	fa01 f202 	lsl.w	r2, r1, r2
 8000938:	43d2      	mvns	r2, r2
 800093a:	401a      	ands	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	e00e      	b.n	8000960 <GPIO_pinMode+0x14c>
	}else if (mode == AF_PP){
 8000942:	78bb      	ldrb	r3, [r7, #2]
 8000944:	2b04      	cmp	r3, #4
 8000946:	d10b      	bne.n	8000960 <GPIO_pinMode+0x14c>
		*CRX |= (0xB << (4*(pinIndex)));
 8000948:	7afb      	ldrb	r3, [r7, #11]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	220b      	movs	r2, #11
 8000950:	409a      	lsls	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	431a      	orrs	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	e000      	b.n	8000960 <GPIO_pinMode+0x14c>
		return;
 800095e:	bf00      	nop

	}
}
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40010800 	.word	0x40010800
 800096c:	40021000 	.word	0x40021000
 8000970:	40010c00 	.word	0x40010c00
 8000974:	40011000 	.word	0x40011000

08000978 <TIM2_IRQHandler>:
		millis = 0;
	}
	return millis;
}

void TIM2_IRQHandler() {
 8000978:	b598      	push	{r3, r4, r7, lr}
 800097a:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC1IF) {
 800097c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b00      	cmp	r3, #0
 8000988:	d01a      	beq.n	80009c0 <TIM2_IRQHandler+0x48>
		TIM2->SR &= ~TIM_SR_CC1IF;
 800098a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800098e:	691b      	ldr	r3, [r3, #16]
 8000990:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000994:	f023 0302 	bic.w	r3, r3, #2
 8000998:	6113      	str	r3, [r2, #16]
		TIM2->CCR1 = TIM2->CNT + trigTime_ms_global;
 800099a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800099e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <TIM2_IRQHandler+0xa0>)
 80009a2:	8812      	ldrh	r2, [r2, #0]
 80009a4:	4614      	mov	r4, r2
 80009a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009aa:	4423      	add	r3, r4
 80009ac:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <TIM2_IRQHandler+0xa4>)
 80009b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b4:	1c50      	adds	r0, r2, #1
 80009b6:	f143 0100 	adc.w	r1, r3, #0
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <TIM2_IRQHandler+0xa4>)
 80009bc:	e9c3 0100 	strd	r0, r1, [r3]
//		if (isFirstTime) {
//			isFirstTime = 0;
//			millis = 0;
//		}
	}
	if ((TIM2->SR & (1 << 0)) == 1) { // check the uif flag
 80009c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d122      	bne.n	8000a14 <TIM2_IRQHandler+0x9c>
		TIM2->SR &= ~(1 << 0); // clear the uif
 80009ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009d2:	691b      	ldr	r3, [r3, #16]
 80009d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d8:	f023 0301 	bic.w	r3, r3, #1
 80009dc:	6113      	str	r3, [r2, #16]
		counter2++;
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <TIM2_IRQHandler+0xa8>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	3301      	adds	r3, #1
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <TIM2_IRQHandler+0xa8>)
 80009ea:	801a      	strh	r2, [r3, #0]
		if (counter2 == n2) {
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <TIM2_IRQHandler+0xa8>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <TIM2_IRQHandler+0xac>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d10b      	bne.n	8000a14 <TIM2_IRQHandler+0x9c>
			counter2 = 0;
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <TIM2_IRQHandler+0xa8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	801a      	strh	r2, [r3, #0]
			TIM2->CNT = preload2; // set the preload
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <TIM2_IRQHandler+0xb0>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a0c:	625a      	str	r2, [r3, #36]	@ 0x24
			callback2();
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <TIM2_IRQHandler+0xb4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4798      	blx	r3
		}
	}
}
 8000a14:	bf00      	nop
 8000a16:	bd98      	pop	{r3, r4, r7, pc}
 8000a18:	200000a8 	.word	0x200000a8
 8000a1c:	200000a0 	.word	0x200000a0
 8000a20:	20000088 	.word	0x20000088
 8000a24:	20000082 	.word	0x20000082
 8000a28:	2000007c 	.word	0x2000007c
 8000a2c:	20000090 	.word	0x20000090

08000a30 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 8000a30:	b598      	push	{r3, r4, r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	if ((TIM3->SR & (1 << 0)) == 1) { // check the uif flag
 8000a34:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <TIM3_IRQHandler+0x9c>)
 8000a36:	691b      	ldr	r3, [r3, #16]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d142      	bne.n	8000ac6 <TIM3_IRQHandler+0x96>
		if (TIM3->SR & TIM_SR_CC1IF) {
 8000a40:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <TIM3_IRQHandler+0x9c>)
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d016      	beq.n	8000a7a <TIM3_IRQHandler+0x4a>
			TIM3->SR &= ~TIM_SR_CC1IF;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <TIM3_IRQHandler+0x9c>)
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	4a1e      	ldr	r2, [pc, #120]	@ (8000acc <TIM3_IRQHandler+0x9c>)
 8000a52:	f023 0302 	bic.w	r3, r3, #2
 8000a56:	6113      	str	r3, [r2, #16]
			TIM3->CCR1 = TIM3->CNT + trigTime_ms_global;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <TIM3_IRQHandler+0x9c>)
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad0 <TIM3_IRQHandler+0xa0>)
 8000a5e:	8812      	ldrh	r2, [r2, #0]
 8000a60:	4614      	mov	r4, r2
 8000a62:	4a1a      	ldr	r2, [pc, #104]	@ (8000acc <TIM3_IRQHandler+0x9c>)
 8000a64:	4423      	add	r3, r4
 8000a66:	6353      	str	r3, [r2, #52]	@ 0x34
			millis++;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <TIM3_IRQHandler+0xa4>)
 8000a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a6e:	1c50      	adds	r0, r2, #1
 8000a70:	f143 0100 	adc.w	r1, r3, #0
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <TIM3_IRQHandler+0xa4>)
 8000a76:	e9c3 0100 	strd	r0, r1, [r3]
//			if (isFirstTime) {
//				isFirstTime = 0;
//				millis = 0;
//			}
		}
		if ((TIM3->SR & (1 << 0)) == 1) {
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <TIM3_IRQHandler+0x9c>)
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d11f      	bne.n	8000ac6 <TIM3_IRQHandler+0x96>
			TIM3->SR &= ~(1 << 0); // clear the uif
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <TIM3_IRQHandler+0x9c>)
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	4a10      	ldr	r2, [pc, #64]	@ (8000acc <TIM3_IRQHandler+0x9c>)
 8000a8c:	f023 0301 	bic.w	r3, r3, #1
 8000a90:	6113      	str	r3, [r2, #16]
			counter3++;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <TIM3_IRQHandler+0xa8>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <TIM3_IRQHandler+0xa8>)
 8000a9e:	801a      	strh	r2, [r3, #0]
			if (counter3 == n3) {
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <TIM3_IRQHandler+0xa8>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <TIM3_IRQHandler+0xac>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d10a      	bne.n	8000ac6 <TIM3_IRQHandler+0x96>
				counter3 = 0;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <TIM3_IRQHandler+0xa8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	801a      	strh	r2, [r3, #0]
				TIM3->CNT = preload3; // set the preload
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <TIM3_IRQHandler+0xb0>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	4b03      	ldr	r3, [pc, #12]	@ (8000acc <TIM3_IRQHandler+0x9c>)
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
				callback3();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <TIM3_IRQHandler+0xb4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4798      	blx	r3
			}
		}
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	bd98      	pop	{r3, r4, r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40000400 	.word	0x40000400
 8000ad0:	200000a8 	.word	0x200000a8
 8000ad4:	200000a0 	.word	0x200000a0
 8000ad8:	2000008a 	.word	0x2000008a
 8000adc:	20000084 	.word	0x20000084
 8000ae0:	2000007e 	.word	0x2000007e
 8000ae4:	20000094 	.word	0x20000094

08000ae8 <TIM4_IRQHandler>:

void TIM4_IRQHandler() {
 8000ae8:	b598      	push	{r3, r4, r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	if ((TIM4->SR & (1 << 0)) == 1) { // check the uif flag
 8000aec:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <TIM4_IRQHandler+0x9c>)
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d142      	bne.n	8000b7e <TIM4_IRQHandler+0x96>
		if (TIM4->SR & TIM_SR_CC1IF) {
 8000af8:	4b22      	ldr	r3, [pc, #136]	@ (8000b84 <TIM4_IRQHandler+0x9c>)
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d016      	beq.n	8000b32 <TIM4_IRQHandler+0x4a>
			TIM4->SR &= ~TIM_SR_CC1IF;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <TIM4_IRQHandler+0x9c>)
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	4a1e      	ldr	r2, [pc, #120]	@ (8000b84 <TIM4_IRQHandler+0x9c>)
 8000b0a:	f023 0302 	bic.w	r3, r3, #2
 8000b0e:	6113      	str	r3, [r2, #16]
			TIM4->CCR1 = TIM4->CNT + trigTime_ms_global;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <TIM4_IRQHandler+0x9c>)
 8000b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b14:	4a1c      	ldr	r2, [pc, #112]	@ (8000b88 <TIM4_IRQHandler+0xa0>)
 8000b16:	8812      	ldrh	r2, [r2, #0]
 8000b18:	4614      	mov	r4, r2
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <TIM4_IRQHandler+0x9c>)
 8000b1c:	4423      	add	r3, r4
 8000b1e:	6353      	str	r3, [r2, #52]	@ 0x34
			millis++;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <TIM4_IRQHandler+0xa4>)
 8000b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b26:	1c50      	adds	r0, r2, #1
 8000b28:	f143 0100 	adc.w	r1, r3, #0
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <TIM4_IRQHandler+0xa4>)
 8000b2e:	e9c3 0100 	strd	r0, r1, [r3]
//			if (isFirstTime) {
//				isFirstTime = 0;
//				millis = 0;
//			}
		}
		if ((TIM4->SR & (1 << 0)) == 1) {
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <TIM4_IRQHandler+0x9c>)
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d11f      	bne.n	8000b7e <TIM4_IRQHandler+0x96>
			TIM4->SR &= ~(1 << 0); // clear the uif
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <TIM4_IRQHandler+0x9c>)
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	4a10      	ldr	r2, [pc, #64]	@ (8000b84 <TIM4_IRQHandler+0x9c>)
 8000b44:	f023 0301 	bic.w	r3, r3, #1
 8000b48:	6113      	str	r3, [r2, #16]
			counter4++;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <TIM4_IRQHandler+0xa8>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	3301      	adds	r3, #1
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <TIM4_IRQHandler+0xa8>)
 8000b56:	801a      	strh	r2, [r3, #0]
			if (counter4 == n4) {
 8000b58:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <TIM4_IRQHandler+0xa8>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <TIM4_IRQHandler+0xac>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d10a      	bne.n	8000b7e <TIM4_IRQHandler+0x96>
				counter4 = 0;
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <TIM4_IRQHandler+0xa8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	801a      	strh	r2, [r3, #0]
				TIM4->CNT = preload4; // set the preload
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <TIM4_IRQHandler+0xb0>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	4b03      	ldr	r3, [pc, #12]	@ (8000b84 <TIM4_IRQHandler+0x9c>)
 8000b76:	625a      	str	r2, [r3, #36]	@ 0x24
				callback4();
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <TIM4_IRQHandler+0xb4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4798      	blx	r3
			}
		}
	}
}
 8000b7e:	bf00      	nop
 8000b80:	bd98      	pop	{r3, r4, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40000800 	.word	0x40000800
 8000b88:	200000a8 	.word	0x200000a8
 8000b8c:	200000a0 	.word	0x200000a0
 8000b90:	2000008c 	.word	0x2000008c
 8000b94:	20000086 	.word	0x20000086
 8000b98:	20000080 	.word	0x20000080
 8000b9c:	20000098 	.word	0x20000098

08000ba0 <UART_init>:
#include "../GPIO/GPIO_interface.h"

#define RX_BUFFER_LEN 64

void UART_init(int UART_pref_num, int baudrate)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
    USART_TypeDef *USARTx;
    uint32_t pclk = 8000000; // 8 MHz clock
 8000baa:	4b57      	ldr	r3, [pc, #348]	@ (8000d08 <UART_init+0x168>)
 8000bac:	613b      	str	r3, [r7, #16]
    //uint32_t brr_value; //unused var

    switch (UART_pref_num)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d03c      	beq.n	8000c2e <UART_init+0x8e>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	f300 80a2 	bgt.w	8000d00 <UART_init+0x160>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d003      	beq.n	8000bca <UART_init+0x2a>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d019      	beq.n	8000bfc <UART_init+0x5c>
        GPIO_pinMode(GPIOB, 11, INPUT_FLOAT); // RX
        USARTx = USART3;
        break;

    default:
        return;
 8000bc8:	e09a      	b.n	8000d00 <UART_init+0x160>
        SET_BIT(RCC->APB2ENR, 14);            // USART1
 8000bca:	4b50      	ldr	r3, [pc, #320]	@ (8000d0c <UART_init+0x16c>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	4a4f      	ldr	r2, [pc, #316]	@ (8000d0c <UART_init+0x16c>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd4:	6193      	str	r3, [r2, #24]
        SET_BIT(RCC->APB2ENR, 2);             // GPIOA
 8000bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8000d0c <UART_init+0x16c>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a4c      	ldr	r2, [pc, #304]	@ (8000d0c <UART_init+0x16c>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6193      	str	r3, [r2, #24]
        GPIO_pinMode(GPIOA, 9, AF_PP);        // TX
 8000be2:	2204      	movs	r2, #4
 8000be4:	2109      	movs	r1, #9
 8000be6:	484a      	ldr	r0, [pc, #296]	@ (8000d10 <UART_init+0x170>)
 8000be8:	f7ff fe14 	bl	8000814 <GPIO_pinMode>
        GPIO_pinMode(GPIOA, 10, INPUT_FLOAT); // RX
 8000bec:	2202      	movs	r2, #2
 8000bee:	210a      	movs	r1, #10
 8000bf0:	4847      	ldr	r0, [pc, #284]	@ (8000d10 <UART_init+0x170>)
 8000bf2:	f7ff fe0f 	bl	8000814 <GPIO_pinMode>
        USARTx = USART1;
 8000bf6:	4b47      	ldr	r3, [pc, #284]	@ (8000d14 <UART_init+0x174>)
 8000bf8:	617b      	str	r3, [r7, #20]
        break;
 8000bfa:	e031      	b.n	8000c60 <UART_init+0xc0>
        SET_BIT(RCC->APB1ENR, 17);           // USART2
 8000bfc:	4b43      	ldr	r3, [pc, #268]	@ (8000d0c <UART_init+0x16c>)
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	4a42      	ldr	r2, [pc, #264]	@ (8000d0c <UART_init+0x16c>)
 8000c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c06:	61d3      	str	r3, [r2, #28]
        SET_BIT(RCC->APB2ENR, 2);            // GPIOA
 8000c08:	4b40      	ldr	r3, [pc, #256]	@ (8000d0c <UART_init+0x16c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8000d0c <UART_init+0x16c>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
        GPIO_pinMode(GPIOA, 2, AF_PP);       // TX
 8000c14:	2204      	movs	r2, #4
 8000c16:	2102      	movs	r1, #2
 8000c18:	483d      	ldr	r0, [pc, #244]	@ (8000d10 <UART_init+0x170>)
 8000c1a:	f7ff fdfb 	bl	8000814 <GPIO_pinMode>
        GPIO_pinMode(GPIOA, 3, INPUT_FLOAT); // RX
 8000c1e:	2202      	movs	r2, #2
 8000c20:	2103      	movs	r1, #3
 8000c22:	483b      	ldr	r0, [pc, #236]	@ (8000d10 <UART_init+0x170>)
 8000c24:	f7ff fdf6 	bl	8000814 <GPIO_pinMode>
        USARTx = USART2;
 8000c28:	4b3b      	ldr	r3, [pc, #236]	@ (8000d18 <UART_init+0x178>)
 8000c2a:	617b      	str	r3, [r7, #20]
        break;
 8000c2c:	e018      	b.n	8000c60 <UART_init+0xc0>
        SET_BIT(RCC->APB1ENR, 18);            // USART3
 8000c2e:	4b37      	ldr	r3, [pc, #220]	@ (8000d0c <UART_init+0x16c>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	4a36      	ldr	r2, [pc, #216]	@ (8000d0c <UART_init+0x16c>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c38:	61d3      	str	r3, [r2, #28]
        SET_BIT(RCC->APB2ENR, 3);             // GPIOB
 8000c3a:	4b34      	ldr	r3, [pc, #208]	@ (8000d0c <UART_init+0x16c>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a33      	ldr	r2, [pc, #204]	@ (8000d0c <UART_init+0x16c>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6193      	str	r3, [r2, #24]
        GPIO_pinMode(GPIOB, 10, AF_PP);       // TX
 8000c46:	2204      	movs	r2, #4
 8000c48:	210a      	movs	r1, #10
 8000c4a:	4834      	ldr	r0, [pc, #208]	@ (8000d1c <UART_init+0x17c>)
 8000c4c:	f7ff fde2 	bl	8000814 <GPIO_pinMode>
        GPIO_pinMode(GPIOB, 11, INPUT_FLOAT); // RX
 8000c50:	2202      	movs	r2, #2
 8000c52:	210b      	movs	r1, #11
 8000c54:	4831      	ldr	r0, [pc, #196]	@ (8000d1c <UART_init+0x17c>)
 8000c56:	f7ff fddd 	bl	8000814 <GPIO_pinMode>
        USARTx = USART3;
 8000c5a:	4b31      	ldr	r3, [pc, #196]	@ (8000d20 <UART_init+0x180>)
 8000c5c:	617b      	str	r3, [r7, #20]
        break;
 8000c5e:	bf00      	nop
    }

    // Baud Rate Calculation for 8 MHz clock
    float usartdiv = (float)pclk / (16.0f * baudrate);
 8000c60:	6938      	ldr	r0, [r7, #16]
 8000c62:	f7ff fb29 	bl	80002b8 <__aeabi_ui2f>
 8000c66:	4604      	mov	r4, r0
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f7ff fb29 	bl	80002c0 <__aeabi_i2f>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fb77 	bl	8000368 <__aeabi_fmul>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f7ff fc26 	bl	80004d0 <__aeabi_fdiv>
 8000c84:	4603      	mov	r3, r0
 8000c86:	60fb      	str	r3, [r7, #12]
    uint16_t mantissa = (uint16_t)usartdiv;
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f7ff fcbd 	bl	8000608 <__aeabi_f2uiz>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	817b      	strh	r3, [r7, #10]
    uint16_t fraction = (uint16_t)((usartdiv - mantissa) * 16.0f + 0.5f); // rounded
 8000c92:	897b      	ldrh	r3, [r7, #10]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fb13 	bl	80002c0 <__aeabi_i2f>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff fa58 	bl	8000154 <__aeabi_fsub>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fb5c 	bl	8000368 <__aeabi_fmul>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fa4e 	bl	8000158 <__addsf3>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fca2 	bl	8000608 <__aeabi_f2uiz>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	813b      	strh	r3, [r7, #8]

    USARTx->BRR = (mantissa << 4) | (fraction & 0xF);
 8000cc8:	897b      	ldrh	r3, [r7, #10]
 8000cca:	011a      	lsls	r2, r3, #4
 8000ccc:	893b      	ldrh	r3, [r7, #8]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	609a      	str	r2, [r3, #8]

    // Enable USART, TX, RX
    SET_BIT(USARTx->CR1, 13); // UE
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	60da      	str	r2, [r3, #12]
    SET_BIT(USARTx->CR1, 3);  // TE
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	f043 0208 	orr.w	r2, r3, #8
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	60da      	str	r2, [r3, #12]
    SET_BIT(USARTx->CR1, 2);  // RE
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	f043 0204 	orr.w	r2, r3, #4
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	e000      	b.n	8000d02 <UART_init+0x162>
        return;
 8000d00:	bf00      	nop
}
 8000d02:	371c      	adds	r7, #28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	007a1200 	.word	0x007a1200
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	40013800 	.word	0x40013800
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	40004800 	.word	0x40004800

08000d24 <UART_receive_message>:
    while (!(USARTx->SR & (1 << 5)));

    return USARTx->DR & 0xFF;
}

UARTMessage UART_receive_message(int UART_pref_num) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	@ 0x40
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    static char rx_buffer[16];
    static uint8_t rx_index = 0;

    USART_TypeDef *USARTx;

    switch (UART_pref_num) {
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d00f      	beq.n	8000d54 <UART_receive_message+0x30>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	dc0f      	bgt.n	8000d5a <UART_receive_message+0x36>
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d003      	beq.n	8000d48 <UART_receive_message+0x24>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d003      	beq.n	8000d4e <UART_receive_message+0x2a>
 8000d46:	e008      	b.n	8000d5a <UART_receive_message+0x36>
        case 1: USARTx = USART1; break;
 8000d48:	4b32      	ldr	r3, [pc, #200]	@ (8000e14 <UART_receive_message+0xf0>)
 8000d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d4c:	e00b      	b.n	8000d66 <UART_receive_message+0x42>
        case 2: USARTx = USART2; break;
 8000d4e:	4b32      	ldr	r3, [pc, #200]	@ (8000e18 <UART_receive_message+0xf4>)
 8000d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d52:	e008      	b.n	8000d66 <UART_receive_message+0x42>
        case 3: USARTx = USART3; break;
 8000d54:	4b31      	ldr	r3, [pc, #196]	@ (8000e1c <UART_receive_message+0xf8>)
 8000d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d58:	e005      	b.n	8000d66 <UART_receive_message+0x42>
        default: return (UARTMessage){ .type = MSG_NONE };
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2300      	movs	r3, #0
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	6053      	str	r3, [r2, #4]
    } else {
        rx_index = 0;
    }

    return (UARTMessage){ .type = MSG_NONE };
}
 8000d64:	e051      	b.n	8000e0a <UART_receive_message+0xe6>
    if (!(USARTx->SR & USART_SR_RXNE)) return (UARTMessage){ .type = MSG_NONE };
 8000d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0320 	and.w	r3, r3, #32
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d105      	bne.n	8000d7e <UART_receive_message+0x5a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	461a      	mov	r2, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	6053      	str	r3, [r2, #4]
 8000d7c:	e045      	b.n	8000e0a <UART_receive_message+0xe6>
    char c = USARTx->DR & 0xFF;
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (c == '\n') {
 8000d86:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000d8a:	2b0a      	cmp	r3, #10
 8000d8c:	d125      	bne.n	8000dda <UART_receive_message+0xb6>
        rx_buffer[rx_index] = '\0';
 8000d8e:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <UART_receive_message+0xfc>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <UART_receive_message+0x100>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	5499      	strb	r1, [r3, r2]
        rx_index = 0;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <UART_receive_message+0xfc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
        int packed_value = atoi(rx_buffer);
 8000da0:	4820      	ldr	r0, [pc, #128]	@ (8000e24 <UART_receive_message+0x100>)
 8000da2:	f000 f841 	bl	8000e28 <atoi>
 8000da6:	6378      	str	r0, [r7, #52]	@ 0x34
        int command = (packed_value >> 15) & 0x01;
 8000da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000daa:	13db      	asrs	r3, r3, #15
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	633b      	str	r3, [r7, #48]	@ 0x30
        int distance = packed_value & 0x7FFF;
 8000db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        msg.type = MSG_COMMAND_DISTANCE;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	733b      	strb	r3, [r7, #12]
        msg.distance = distance;
 8000dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	81fb      	strh	r3, [r7, #14]
        msg.command = command;
 8000dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dc6:	613b      	str	r3, [r7, #16]
        return msg;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dd4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000dd8:	e017      	b.n	8000e0a <UART_receive_message+0xe6>
    } else if (rx_index < sizeof(rx_buffer) - 1) {
 8000dda:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <UART_receive_message+0xfc>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b0e      	cmp	r3, #14
 8000de0:	d80b      	bhi.n	8000dfa <UART_receive_message+0xd6>
        rx_buffer[rx_index++] = c;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <UART_receive_message+0xfc>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	b2d1      	uxtb	r1, r2
 8000dea:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <UART_receive_message+0xfc>)
 8000dec:	7011      	strb	r1, [r2, #0]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e24 <UART_receive_message+0x100>)
 8000df2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000df6:	5453      	strb	r3, [r2, r1]
 8000df8:	e002      	b.n	8000e00 <UART_receive_message+0xdc>
        rx_index = 0;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <UART_receive_message+0xfc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
    return (UARTMessage){ .type = MSG_NONE };
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	461a      	mov	r2, r3
 8000e04:	2300      	movs	r3, #0
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	6053      	str	r3, [r2, #4]
}
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	3740      	adds	r7, #64	@ 0x40
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40013800 	.word	0x40013800
 8000e18:	40004400 	.word	0x40004400
 8000e1c:	40004800 	.word	0x40004800
 8000e20:	200000aa 	.word	0x200000aa
 8000e24:	200000ac 	.word	0x200000ac

08000e28 <atoi>:
 8000e28:	220a      	movs	r2, #10
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f000 b87a 	b.w	8000f24 <strtol>

08000e30 <_strtol_l.isra.0>:
 8000e30:	2b24      	cmp	r3, #36	@ 0x24
 8000e32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e36:	4686      	mov	lr, r0
 8000e38:	4690      	mov	r8, r2
 8000e3a:	d801      	bhi.n	8000e40 <_strtol_l.isra.0+0x10>
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d106      	bne.n	8000e4e <_strtol_l.isra.0+0x1e>
 8000e40:	f000 f87a 	bl	8000f38 <__errno>
 8000e44:	2316      	movs	r3, #22
 8000e46:	6003      	str	r3, [r0, #0]
 8000e48:	2000      	movs	r0, #0
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	460d      	mov	r5, r1
 8000e50:	4833      	ldr	r0, [pc, #204]	@ (8000f20 <_strtol_l.isra.0+0xf0>)
 8000e52:	462a      	mov	r2, r5
 8000e54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000e58:	5d06      	ldrb	r6, [r0, r4]
 8000e5a:	f016 0608 	ands.w	r6, r6, #8
 8000e5e:	d1f8      	bne.n	8000e52 <_strtol_l.isra.0+0x22>
 8000e60:	2c2d      	cmp	r4, #45	@ 0x2d
 8000e62:	d110      	bne.n	8000e86 <_strtol_l.isra.0+0x56>
 8000e64:	2601      	movs	r6, #1
 8000e66:	782c      	ldrb	r4, [r5, #0]
 8000e68:	1c95      	adds	r5, r2, #2
 8000e6a:	f033 0210 	bics.w	r2, r3, #16
 8000e6e:	d115      	bne.n	8000e9c <_strtol_l.isra.0+0x6c>
 8000e70:	2c30      	cmp	r4, #48	@ 0x30
 8000e72:	d10d      	bne.n	8000e90 <_strtol_l.isra.0+0x60>
 8000e74:	782a      	ldrb	r2, [r5, #0]
 8000e76:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000e7a:	2a58      	cmp	r2, #88	@ 0x58
 8000e7c:	d108      	bne.n	8000e90 <_strtol_l.isra.0+0x60>
 8000e7e:	786c      	ldrb	r4, [r5, #1]
 8000e80:	3502      	adds	r5, #2
 8000e82:	2310      	movs	r3, #16
 8000e84:	e00a      	b.n	8000e9c <_strtol_l.isra.0+0x6c>
 8000e86:	2c2b      	cmp	r4, #43	@ 0x2b
 8000e88:	bf04      	itt	eq
 8000e8a:	782c      	ldrbeq	r4, [r5, #0]
 8000e8c:	1c95      	addeq	r5, r2, #2
 8000e8e:	e7ec      	b.n	8000e6a <_strtol_l.isra.0+0x3a>
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1f6      	bne.n	8000e82 <_strtol_l.isra.0+0x52>
 8000e94:	2c30      	cmp	r4, #48	@ 0x30
 8000e96:	bf14      	ite	ne
 8000e98:	230a      	movne	r3, #10
 8000e9a:	2308      	moveq	r3, #8
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000ea2:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8000ea6:	fbbc f9f3 	udiv	r9, ip, r3
 8000eaa:	4610      	mov	r0, r2
 8000eac:	fb03 ca19 	mls	sl, r3, r9, ip
 8000eb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000eb4:	2f09      	cmp	r7, #9
 8000eb6:	d80f      	bhi.n	8000ed8 <_strtol_l.isra.0+0xa8>
 8000eb8:	463c      	mov	r4, r7
 8000eba:	42a3      	cmp	r3, r4
 8000ebc:	dd1b      	ble.n	8000ef6 <_strtol_l.isra.0+0xc6>
 8000ebe:	1c57      	adds	r7, r2, #1
 8000ec0:	d007      	beq.n	8000ed2 <_strtol_l.isra.0+0xa2>
 8000ec2:	4581      	cmp	r9, r0
 8000ec4:	d314      	bcc.n	8000ef0 <_strtol_l.isra.0+0xc0>
 8000ec6:	d101      	bne.n	8000ecc <_strtol_l.isra.0+0x9c>
 8000ec8:	45a2      	cmp	sl, r4
 8000eca:	db11      	blt.n	8000ef0 <_strtol_l.isra.0+0xc0>
 8000ecc:	2201      	movs	r2, #1
 8000ece:	fb00 4003 	mla	r0, r0, r3, r4
 8000ed2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000ed6:	e7eb      	b.n	8000eb0 <_strtol_l.isra.0+0x80>
 8000ed8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000edc:	2f19      	cmp	r7, #25
 8000ede:	d801      	bhi.n	8000ee4 <_strtol_l.isra.0+0xb4>
 8000ee0:	3c37      	subs	r4, #55	@ 0x37
 8000ee2:	e7ea      	b.n	8000eba <_strtol_l.isra.0+0x8a>
 8000ee4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8000ee8:	2f19      	cmp	r7, #25
 8000eea:	d804      	bhi.n	8000ef6 <_strtol_l.isra.0+0xc6>
 8000eec:	3c57      	subs	r4, #87	@ 0x57
 8000eee:	e7e4      	b.n	8000eba <_strtol_l.isra.0+0x8a>
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ef4:	e7ed      	b.n	8000ed2 <_strtol_l.isra.0+0xa2>
 8000ef6:	1c53      	adds	r3, r2, #1
 8000ef8:	d108      	bne.n	8000f0c <_strtol_l.isra.0+0xdc>
 8000efa:	2322      	movs	r3, #34	@ 0x22
 8000efc:	4660      	mov	r0, ip
 8000efe:	f8ce 3000 	str.w	r3, [lr]
 8000f02:	f1b8 0f00 	cmp.w	r8, #0
 8000f06:	d0a0      	beq.n	8000e4a <_strtol_l.isra.0+0x1a>
 8000f08:	1e69      	subs	r1, r5, #1
 8000f0a:	e006      	b.n	8000f1a <_strtol_l.isra.0+0xea>
 8000f0c:	b106      	cbz	r6, 8000f10 <_strtol_l.isra.0+0xe0>
 8000f0e:	4240      	negs	r0, r0
 8000f10:	f1b8 0f00 	cmp.w	r8, #0
 8000f14:	d099      	beq.n	8000e4a <_strtol_l.isra.0+0x1a>
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	d1f6      	bne.n	8000f08 <_strtol_l.isra.0+0xd8>
 8000f1a:	f8c8 1000 	str.w	r1, [r8]
 8000f1e:	e794      	b.n	8000e4a <_strtol_l.isra.0+0x1a>
 8000f20:	08000fa5 	.word	0x08000fa5

08000f24 <strtol>:
 8000f24:	4613      	mov	r3, r2
 8000f26:	460a      	mov	r2, r1
 8000f28:	4601      	mov	r1, r0
 8000f2a:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <strtol+0x10>)
 8000f2c:	6800      	ldr	r0, [r0, #0]
 8000f2e:	f7ff bf7f 	b.w	8000e30 <_strtol_l.isra.0>
 8000f32:	bf00      	nop
 8000f34:	20000004 	.word	0x20000004

08000f38 <__errno>:
 8000f38:	4b01      	ldr	r3, [pc, #4]	@ (8000f40 <__errno+0x8>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000004 	.word	0x20000004

08000f44 <__libc_init_array>:
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	2600      	movs	r6, #0
 8000f48:	4d0c      	ldr	r5, [pc, #48]	@ (8000f7c <__libc_init_array+0x38>)
 8000f4a:	4c0d      	ldr	r4, [pc, #52]	@ (8000f80 <__libc_init_array+0x3c>)
 8000f4c:	1b64      	subs	r4, r4, r5
 8000f4e:	10a4      	asrs	r4, r4, #2
 8000f50:	42a6      	cmp	r6, r4
 8000f52:	d109      	bne.n	8000f68 <__libc_init_array+0x24>
 8000f54:	f000 f81a 	bl	8000f8c <_init>
 8000f58:	2600      	movs	r6, #0
 8000f5a:	4d0a      	ldr	r5, [pc, #40]	@ (8000f84 <__libc_init_array+0x40>)
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f88 <__libc_init_array+0x44>)
 8000f5e:	1b64      	subs	r4, r4, r5
 8000f60:	10a4      	asrs	r4, r4, #2
 8000f62:	42a6      	cmp	r6, r4
 8000f64:	d105      	bne.n	8000f72 <__libc_init_array+0x2e>
 8000f66:	bd70      	pop	{r4, r5, r6, pc}
 8000f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f6c:	4798      	blx	r3
 8000f6e:	3601      	adds	r6, #1
 8000f70:	e7ee      	b.n	8000f50 <__libc_init_array+0xc>
 8000f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f76:	4798      	blx	r3
 8000f78:	3601      	adds	r6, #1
 8000f7a:	e7f2      	b.n	8000f62 <__libc_init_array+0x1e>
 8000f7c:	080010a8 	.word	0x080010a8
 8000f80:	080010a8 	.word	0x080010a8
 8000f84:	080010a8 	.word	0x080010a8
 8000f88:	080010ac 	.word	0x080010ac

08000f8c <_init>:
 8000f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8e:	bf00      	nop
 8000f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f92:	bc08      	pop	{r3}
 8000f94:	469e      	mov	lr, r3
 8000f96:	4770      	bx	lr

08000f98 <_fini>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr
