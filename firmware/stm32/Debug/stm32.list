
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080051b0  080051b0  000061b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800556c  0800556c  000071d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800556c  0800556c  000071d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800556c  0800556c  000071d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800556c  0800556c  0000656c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005570  08005570  00006570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08005574  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d8  0800574c  000071d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800574c  00007448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033f2  00000000  00000000  00007201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f3a  00000000  00000000  0000a5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  0000b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c6  00000000  00000000  0000b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001762c  00000000  00000000  0000bbd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cf6  00000000  00000000  00023202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000815aa  00000000  00000000  00028ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa4a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002024  00000000  00000000  000aa4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000ac50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005198 	.word	0x08005198

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08005198 	.word	0x08005198

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	@ 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d4a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	@ 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	@ 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__gesf2>:
 8000f98:	f04f 3cff 	mov.w	ip, #4294967295
 8000f9c:	e006      	b.n	8000fac <__cmpsf2+0x4>
 8000f9e:	bf00      	nop

08000fa0 <__lesf2>:
 8000fa0:	f04f 0c01 	mov.w	ip, #1
 8000fa4:	e002      	b.n	8000fac <__cmpsf2+0x4>
 8000fa6:	bf00      	nop

08000fa8 <__cmpsf2>:
 8000fa8:	f04f 0c01 	mov.w	ip, #1
 8000fac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	bf18      	it	ne
 8000fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fc2:	d011      	beq.n	8000fe8 <__cmpsf2+0x40>
 8000fc4:	b001      	add	sp, #4
 8000fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fca:	bf18      	it	ne
 8000fcc:	ea90 0f01 	teqne	r0, r1
 8000fd0:	bf58      	it	pl
 8000fd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd6:	bf88      	it	hi
 8000fd8:	17c8      	asrhi	r0, r1, #31
 8000fda:	bf38      	it	cc
 8000fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fe0:	bf18      	it	ne
 8000fe2:	f040 0001 	orrne.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fec:	d102      	bne.n	8000ff4 <__cmpsf2+0x4c>
 8000fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ff2:	d105      	bne.n	8001000 <__cmpsf2+0x58>
 8000ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff8:	d1e4      	bne.n	8000fc4 <__cmpsf2+0x1c>
 8000ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffe:	d0e1      	beq.n	8000fc4 <__cmpsf2+0x1c>
 8001000:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_cfrcmple>:
 8001008:	4684      	mov	ip, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4661      	mov	r1, ip
 800100e:	e7ff      	b.n	8001010 <__aeabi_cfcmpeq>

08001010 <__aeabi_cfcmpeq>:
 8001010:	b50f      	push	{r0, r1, r2, r3, lr}
 8001012:	f7ff ffc9 	bl	8000fa8 <__cmpsf2>
 8001016:	2800      	cmp	r0, #0
 8001018:	bf48      	it	mi
 800101a:	f110 0f00 	cmnmi.w	r0, #0
 800101e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001020 <__aeabi_fcmpeq>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff fff4 	bl	8001010 <__aeabi_cfcmpeq>
 8001028:	bf0c      	ite	eq
 800102a:	2001      	moveq	r0, #1
 800102c:	2000      	movne	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmplt>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffea 	bl	8001010 <__aeabi_cfcmpeq>
 800103c:	bf34      	ite	cc
 800103e:	2001      	movcc	r0, #1
 8001040:	2000      	movcs	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmple>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffe0 	bl	8001010 <__aeabi_cfcmpeq>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpge>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffd2 	bl	8001008 <__aeabi_cfrcmple>
 8001064:	bf94      	ite	ls
 8001066:	2001      	movls	r0, #1
 8001068:	2000      	movhi	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpgt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffc8 	bl	8001008 <__aeabi_cfrcmple>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_f2uiz>:
 8001084:	0042      	lsls	r2, r0, #1
 8001086:	d20e      	bcs.n	80010a6 <__aeabi_f2uiz+0x22>
 8001088:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800108c:	d30b      	bcc.n	80010a6 <__aeabi_f2uiz+0x22>
 800108e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001092:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001096:	d409      	bmi.n	80010ac <__aeabi_f2uiz+0x28>
 8001098:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800109c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0000 	mov.w	r0, #0
 80010aa:	4770      	bx	lr
 80010ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010b0:	d101      	bne.n	80010b6 <__aeabi_f2uiz+0x32>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	d102      	bne.n	80010bc <__aeabi_f2uiz+0x38>
 80010b6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ba:	4770      	bx	lr
 80010bc:	f04f 0000 	mov.w	r0, #0
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_d2lz>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	2200      	movs	r2, #0
 80010c8:	2300      	movs	r3, #0
 80010ca:	4604      	mov	r4, r0
 80010cc:	460d      	mov	r5, r1
 80010ce:	f7ff fc6d 	bl	80009ac <__aeabi_dcmplt>
 80010d2:	b928      	cbnz	r0, 80010e0 <__aeabi_d2lz+0x1c>
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010dc:	f000 b80a 	b.w	80010f4 <__aeabi_d2ulz>
 80010e0:	4620      	mov	r0, r4
 80010e2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80010e6:	f000 f805 	bl	80010f4 <__aeabi_d2ulz>
 80010ea:	4240      	negs	r0, r0
 80010ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f0:	bd38      	pop	{r3, r4, r5, pc}
 80010f2:	bf00      	nop

080010f4 <__aeabi_d2ulz>:
 80010f4:	b5d0      	push	{r4, r6, r7, lr}
 80010f6:	2200      	movs	r2, #0
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <__aeabi_d2ulz+0x34>)
 80010fa:	4606      	mov	r6, r0
 80010fc:	460f      	mov	r7, r1
 80010fe:	f7ff f9e3 	bl	80004c8 <__aeabi_dmul>
 8001102:	f7ff fc7b 	bl	80009fc <__aeabi_d2uiz>
 8001106:	4604      	mov	r4, r0
 8001108:	f7ff f964 	bl	80003d4 <__aeabi_ui2d>
 800110c:	2200      	movs	r2, #0
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <__aeabi_d2ulz+0x38>)
 8001110:	f7ff f9da 	bl	80004c8 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4630      	mov	r0, r6
 800111a:	4639      	mov	r1, r7
 800111c:	f7ff f81c 	bl	8000158 <__aeabi_dsub>
 8001120:	f7ff fc6c 	bl	80009fc <__aeabi_d2uiz>
 8001124:	4621      	mov	r1, r4
 8001126:	bdd0      	pop	{r4, r6, r7, pc}
 8001128:	3df00000 	.word	0x3df00000
 800112c:	41f00000 	.word	0x41f00000

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4906      	ldr	r1, [pc, #24]	@ (8001164 <__NVIC_EnableIRQ+0x34>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100

08001168 <delay_ms>:
void UART_Init(void);
char UART_ReadChar(void);
int UART_ReadLine(char *buffer, int max_len);

// Dummy delay (for simulation only)
void delay_ms(uint32_t ms) {
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e003      	b.n	800117e <delay_ms+0x16>
		__asm("NOP");
 8001176:	bf00      	nop
	for (volatile uint32_t i = 0; i < ms * 1000; i++) {
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001184:	fb03 f202 	mul.w	r2, r3, r2
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	429a      	cmp	r2, r3
 800118c:	d8f3      	bhi.n	8001176 <delay_ms+0xe>
	}
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
	...

0800119c <main>:

int main(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b098      	sub	sp, #96	@ 0x60
 80011a0:	af0a      	add	r7, sp, #40	@ 0x28
	// Initialize UART
	UART_Init();
 80011a2:	f000 f8bd 	bl	8001320 <UART_Init>

	// === Left Motor (TIM3, PA4/PA5) ===
	TIM_TypeDef *leftTimer = TIM3;
 80011a6:	4b50      	ldr	r3, [pc, #320]	@ (80012e8 <main+0x14c>)
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t leftChannel = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	GPIO_TypeDef *leftDir1Port = GPIOA;
 80011b0:	4b4e      	ldr	r3, [pc, #312]	@ (80012ec <main+0x150>)
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t leftDir1Pin = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	GPIO_TypeDef *leftDir2Port = GPIOA;
 80011ba:	4b4c      	ldr	r3, [pc, #304]	@ (80012ec <main+0x150>)
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t leftDir2Pin = 5;
 80011be:	2305      	movs	r3, #5
 80011c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// === Right Motor (TIM4, PB6/PB7) ===
	TIM_TypeDef *rightTimer = TIM4;
 80011c4:	4b4a      	ldr	r3, [pc, #296]	@ (80012f0 <main+0x154>)
 80011c6:	61fb      	str	r3, [r7, #28]
	uint8_t rightChannel = 2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	76fb      	strb	r3, [r7, #27]
	GPIO_TypeDef *rightDir1Port = GPIOA;
 80011cc:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <main+0x150>)
 80011ce:	617b      	str	r3, [r7, #20]
	uint8_t rightDir1Pin = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	74fb      	strb	r3, [r7, #19]
	GPIO_TypeDef *rightDir2Port = GPIOA;
 80011d4:	4b45      	ldr	r3, [pc, #276]	@ (80012ec <main+0x150>)
 80011d6:	60fb      	str	r3, [r7, #12]
	uint8_t rightDir2Pin = 3;
 80011d8:	2303      	movs	r3, #3
 80011da:	72fb      	strb	r3, [r7, #11]

	// === Init Car Motors ===
	CAR_init(leftTimer, leftChannel, PWM_FREQ_HZ, leftDir1Port, leftDir2Port,
 80011dc:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 80011e0:	7afb      	ldrb	r3, [r7, #11]
 80011e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80011e4:	7cfb      	ldrb	r3, [r7, #19]
 80011e6:	9308      	str	r3, [sp, #32]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	9307      	str	r3, [sp, #28]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	9306      	str	r3, [sp, #24]
 80011f0:	4b40      	ldr	r3, [pc, #256]	@ (80012f4 <main+0x158>)
 80011f2:	9305      	str	r3, [sp, #20]
 80011f4:	7efb      	ldrb	r3, [r7, #27]
 80011f6:	9304      	str	r3, [sp, #16]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	9303      	str	r3, [sp, #12]
 80011fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800120e:	4a39      	ldr	r2, [pc, #228]	@ (80012f4 <main+0x158>)
 8001210:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001212:	f000 fa5f 	bl	80016d4 <CAR_init>
			leftDir1Pin, leftDir2Pin, rightTimer, rightChannel, PWM_FREQ_HZ,
			rightDir1Port, rightDir2Port, rightDir1Pin, rightDir2Pin);

	// === Init Millisecond Timer (TIM2 used for timing) ===
	TIM_initMillis(TIM2, 1);  // 1ms resolution
 8001216:	2101      	movs	r1, #1
 8001218:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800121c:	f001 f82e 	bl	800227c <TIM_initMillis>
	delay_ms(50);
 8001220:	2032      	movs	r0, #50	@ 0x32
 8001222:	f7ff ffa1 	bl	8001168 <delay_ms>

	// === Initialize PD controllers ===
	PD_init(0.6f, 0.8f);        // Distance PD
 8001226:	4934      	ldr	r1, [pc, #208]	@ (80012f8 <main+0x15c>)
 8001228:	4834      	ldr	r0, [pc, #208]	@ (80012fc <main+0x160>)
 800122a:	f000 fbcd 	bl	80019c8 <PD_init>
	PD_init_angle(5.0f, 1.0f);  // Angle control gains
 800122e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001232:	4833      	ldr	r0, [pc, #204]	@ (8001300 <main+0x164>)
 8001234:	f000 fbb4 	bl	80019a0 <PD_init_angle>

	while (1) {
		// Read one line from UART (blocking until '\n')
		if (UART_ReadLine(uart_rx_buffer, UART_BUFFER_SIZE)) {
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	4832      	ldr	r0, [pc, #200]	@ (8001304 <main+0x168>)
 800123c:	f000 f8ee 	bl	800141c <UART_ReadLine>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d033      	beq.n	80012ae <main+0x112>
			// uart_rx_buffer contains something like: "123.45,67.89"

			// Parse distance and angle
			char *comma_pos = strchr(uart_rx_buffer, ',');
 8001246:	212c      	movs	r1, #44	@ 0x2c
 8001248:	482e      	ldr	r0, [pc, #184]	@ (8001304 <main+0x168>)
 800124a:	f002 f8b6 	bl	80033ba <strchr>
 800124e:	6078      	str	r0, [r7, #4]
			if (comma_pos != NULL) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d02b      	beq.n	80012ae <main+0x112>
				*comma_pos = 0; // Null terminate distance part
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
				distance = atof(uart_rx_buffer)/10;
 800125c:	4829      	ldr	r0, [pc, #164]	@ (8001304 <main+0x168>)
 800125e:	f001 f997 	bl	8002590 <atof>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <main+0x16c>)
 8001268:	f7ff fa58 	bl	800071c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fbe2 	bl	8000a3c <__aeabi_d2f>
 8001278:	4603      	mov	r3, r0
 800127a:	4a24      	ldr	r2, [pc, #144]	@ (800130c <main+0x170>)
 800127c:	6013      	str	r3, [r2, #0]
				angle = atof(comma_pos + 1);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3301      	adds	r3, #1
 8001282:	4618      	mov	r0, r3
 8001284:	f001 f984 	bl	8002590 <atof>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fbd4 	bl	8000a3c <__aeabi_d2f>
 8001294:	4603      	mov	r3, r0
 8001296:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <main+0x174>)
 8001298:	6013      	str	r3, [r2, #0]
				realangle=angle-90;
 800129a:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <main+0x174>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	491d      	ldr	r1, [pc, #116]	@ (8001314 <main+0x178>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fc1f 	bl	8000ae4 <__aeabi_fsub>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <main+0x17c>)
 80012ac:	601a      	str	r2, [r3, #0]

				// Optional: Validate values (e.g., distance > 0)
			}
		}

		current_time_ms = TIM_Millis();
 80012ae:	f001 f83f 	bl	8002330 <TIM_Millis>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4919      	ldr	r1, [pc, #100]	@ (800131c <main+0x180>)
 80012b8:	e9c1 2300 	strd	r2, r3, [r1]

		// Use received values instead of simulated
		if(distance!=0)
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <main+0x170>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f04f 0100 	mov.w	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff feab 	bl	8001020 <__aeabi_fcmpeq>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d107      	bne.n	80012e0 <main+0x144>
		PD_update_from_distance(distance, current_time_ms);
 80012d0:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <main+0x170>)
 80012d2:	6819      	ldr	r1, [r3, #0]
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <main+0x180>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	4608      	mov	r0, r1
 80012dc:	f000 fb88 	bl	80019f0 <PD_update_from_distance>
		//PD_update_angle(angle, current_time_ms);

		delay_ms(1);
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff ff41 	bl	8001168 <delay_ms>
		if (UART_ReadLine(uart_rx_buffer, UART_BUFFER_SIZE)) {
 80012e6:	e7a7      	b.n	8001238 <main+0x9c>
 80012e8:	40000400 	.word	0x40000400
 80012ec:	40010800 	.word	0x40010800
 80012f0:	40000800 	.word	0x40000800
 80012f4:	447a0000 	.word	0x447a0000
 80012f8:	3f4ccccd 	.word	0x3f4ccccd
 80012fc:	3f19999a 	.word	0x3f19999a
 8001300:	40a00000 	.word	0x40a00000
 8001304:	20000200 	.word	0x20000200
 8001308:	40240000 	.word	0x40240000
 800130c:	200001f4 	.word	0x200001f4
 8001310:	200001f8 	.word	0x200001f8
 8001314:	42b40000 	.word	0x42b40000
 8001318:	200001fc 	.word	0x200001fc
 800131c:	20000000 	.word	0x20000000

08001320 <UART_Init>:
volatile uint8_t uart_line_ready = 0;

extern char uart_rx_buffer_copy[UART_BUFFER_SIZE];  // For main() to access safely

// Initialize USART1 with RX interrupt enabled
void UART_Init(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN;
 8001324:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <UART_Init+0x64>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a16      	ldr	r2, [pc, #88]	@ (8001384 <UART_Init+0x64>)
 800132a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]

    GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9 | GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <UART_Init+0x68>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <UART_Init+0x68>)
 800133a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800133e:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x3 << GPIO_CRH_MODE9_Pos) | (0x2 << GPIO_CRH_CNF9_Pos);   // PA9: TX
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <UART_Init+0x68>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a10      	ldr	r2, [pc, #64]	@ (8001388 <UART_Init+0x68>)
 8001346:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800134a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (0x1 << GPIO_CRH_CNF10_Pos);                                 // PA10: RX
 800134c:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <UART_Init+0x68>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <UART_Init+0x68>)
 8001352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001356:	6053      	str	r3, [r2, #4]

    USART1->CR1 &= ~USART_CR1_UE;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <UART_Init+0x6c>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <UART_Init+0x6c>)
 800135e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001362:	60d3      	str	r3, [r2, #12]
    USART1->BRR = 0x0010;  // 500000 baud at 8 MHz
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <UART_Init+0x6c>)
 8001366:	2210      	movs	r2, #16
 8001368:	609a      	str	r2, [r3, #8]
    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <UART_Init+0x6c>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	4a07      	ldr	r2, [pc, #28]	@ (800138c <UART_Init+0x6c>)
 8001370:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001374:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 8001378:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(USART1_IRQn);
 800137a:	2025      	movs	r0, #37	@ 0x25
 800137c:	f7ff fed8 	bl	8001130 <__NVIC_EnableIRQ>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021000 	.word	0x40021000
 8001388:	40010800 	.word	0x40010800
 800138c:	40013800 	.word	0x40013800

08001390 <USART1_IRQHandler>:

// Interrupt handler for USART1
void USART1_IRQHandler(void) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_ORE) {
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <USART1_IRQHandler+0x7c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <USART1_IRQHandler+0x1a>
        volatile uint32_t tmp = USART1->DR;  // Clear ORE by reading DR
 80013a2:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <USART1_IRQHandler+0x7c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	603b      	str	r3, [r7, #0]
        (void)tmp;
 80013a8:	683b      	ldr	r3, [r7, #0]
    }

    if (USART1->SR & USART_SR_RXNE) {
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <USART1_IRQHandler+0x7c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0320 	and.w	r3, r3, #32
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d026      	beq.n	8001404 <USART1_IRQHandler+0x74>
        char received = (char)(USART1->DR & 0xFF);
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <USART1_IRQHandler+0x7c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	71fb      	strb	r3, [r7, #7]

        if (received == '\r') return;
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b0d      	cmp	r3, #13
 80013c0:	d01f      	beq.n	8001402 <USART1_IRQHandler+0x72>

        if (received == '\n') {
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b0a      	cmp	r3, #10
 80013c6:	d10b      	bne.n	80013e0 <USART1_IRQHandler+0x50>
            uart_rx_buffer[uart_rx_index] = '\0';
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <USART1_IRQHandler+0x80>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <USART1_IRQHandler+0x84>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	54d1      	strb	r1, [r2, r3]
            uart_rx_index = 0;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <USART1_IRQHandler+0x80>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
            uart_line_ready = 1;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <USART1_IRQHandler+0x88>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	e011      	b.n	8001404 <USART1_IRQHandler+0x74>
        } else {
            if (uart_rx_index < UART_BUFFER_SIZE - 1) {
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <USART1_IRQHandler+0x80>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80013e6:	dc08      	bgt.n	80013fa <USART1_IRQHandler+0x6a>
                uart_rx_buffer[uart_rx_index++] = received;
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <USART1_IRQHandler+0x80>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	4908      	ldr	r1, [pc, #32]	@ (8001410 <USART1_IRQHandler+0x80>)
 80013f0:	600a      	str	r2, [r1, #0]
 80013f2:	4908      	ldr	r1, [pc, #32]	@ (8001414 <USART1_IRQHandler+0x84>)
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	54ca      	strb	r2, [r1, r3]
 80013f8:	e004      	b.n	8001404 <USART1_IRQHandler+0x74>
            } else {
                uart_rx_index = 0;  // reset on overflow
 80013fa:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <USART1_IRQHandler+0x80>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e000      	b.n	8001404 <USART1_IRQHandler+0x74>
        if (received == '\r') return;
 8001402:	bf00      	nop
            }
        }
    }
}
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40013800 	.word	0x40013800
 8001410:	20000240 	.word	0x20000240
 8001414:	20000200 	.word	0x20000200
 8001418:	20000244 	.word	0x20000244

0800141c <UART_ReadLine>:

// Safe read line function to be called from main loop
// Returns 1 if a full line is ready
char uart_rx_buffer_copy[UART_BUFFER_SIZE];  // Used by main

int UART_ReadLine(char *buffer, int max_len) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
    if (uart_line_ready) {
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <UART_ReadLine+0x54>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d019      	beq.n	8001464 <UART_ReadLine+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
        __disable_irq();
        strncpy((char *)uart_rx_buffer_copy, (char *)uart_rx_buffer, UART_BUFFER_SIZE);
 8001434:	2240      	movs	r2, #64	@ 0x40
 8001436:	490f      	ldr	r1, [pc, #60]	@ (8001474 <UART_ReadLine+0x58>)
 8001438:	480f      	ldr	r0, [pc, #60]	@ (8001478 <UART_ReadLine+0x5c>)
 800143a:	f001 ffdd 	bl	80033f8 <strncpy>
        uart_line_ready = 0;
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <UART_ReadLine+0x54>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001444:	b662      	cpsie	i
}
 8001446:	bf00      	nop
        __enable_irq();

        strncpy(buffer, uart_rx_buffer_copy, max_len);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	490a      	ldr	r1, [pc, #40]	@ (8001478 <UART_ReadLine+0x5c>)
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f001 ffd2 	bl	80033f8 <strncpy>
        buffer[max_len - 1] = '\0'; // Ensure null-termination
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	3b01      	subs	r3, #1
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
        return 1;
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <UART_ReadLine+0x4a>
    }
    return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000244 	.word	0x20000244
 8001474:	20000200 	.word	0x20000200
 8001478:	20000248 	.word	0x20000248

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <NMI_Handler+0x4>

08001484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <MemManage_Handler+0x4>

08001494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f8f0 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return 1;
 80014d8:	2301      	movs	r3, #1
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <_kill>:

int _kill(int pid, int sig)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ec:	f001 ffde 	bl	80034ac <__errno>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2216      	movs	r2, #22
 80014f4:	601a      	str	r2, [r3, #0]
  return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_exit>:

void _exit (int status)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800150a:	f04f 31ff 	mov.w	r1, #4294967295
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffe7 	bl	80014e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <_exit+0x12>

08001518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e00a      	b.n	8001540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800152a:	f3af 8000 	nop.w
 800152e:	4601      	mov	r1, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf0      	blt.n	800152a <_read+0x12>
  }

  return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e009      	b.n	8001578 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf1      	blt.n	8001564 <_write+0x12>
  }
  return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_close>:

int _close(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015b0:	605a      	str	r2, [r3, #4]
  return 0;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <_isatty>:

int _isatty(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
	...

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f001 ff46 	bl	80034ac <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
  float angle = 0.0f;
 }
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20005000 	.word	0x20005000
 800164c:	00000400 	.word	0x00000400
 8001650:	20000288 	.word	0x20000288
 8001654:	20000448 	.word	0x20000448

08001658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <Reset_Handler>:





    bl  SystemInit
 8001664:	f7ff fff8 	bl	8001658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480b      	ldr	r0, [pc, #44]	@ (8001698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800166a:	490c      	ldr	r1, [pc, #48]	@ (800169c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800166c:	4a0c      	ldr	r2, [pc, #48]	@ (80016a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a09      	ldr	r2, [pc, #36]	@ (80016a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001680:	4c09      	ldr	r4, [pc, #36]	@ (80016a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f001 ff13 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001692:	f7ff fd83 	bl	800119c <main>
  bx lr
 8001696:	4770      	bx	lr
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80016a0:	08005574 	.word	0x08005574
  ldr r2, =_sbss
 80016a4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80016a8:	20000448 	.word	0x20000448

080016ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC1_2_IRQHandler>
	...

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_IncTick+0x1c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <HAL_IncTick+0x20>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a03      	ldr	r2, [pc, #12]	@ (80016d0 <HAL_IncTick+0x20>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000008 	.word	0x20000008
 80016d0:	2000028c 	.word	0x2000028c

080016d4 <CAR_init>:
uint8_t DirRight2Pin_global;

void CAR_init(TIM_TypeDef *TimxLeft ,uint8_t ChannelLeft, float FrequencyLeft,
              GPIO_TypeDef *DirLeft1, GPIO_TypeDef *DirLeft2, uint8_t DirLeft1Pin, uint8_t DirLeft2Pin,
              TIM_TypeDef *TimxRight ,uint8_t ChannelRight, float FrequencyRight,
              GPIO_TypeDef *DirRight1, GPIO_TypeDef *DirRight2, uint8_t DirRight1Pin, uint8_t DirRight2Pin) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	460b      	mov	r3, r1
 80016e2:	72fb      	strb	r3, [r7, #11]

    // Store GPIO pointers and pin numbers
    DirLeft1_global = DirLeft1;
 80016e4:	4a29      	ldr	r2, [pc, #164]	@ (800178c <CAR_init+0xb8>)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	6013      	str	r3, [r2, #0]
    DirLeft2_global = DirLeft2;
 80016ea:	4a29      	ldr	r2, [pc, #164]	@ (8001790 <CAR_init+0xbc>)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6013      	str	r3, [r2, #0]
    DirRight1_global = DirRight1;
 80016f0:	4a28      	ldr	r2, [pc, #160]	@ (8001794 <CAR_init+0xc0>)
 80016f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016f4:	6013      	str	r3, [r2, #0]
    DirRight2_global = DirRight2;
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <CAR_init+0xc4>)
 80016f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016fa:	6013      	str	r3, [r2, #0]

    DirLeft1Pin_global = DirLeft1Pin;
 80016fc:	4a27      	ldr	r2, [pc, #156]	@ (800179c <CAR_init+0xc8>)
 80016fe:	7f3b      	ldrb	r3, [r7, #28]
 8001700:	7013      	strb	r3, [r2, #0]
    DirLeft2Pin_global = DirLeft2Pin;
 8001702:	4a27      	ldr	r2, [pc, #156]	@ (80017a0 <CAR_init+0xcc>)
 8001704:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001708:	7013      	strb	r3, [r2, #0]
    DirRight1Pin_global = DirRight1Pin;
 800170a:	4a26      	ldr	r2, [pc, #152]	@ (80017a4 <CAR_init+0xd0>)
 800170c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001710:	7013      	strb	r3, [r2, #0]
    DirRight2Pin_global = DirRight2Pin;
 8001712:	4a25      	ldr	r2, [pc, #148]	@ (80017a8 <CAR_init+0xd4>)
 8001714:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001718:	7013      	strb	r3, [r2, #0]

    // Configure all direction pins as outputs
    GPIO_pinMode(DirLeft1, DirLeft1Pin, OUTPUT);
 800171a:	7f3b      	ldrb	r3, [r7, #28]
 800171c:	2203      	movs	r2, #3
 800171e:	4619      	mov	r1, r3
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f000 fa1d 	bl	8001b60 <GPIO_pinMode>
    GPIO_pinMode(DirLeft2, DirLeft2Pin, OUTPUT);
 8001726:	f897 3020 	ldrb.w	r3, [r7, #32]
 800172a:	2203      	movs	r2, #3
 800172c:	4619      	mov	r1, r3
 800172e:	69b8      	ldr	r0, [r7, #24]
 8001730:	f000 fa16 	bl	8001b60 <GPIO_pinMode>
    GPIO_pinMode(DirRight1, DirRight1Pin, OUTPUT);
 8001734:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001738:	2203      	movs	r2, #3
 800173a:	4619      	mov	r1, r3
 800173c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800173e:	f000 fa0f 	bl	8001b60 <GPIO_pinMode>
    GPIO_pinMode(DirRight2, DirRight2Pin, OUTPUT);
 8001742:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001746:	2203      	movs	r2, #3
 8001748:	4619      	mov	r1, r3
 800174a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800174c:	f000 fa08 	bl	8001b60 <GPIO_pinMode>

    // Store timer and channel configuration
    TimxLeft_global = TimxLeft;
 8001750:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <CAR_init+0xd8>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6013      	str	r3, [r2, #0]
    TimxRight_global = TimxRight;
 8001756:	4a16      	ldr	r2, [pc, #88]	@ (80017b0 <CAR_init+0xdc>)
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	6013      	str	r3, [r2, #0]
    ChannelLeft_global = ChannelLeft;
 800175c:	4a15      	ldr	r2, [pc, #84]	@ (80017b4 <CAR_init+0xe0>)
 800175e:	7afb      	ldrb	r3, [r7, #11]
 8001760:	7013      	strb	r3, [r2, #0]
    ChannelRight_global = ChannelRight;
 8001762:	4a15      	ldr	r2, [pc, #84]	@ (80017b8 <CAR_init+0xe4>)
 8001764:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001768:	7013      	strb	r3, [r2, #0]

    // Initialize PWM channels
    TIM_initPWM(TimxLeft, ChannelLeft, FrequencyLeft);
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4619      	mov	r1, r3
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 faef 	bl	8001d54 <TIM_initPWM>
    TIM_initPWM(TimxRight, ChannelRight, FrequencyRight);
 8001776:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800177a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800177c:	4619      	mov	r1, r3
 800177e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001780:	f000 fae8 	bl	8001d54 <TIM_initPWM>
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	2000029c 	.word	0x2000029c
 8001790:	200002a0 	.word	0x200002a0
 8001794:	200002a4 	.word	0x200002a4
 8001798:	200002a8 	.word	0x200002a8
 800179c:	200002ac 	.word	0x200002ac
 80017a0:	200002ad 	.word	0x200002ad
 80017a4:	200002ae 	.word	0x200002ae
 80017a8:	200002af 	.word	0x200002af
 80017ac:	20000290 	.word	0x20000290
 80017b0:	20000294 	.word	0x20000294
 80017b4:	20000298 	.word	0x20000298
 80017b8:	20000299 	.word	0x20000299

080017bc <CAR_forward>:

void CAR_forward(float rightSpeed ,float leftSpeed) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
    // Left motor forward
    GPIO_digitalWrite(DirLeft1_global, DirLeft1Pin_global, HIGH);
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <CAR_forward+0x74>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001834 <CAR_forward+0x78>)
 80017cc:	7811      	ldrb	r1, [r2, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fa77 	bl	8001cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirLeft2_global, DirLeft2Pin_global, LOW);
 80017d6:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <CAR_forward+0x7c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a18      	ldr	r2, [pc, #96]	@ (800183c <CAR_forward+0x80>)
 80017dc:	7811      	ldrb	r1, [r2, #0]
 80017de:	2201      	movs	r2, #1
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fa6f 	bl	8001cc4 <GPIO_digitalWrite>
    // Right motor forward
    GPIO_digitalWrite(DirRight1_global, DirRight1Pin_global, HIGH);
 80017e6:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <CAR_forward+0x84>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a16      	ldr	r2, [pc, #88]	@ (8001844 <CAR_forward+0x88>)
 80017ec:	7811      	ldrb	r1, [r2, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fa67 	bl	8001cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight2_global, DirRight2Pin_global, LOW);
 80017f6:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <CAR_forward+0x8c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a14      	ldr	r2, [pc, #80]	@ (800184c <CAR_forward+0x90>)
 80017fc:	7811      	ldrb	r1, [r2, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fa5f 	bl	8001cc4 <GPIO_digitalWrite>

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, leftSpeed);
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <CAR_forward+0x94>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <CAR_forward+0x98>)
 800180c:	7811      	ldrb	r1, [r2, #0]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fc9b 	bl	800214c <TIM_writePWM>
    TIM_writePWM(TimxRight_global, ChannelRight_global, rightSpeed);
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <CAR_forward+0x9c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a10      	ldr	r2, [pc, #64]	@ (800185c <CAR_forward+0xa0>)
 800181c:	7811      	ldrb	r1, [r2, #0]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fc93 	bl	800214c <TIM_writePWM>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000029c 	.word	0x2000029c
 8001834:	200002ac 	.word	0x200002ac
 8001838:	200002a0 	.word	0x200002a0
 800183c:	200002ad 	.word	0x200002ad
 8001840:	200002a4 	.word	0x200002a4
 8001844:	200002ae 	.word	0x200002ae
 8001848:	200002a8 	.word	0x200002a8
 800184c:	200002af 	.word	0x200002af
 8001850:	20000290 	.word	0x20000290
 8001854:	20000298 	.word	0x20000298
 8001858:	20000294 	.word	0x20000294
 800185c:	20000299 	.word	0x20000299

08001860 <CAR_backwards>:

void CAR_backwards(float rightSpeed , float leftSpeed) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
    // Left motor backward
    GPIO_digitalWrite(DirLeft1_global, DirLeft1Pin_global, LOW);
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <CAR_backwards+0x74>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1a      	ldr	r2, [pc, #104]	@ (80018d8 <CAR_backwards+0x78>)
 8001870:	7811      	ldrb	r1, [r2, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	4618      	mov	r0, r3
 8001876:	f000 fa25 	bl	8001cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirLeft2_global, DirLeft2Pin_global, HIGH);
 800187a:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <CAR_backwards+0x7c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a18      	ldr	r2, [pc, #96]	@ (80018e0 <CAR_backwards+0x80>)
 8001880:	7811      	ldrb	r1, [r2, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fa1d 	bl	8001cc4 <GPIO_digitalWrite>
    // Right motor backward
    GPIO_digitalWrite(DirRight1_global, DirRight1Pin_global, LOW);
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <CAR_backwards+0x84>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a16      	ldr	r2, [pc, #88]	@ (80018e8 <CAR_backwards+0x88>)
 8001890:	7811      	ldrb	r1, [r2, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fa15 	bl	8001cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight2_global, DirRight2Pin_global, HIGH);
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <CAR_backwards+0x8c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a14      	ldr	r2, [pc, #80]	@ (80018f0 <CAR_backwards+0x90>)
 80018a0:	7811      	ldrb	r1, [r2, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fa0d 	bl	8001cc4 <GPIO_digitalWrite>

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, leftSpeed);
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <CAR_backwards+0x94>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <CAR_backwards+0x98>)
 80018b0:	7811      	ldrb	r1, [r2, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fc49 	bl	800214c <TIM_writePWM>
    TIM_writePWM(TimxRight_global, ChannelRight_global, rightSpeed);
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <CAR_backwards+0x9c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a10      	ldr	r2, [pc, #64]	@ (8001900 <CAR_backwards+0xa0>)
 80018c0:	7811      	ldrb	r1, [r2, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fc41 	bl	800214c <TIM_writePWM>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000029c 	.word	0x2000029c
 80018d8:	200002ac 	.word	0x200002ac
 80018dc:	200002a0 	.word	0x200002a0
 80018e0:	200002ad 	.word	0x200002ad
 80018e4:	200002a4 	.word	0x200002a4
 80018e8:	200002ae 	.word	0x200002ae
 80018ec:	200002a8 	.word	0x200002a8
 80018f0:	200002af 	.word	0x200002af
 80018f4:	20000290 	.word	0x20000290
 80018f8:	20000298 	.word	0x20000298
 80018fc:	20000294 	.word	0x20000294
 8001900:	20000299 	.word	0x20000299

08001904 <CAR_stop>:

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, leftSpeed);
    TIM_writePWM(TimxRight_global, ChannelRight_global, rightSpeed);
}

void CAR_stop() {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
    // Brake both motors
    GPIO_digitalWrite(DirLeft1_global, DirLeft1Pin_global, LOW);
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <CAR_stop+0x6c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	@ (8001974 <CAR_stop+0x70>)
 800190e:	7811      	ldrb	r1, [r2, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f9d6 	bl	8001cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirLeft2_global, DirLeft2Pin_global, LOW);
 8001918:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <CAR_stop+0x74>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a17      	ldr	r2, [pc, #92]	@ (800197c <CAR_stop+0x78>)
 800191e:	7811      	ldrb	r1, [r2, #0]
 8001920:	2201      	movs	r2, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f9ce 	bl	8001cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight1_global, DirRight1Pin_global, LOW);
 8001928:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <CAR_stop+0x7c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a15      	ldr	r2, [pc, #84]	@ (8001984 <CAR_stop+0x80>)
 800192e:	7811      	ldrb	r1, [r2, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f9c6 	bl	8001cc4 <GPIO_digitalWrite>
    GPIO_digitalWrite(DirRight2_global, DirRight2Pin_global, LOW);
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <CAR_stop+0x84>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a13      	ldr	r2, [pc, #76]	@ (800198c <CAR_stop+0x88>)
 800193e:	7811      	ldrb	r1, [r2, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f9be 	bl	8001cc4 <GPIO_digitalWrite>

    TIM_writePWM(TimxLeft_global, ChannelLeft_global, 0);
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <CAR_stop+0x8c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <CAR_stop+0x90>)
 800194e:	7811      	ldrb	r1, [r2, #0]
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fbf9 	bl	800214c <TIM_writePWM>
    TIM_writePWM(TimxRight_global, ChannelRight_global, 0);
 800195a:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <CAR_stop+0x94>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a0f      	ldr	r2, [pc, #60]	@ (800199c <CAR_stop+0x98>)
 8001960:	7811      	ldrb	r1, [r2, #0]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fbf0 	bl	800214c <TIM_writePWM>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000029c 	.word	0x2000029c
 8001974:	200002ac 	.word	0x200002ac
 8001978:	200002a0 	.word	0x200002a0
 800197c:	200002ad 	.word	0x200002ad
 8001980:	200002a4 	.word	0x200002a4
 8001984:	200002ae 	.word	0x200002ae
 8001988:	200002a8 	.word	0x200002a8
 800198c:	200002af 	.word	0x200002af
 8001990:	20000290 	.word	0x20000290
 8001994:	20000298 	.word	0x20000298
 8001998:	20000294 	.word	0x20000294
 800199c:	20000299 	.word	0x20000299

080019a0 <PD_init_angle>:
float prev_angle_time = 0;
float servo_output = 0;
#define maxDistance 20 //5cm from target
#define mainAngle 90

void PD_init_angle(float Kp, float Kd) {
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
    kp_angle = Kp;
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <PD_init_angle+0x20>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6013      	str	r3, [r2, #0]
    kd_angle = Kd;
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <PD_init_angle+0x24>)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6013      	str	r3, [r2, #0]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	200002c4 	.word	0x200002c4
 80019c4:	200002c8 	.word	0x200002c8

080019c8 <PD_init>:
}



void PD_init( float Kp, float Kd)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
kp_global=Kp;
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <PD_init+0x20>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6013      	str	r3, [r2, #0]
kd_global=Kd;
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <PD_init+0x24>)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6013      	str	r3, [r2, #0]

}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	200002b0 	.word	0x200002b0
 80019ec:	200002b4 	.word	0x200002b4

080019f0 <PD_update_from_distance>:
void PD_update_from_distance(float actualDistance, uint64_t time_ms)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	e9c7 2300 	strd	r2, r3, [r7]
    float error = actualDistance - maxDistance;
 80019fc:	494e      	ldr	r1, [pc, #312]	@ (8001b38 <PD_update_from_distance+0x148>)
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff f870 	bl	8000ae4 <__aeabi_fsub>
 8001a04:	4603      	mov	r3, r0
 8001a06:	61fb      	str	r3, [r7, #28]
    float p = kp_global * error;
 8001a08:	4b4c      	ldr	r3, [pc, #304]	@ (8001b3c <PD_update_from_distance+0x14c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	69f8      	ldr	r0, [r7, #28]
 8001a10:	f7ff f972 	bl	8000cf8 <__aeabi_fmul>
 8001a14:	4603      	mov	r3, r0
 8001a16:	61bb      	str	r3, [r7, #24]
    float d = kd_global*(error - prev_error) / ((time_ms - prev_time) / 1000.0f);
 8001a18:	4b49      	ldr	r3, [pc, #292]	@ (8001b40 <PD_update_from_distance+0x150>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	69f8      	ldr	r0, [r7, #28]
 8001a20:	f7ff f860 	bl	8000ae4 <__aeabi_fsub>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b46      	ldr	r3, [pc, #280]	@ (8001b44 <PD_update_from_distance+0x154>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f7ff f962 	bl	8000cf8 <__aeabi_fmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461c      	mov	r4, r3
 8001a38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a3c:	f7ff f916 	bl	8000c6c <__aeabi_ul2f>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b41      	ldr	r3, [pc, #260]	@ (8001b48 <PD_update_from_distance+0x158>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7ff f84b 	bl	8000ae4 <__aeabi_fsub>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	493e      	ldr	r1, [pc, #248]	@ (8001b4c <PD_update_from_distance+0x15c>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fa04 	bl	8000e60 <__aeabi_fdiv>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f7ff f9ff 	bl	8000e60 <__aeabi_fdiv>
 8001a62:	4603      	mov	r3, r0
 8001a64:	617b      	str	r3, [r7, #20]
    prev_error = error;
 8001a66:	4a36      	ldr	r2, [pc, #216]	@ (8001b40 <PD_update_from_distance+0x150>)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	6013      	str	r3, [r2, #0]
    prev_time = time_ms;
 8001a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a70:	f7ff f8fc 	bl	8000c6c <__aeabi_ul2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a34      	ldr	r2, [pc, #208]	@ (8001b48 <PD_update_from_distance+0x158>)
 8001a78:	6013      	str	r3, [r2, #0]

    speed = p + d;
 8001a7a:	6979      	ldr	r1, [r7, #20]
 8001a7c:	69b8      	ldr	r0, [r7, #24]
 8001a7e:	f7ff f833 	bl	8000ae8 <__addsf3>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b32      	ldr	r3, [pc, #200]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001a88:	601a      	str	r2, [r3, #0]

    // Clamp speed to [-100, 100]
    if (speed > 100.0f) {
 8001a8a:	4b31      	ldr	r3, [pc, #196]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4931      	ldr	r1, [pc, #196]	@ (8001b54 <PD_update_from_distance+0x164>)
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff faed 	bl	8001070 <__aeabi_fcmpgt>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <PD_update_from_distance+0xb4>
        speed = 100.0f;
 8001a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b54 <PD_update_from_distance+0x164>)
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e00b      	b.n	8001abc <PD_update_from_distance+0xcc>
    } else if (speed < -100.0f) {
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	492b      	ldr	r1, [pc, #172]	@ (8001b58 <PD_update_from_distance+0x168>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fac2 	bl	8001034 <__aeabi_fcmplt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <PD_update_from_distance+0xcc>
        speed = -100.0f;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001ab8:	4a27      	ldr	r2, [pc, #156]	@ (8001b58 <PD_update_from_distance+0x168>)
 8001aba:	601a      	str	r2, [r3, #0]
//    if (speed > 0.0f && speed < 30.0f) {
//        speed = 30.0f;  // Minimum forward speed
//    } else if (speed < 0.0f && speed > -30.0f) {
//        speed = -30.0f; // Minimum backward speed
//    }
if(fabs(error)<10){
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ac2:	4926      	ldr	r1, [pc, #152]	@ (8001b5c <PD_update_from_distance+0x16c>)
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fab5 	bl	8001034 <__aeabi_fcmplt>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <PD_update_from_distance+0xe8>
	speed=0;
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
}
    // Movement logic
    if (speed > 0) {
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f04f 0100 	mov.w	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fac5 	bl	8001070 <__aeabi_fcmpgt>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <PD_update_from_distance+0x10e>
        CAR_forward(speed,speed);
 8001aec:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a17      	ldr	r2, [pc, #92]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fe60 	bl	80017bc <CAR_forward>
    } else if (speed < 0) {
        CAR_backwards(-speed,-speed);
    } else {
        CAR_stop();
    }
}
 8001afc:	e018      	b.n	8001b30 <PD_update_from_distance+0x140>
    } else if (speed < 0) {
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fa94 	bl	8001034 <__aeabi_fcmplt>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <PD_update_from_distance+0x13c>
        CAR_backwards(-speed,-speed);
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <PD_update_from_distance+0x160>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b22:	4619      	mov	r1, r3
 8001b24:	4610      	mov	r0, r2
 8001b26:	f7ff fe9b 	bl	8001860 <CAR_backwards>
}
 8001b2a:	e001      	b.n	8001b30 <PD_update_from_distance+0x140>
        CAR_stop();
 8001b2c:	f7ff feea 	bl	8001904 <CAR_stop>
}
 8001b30:	bf00      	nop
 8001b32:	3724      	adds	r7, #36	@ 0x24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}
 8001b38:	41a00000 	.word	0x41a00000
 8001b3c:	200002b0 	.word	0x200002b0
 8001b40:	200002b8 	.word	0x200002b8
 8001b44:	200002b4 	.word	0x200002b4
 8001b48:	200002bc 	.word	0x200002bc
 8001b4c:	447a0000 	.word	0x447a0000
 8001b50:	200002c0 	.word	0x200002c0
 8001b54:	42c80000 	.word	0x42c80000
 8001b58:	c2c80000 	.word	0xc2c80000
 8001b5c:	41200000 	.word	0x41200000

08001b60 <GPIO_pinMode>:
#include "GPIO_interface.h"

void GPIO_pinMode(GPIO_TypeDef *GPIOX, uint8_t pinNumber, GPIO_MODE mode){
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	f200 8099 	bhi.w	8001caa <GPIO_pinMode+0x14a>
		return;
	}
	// Initialize the clock of port x
    if (GPIOX == GPIOA) {
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a4e      	ldr	r2, [pc, #312]	@ (8001cb4 <GPIO_pinMode+0x154>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d106      	bne.n	8001b8e <GPIO_pinMode+0x2e>
		SET_BIT(RCC->APB2ENR, 2);
 8001b80:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb8 <GPIO_pinMode+0x158>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a4c      	ldr	r2, [pc, #304]	@ (8001cb8 <GPIO_pinMode+0x158>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	e014      	b.n	8001bb8 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOB) {
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4a      	ldr	r2, [pc, #296]	@ (8001cbc <GPIO_pinMode+0x15c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d106      	bne.n	8001ba4 <GPIO_pinMode+0x44>
		SET_BIT(RCC->APB2ENR, 3);
 8001b96:	4b48      	ldr	r3, [pc, #288]	@ (8001cb8 <GPIO_pinMode+0x158>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	4a47      	ldr	r2, [pc, #284]	@ (8001cb8 <GPIO_pinMode+0x158>)
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	6193      	str	r3, [r2, #24]
 8001ba2:	e009      	b.n	8001bb8 <GPIO_pinMode+0x58>
    } else if (GPIOX == GPIOC) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a46      	ldr	r2, [pc, #280]	@ (8001cc0 <GPIO_pinMode+0x160>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d105      	bne.n	8001bb8 <GPIO_pinMode+0x58>
		SET_BIT(RCC->APB2ENR, 4);
 8001bac:	4b42      	ldr	r3, [pc, #264]	@ (8001cb8 <GPIO_pinMode+0x158>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a41      	ldr	r2, [pc, #260]	@ (8001cb8 <GPIO_pinMode+0x158>)
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	6193      	str	r3, [r2, #24]
    }
	volatile uint8_t pinIndex = pinNumber % 8;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	72fb      	strb	r3, [r7, #11]

	volatile uint32_t *CRX;
	if (pinNumber < 8 && pinNumber >= 0){
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	2b07      	cmp	r3, #7
 8001bc6:	d802      	bhi.n	8001bce <GPIO_pinMode+0x6e>
		CRX = &GPIOX->CRL;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	e008      	b.n	8001be0 <GPIO_pinMode+0x80>
	}else if(pinNumber >= 8 && pinNumber < 16){
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	2b07      	cmp	r3, #7
 8001bd2:	d905      	bls.n	8001be0 <GPIO_pinMode+0x80>
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	2b0f      	cmp	r3, #15
 8001bd8:	d802      	bhi.n	8001be0 <GPIO_pinMode+0x80>
		CRX = &GPIOX->CRH;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	60fb      	str	r3, [r7, #12]
	}
	// Zero the CRX register's specific pin mode not the whole register
	*CRX &= ~(0xF << (4*(pinIndex)));
 8001be0:	7afb      	ldrb	r3, [r7, #11]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43da      	mvns	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	601a      	str	r2, [r3, #0]
	if (mode == OUTPUT){
 8001bf8:	78bb      	ldrb	r3, [r7, #2]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d10a      	bne.n	8001c14 <GPIO_pinMode+0xb4>
		*CRX |= (0x2 << (4*(pinIndex)));
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	2202      	movs	r2, #2
 8001c06:	409a      	lsls	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e04b      	b.n	8001cac <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_FLOAT){
 8001c14:	78bb      	ldrb	r3, [r7, #2]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d10a      	bne.n	8001c30 <GPIO_pinMode+0xd0>
		*CRX |= (0x4 << (4*(pinIndex)));
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	2204      	movs	r2, #4
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e03d      	b.n	8001cac <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_PULLUP){
 8001c30:	78bb      	ldrb	r3, [r7, #2]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d113      	bne.n	8001c5e <GPIO_pinMode+0xfe>
		*CRX |= (0x8 << (4*(pinIndex)));
 8001c36:	7afb      	ldrb	r3, [r7, #11]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	601a      	str	r2, [r3, #0]
		SET_BIT(GPIOX->ODR, pinNumber);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	78fa      	ldrb	r2, [r7, #3]
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f202 	lsl.w	r2, r1, r2
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	e026      	b.n	8001cac <GPIO_pinMode+0x14c>
	}else if (mode == INPUT_PULLDOWN){
 8001c5e:	78bb      	ldrb	r3, [r7, #2]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d114      	bne.n	8001c8e <GPIO_pinMode+0x12e>
		*CRX |= (0x8 << (4*(pinIndex)));
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	43d2      	mvns	r2, r2
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	e00e      	b.n	8001cac <GPIO_pinMode+0x14c>
	}else if (mode == AF_PP){
 8001c8e:	78bb      	ldrb	r3, [r7, #2]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d10b      	bne.n	8001cac <GPIO_pinMode+0x14c>
		*CRX |= (0xB << (4*(pinIndex)));
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220b      	movs	r2, #11
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e000      	b.n	8001cac <GPIO_pinMode+0x14c>
		return;
 8001caa:	bf00      	nop

	}
}
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010c00 	.word	0x40010c00
 8001cc0:	40011000 	.word	0x40011000

08001cc4 <GPIO_digitalWrite>:

void GPIO_digitalWrite(GPIO_TypeDef *GPIOX, uint8_t pinNumber, PIN_LEVEL level){
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	70bb      	strb	r3, [r7, #2]
	if (pinNumber < 0 || pinNumber > 15){
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	2b0f      	cmp	r3, #15
 8001cd8:	d81a      	bhi.n	8001d10 <GPIO_digitalWrite+0x4c>
		return;
	}
	if (level == HIGH){
 8001cda:	78bb      	ldrb	r3, [r7, #2]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <GPIO_digitalWrite+0x30>
		SET_BIT(GPIOX->ODR, pinNumber);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	e00e      	b.n	8001d12 <GPIO_digitalWrite+0x4e>
	}else if(level == LOW){
 8001cf4:	78bb      	ldrb	r3, [r7, #2]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d10b      	bne.n	8001d12 <GPIO_digitalWrite+0x4e>
		CLEAR_BIT(GPIOX->ODR, pinNumber);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	43d2      	mvns	r2, r2
 8001d08:	401a      	ands	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	e000      	b.n	8001d12 <GPIO_digitalWrite+0x4e>
		return;
 8001d10:	bf00      	nop
	}
}
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
	...

08001d1c <__NVIC_EnableIRQ>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db0b      	blt.n	8001d46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4906      	ldr	r1, [pc, #24]	@ (8001d50 <__NVIC_EnableIRQ+0x34>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <TIM_initPWM>:
volatile void (*callback4)();
uint64_t millis = 0;
uint16_t trigTime_ms_global;
int isFirstTime = 1;

void TIM_initPWM(TIM_TypeDef *TIMX, uint8_t channel, float frequency) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	72fb      	strb	r3, [r7, #11]
	if (channel < 1 || channel > 4) {
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 81eb 	beq.w	8002140 <TIM_initPWM+0x3ec>
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	f200 81e7 	bhi.w	8002140 <TIM_initPWM+0x3ec>
		return;
	}
	// init clock and corresponding pin in the GPIO
	if (TIMX == TIM2) {
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d78:	d150      	bne.n	8001e1c <TIM_initPWM+0xc8>
		SET_BIT(RCC->APB1ENR, 0); // Enable TIM2 clock
 8001d7a:	4b9a      	ldr	r3, [pc, #616]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a99      	ldr	r2, [pc, #612]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // Enable GPIOA clock
 8001d86:	4b97      	ldr	r3, [pc, #604]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	4a96      	ldr	r2, [pc, #600]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	6193      	str	r3, [r2, #24]
		switch (channel) {
 8001d92:	7afb      	ldrb	r3, [r7, #11]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	f200 80e8 	bhi.w	8001f6c <TIM_initPWM+0x218>
 8001d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001da4 <TIM_initPWM+0x50>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001db5 	.word	0x08001db5
 8001da8:	08001dcf 	.word	0x08001dcf
 8001dac:	08001de9 	.word	0x08001de9
 8001db0:	08001e03 	.word	0x08001e03
		case 1: // PA0
			GPIOA->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8001db4:	4b8c      	ldr	r3, [pc, #560]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a8b      	ldr	r2, [pc, #556]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001dba:	f023 030f 	bic.w	r3, r3, #15
 8001dbe:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_CNF0_1); // 2 MHz, AF PP
 8001dc0:	4b89      	ldr	r3, [pc, #548]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a88      	ldr	r2, [pc, #544]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001dc6:	f043 030a 	orr.w	r3, r3, #10
 8001dca:	6013      	str	r3, [r2, #0]
			break;
 8001dcc:	e0ce      	b.n	8001f6c <TIM_initPWM+0x218>
		case 2: // PA1
			GPIOA->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);
 8001dce:	4b86      	ldr	r3, [pc, #536]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a85      	ldr	r2, [pc, #532]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001dd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dd8:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1);
 8001dda:	4b83      	ldr	r3, [pc, #524]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a82      	ldr	r2, [pc, #520]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001de0:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001de4:	6013      	str	r3, [r2, #0]
			break;
 8001de6:	e0c1      	b.n	8001f6c <TIM_initPWM+0x218>
		case 3: // PA2
			GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);
 8001de8:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a7e      	ldr	r2, [pc, #504]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001dee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001df2:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_CNF2_1);
 8001df4:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a7b      	ldr	r2, [pc, #492]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001dfa:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 8001dfe:	6013      	str	r3, [r2, #0]
			break;
 8001e00:	e0b4      	b.n	8001f6c <TIM_initPWM+0x218>
		case 4: // PA3
			GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 8001e02:	4b79      	ldr	r3, [pc, #484]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a78      	ldr	r2, [pc, #480]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001e0c:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE3_1 | GPIO_CRL_CNF3_1);
 8001e0e:	4b76      	ldr	r3, [pc, #472]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a75      	ldr	r2, [pc, #468]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e14:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8001e18:	6013      	str	r3, [r2, #0]
			break;
 8001e1a:	e0a7      	b.n	8001f6c <TIM_initPWM+0x218>
		}
	} else if (TIMX == TIM3) {
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a73      	ldr	r2, [pc, #460]	@ (8001fec <TIM_initPWM+0x298>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d14f      	bne.n	8001ec4 <TIM_initPWM+0x170>
		SET_BIT(RCC->APB1ENR, 1); // Enable TIM3 clock
 8001e24:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN; // Enable GPIOA & GPIOB
 8001e30:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a6b      	ldr	r2, [pc, #428]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001e36:	f043 030c 	orr.w	r3, r3, #12
 8001e3a:	6193      	str	r3, [r2, #24]
		switch (channel) {
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	f200 8093 	bhi.w	8001f6c <TIM_initPWM+0x218>
 8001e46:	a201      	add	r2, pc, #4	@ (adr r2, 8001e4c <TIM_initPWM+0xf8>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	08001e77 	.word	0x08001e77
 8001e54:	08001e91 	.word	0x08001e91
 8001e58:	08001eab 	.word	0x08001eab
		case 1: // PA6
			GPIOA->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8001e5c:	4b62      	ldr	r3, [pc, #392]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a61      	ldr	r2, [pc, #388]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e62:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001e66:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1);
 8001e68:	4b5f      	ldr	r3, [pc, #380]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5e      	ldr	r2, [pc, #376]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e6e:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8001e72:	6013      	str	r3, [r2, #0]
			break;
 8001e74:	e07a      	b.n	8001f6c <TIM_initPWM+0x218>
		case 2: // PA7
			GPIOA->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8001e76:	4b5c      	ldr	r3, [pc, #368]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e7c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001e80:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1);
 8001e82:	4b59      	ldr	r3, [pc, #356]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a58      	ldr	r2, [pc, #352]	@ (8001fe8 <TIM_initPWM+0x294>)
 8001e88:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 8001e8c:	6013      	str	r3, [r2, #0]
			break;
 8001e8e:	e06d      	b.n	8001f6c <TIM_initPWM+0x218>
		case 3: // PB0
			GPIOB->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8001e90:	4b57      	ldr	r3, [pc, #348]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a56      	ldr	r2, [pc, #344]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001e96:	f023 030f 	bic.w	r3, r3, #15
 8001e9a:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_CNF0_1);
 8001e9c:	4b54      	ldr	r3, [pc, #336]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a53      	ldr	r2, [pc, #332]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001ea2:	f043 030a 	orr.w	r3, r3, #10
 8001ea6:	6013      	str	r3, [r2, #0]
			break;
 8001ea8:	e060      	b.n	8001f6c <TIM_initPWM+0x218>
		case 4: // PB1
			GPIOB->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1);
 8001eaa:	4b51      	ldr	r3, [pc, #324]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a50      	ldr	r2, [pc, #320]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001eb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001eb4:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1);
 8001eb6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a4d      	ldr	r2, [pc, #308]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001ebc:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001ec0:	6013      	str	r3, [r2, #0]
			break;
 8001ec2:	e053      	b.n	8001f6c <TIM_initPWM+0x218>
		}
	} else if (TIMX == TIM4) {
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff4 <TIM_initPWM+0x2a0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d14f      	bne.n	8001f6c <TIM_initPWM+0x218>
		SET_BIT(RCC->APB1ENR, 2); // Enable TIM4 clock
 8001ecc:	4b45      	ldr	r3, [pc, #276]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	4a44      	ldr	r2, [pc, #272]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; // Enable GPIOB clock
 8001ed8:	4b42      	ldr	r3, [pc, #264]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a41      	ldr	r2, [pc, #260]	@ (8001fe4 <TIM_initPWM+0x290>)
 8001ede:	f043 0308 	orr.w	r3, r3, #8
 8001ee2:	6193      	str	r3, [r2, #24]
		switch (channel) {
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d83f      	bhi.n	8001f6c <TIM_initPWM+0x218>
 8001eec:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef4 <TIM_initPWM+0x1a0>)
 8001eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef2:	bf00      	nop
 8001ef4:	08001f05 	.word	0x08001f05
 8001ef8:	08001f1f 	.word	0x08001f1f
 8001efc:	08001f39 	.word	0x08001f39
 8001f00:	08001f53 	.word	0x08001f53
		case 1: // PB6
			GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8001f04:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a39      	ldr	r2, [pc, #228]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f0a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001f0e:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1);
 8001f10:	4b37      	ldr	r3, [pc, #220]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a36      	ldr	r2, [pc, #216]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f16:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8001f1a:	6013      	str	r3, [r2, #0]
			break;
 8001f1c:	e026      	b.n	8001f6c <TIM_initPWM+0x218>
		case 2: // PB7
			GPIOB->CRL &= ~(GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8001f1e:	4b34      	ldr	r3, [pc, #208]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a33      	ldr	r2, [pc, #204]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f24:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001f28:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1);
 8001f2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a30      	ldr	r2, [pc, #192]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f30:	f043 4320 	orr.w	r3, r3, #2684354560	@ 0xa0000000
 8001f34:	6013      	str	r3, [r2, #0]
			break;
 8001f36:	e019      	b.n	8001f6c <TIM_initPWM+0x218>
		case 3: // PB8
			GPIOB->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8);
 8001f38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f3e:	f023 030f 	bic.w	r3, r3, #15
 8001f42:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= (GPIO_CRH_MODE8_1 | GPIO_CRH_CNF8_1);
 8001f44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a29      	ldr	r2, [pc, #164]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f4a:	f043 030a 	orr.w	r3, r3, #10
 8001f4e:	6053      	str	r3, [r2, #4]
			break;
 8001f50:	e00c      	b.n	8001f6c <TIM_initPWM+0x218>
		case 4: // PB9
			GPIOB->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 8001f52:	4b27      	ldr	r3, [pc, #156]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a26      	ldr	r2, [pc, #152]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f5c:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= (GPIO_CRH_MODE9_1 | GPIO_CRH_CNF9_1);
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a23      	ldr	r2, [pc, #140]	@ (8001ff0 <TIM_initPWM+0x29c>)
 8001f64:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001f68:	6053      	str	r3, [r2, #4]
			break;
 8001f6a:	bf00      	nop
		}
	}

	// direction upward
	CLEAR_BIT(TIMX->CR1, 4);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 0210 	bic.w	r2, r3, #16
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	601a      	str	r2, [r3, #0]
	// mode 'edge aligned'
	CLEAR_BIT(TIMX->CR1, 5);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 0220 	bic.w	r2, r3, #32
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(TIMX->CR1, 6);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]
	// set the ARR preload
	SET_BIT(TIMX->CR1, 7);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]
	//enable the capture compare corresponding pin
	SET_BIT(TIMX->CCER, (4 * (channel - 1)));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	7afa      	ldrb	r2, [r7, #11]
 8001fa2:	3a01      	subs	r2, #1
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fac:	431a      	orrs	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	621a      	str	r2, [r3, #32]
	// choose the polarity of the pin to active high
	CLEAR_BIT(TIMX->CCER, (4 * (channel - 1) + 1));
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	7afa      	ldrb	r2, [r7, #11]
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	0092      	lsls	r2, r2, #2
 8001fbc:	3201      	adds	r2, #1
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	43d2      	mvns	r2, r2
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	621a      	str	r2, [r3, #32]

	volatile uint32_t *CCMRX;
	uint8_t modChannel = 1;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	76fb      	strb	r3, [r7, #27]
	if (channel <= 2) {
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d810      	bhi.n	8001ff8 <TIM_initPWM+0x2a4>
		CCMRX = &TIMX->CCMR1;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3318      	adds	r3, #24
 8001fda:	61fb      	str	r3, [r7, #28]
		modChannel = channel;
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	76fb      	strb	r3, [r7, #27]
 8001fe0:	e010      	b.n	8002004 <TIM_initPWM+0x2b0>
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010800 	.word	0x40010800
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	40000800 	.word	0x40000800
	} else {
		CCMRX = &TIMX->CCMR2;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	331c      	adds	r3, #28
 8001ffc:	61fb      	str	r3, [r7, #28]
		modChannel = channel - 2;
 8001ffe:	7afb      	ldrb	r3, [r7, #11]
 8002000:	3b02      	subs	r3, #2
 8002002:	76fb      	strb	r3, [r7, #27]
	}
	// set the channel mode to be output
	CLEAR_BIT(*CCMRX, (8 * (modChannel - 1)));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	7efa      	ldrb	r2, [r7, #27]
 800200a:	3a01      	subs	r2, #1
 800200c:	00d2      	lsls	r2, r2, #3
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f202 	lsl.w	r2, r1, r2
 8002014:	43d2      	mvns	r2, r2
 8002016:	401a      	ands	r2, r3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(*CCMRX, (8 * (modChannel - 1) + 1));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	7efa      	ldrb	r2, [r7, #27]
 8002022:	3a01      	subs	r2, #1
 8002024:	00d2      	lsls	r2, r2, #3
 8002026:	3201      	adds	r2, #1
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	43d2      	mvns	r2, r2
 8002030:	401a      	ands	r2, r3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	601a      	str	r2, [r3, #0]
	// set the channel preload enable
	SET_BIT(*CCMRX, (8 * (modChannel - 1) + 3));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	7efa      	ldrb	r2, [r7, #27]
 800203c:	3a01      	subs	r2, #1
 800203e:	00d2      	lsls	r2, r2, #3
 8002040:	3203      	adds	r2, #3
 8002042:	2101      	movs	r1, #1
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	431a      	orrs	r2, r3
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	601a      	str	r2, [r3, #0]
	// select PWM mode 1
	CLEAR_BIT(*CCMRX, (8 * (modChannel - 1) + 4));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	7efa      	ldrb	r2, [r7, #27]
 8002054:	3a01      	subs	r2, #1
 8002056:	00d2      	lsls	r2, r2, #3
 8002058:	3204      	adds	r2, #4
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	43d2      	mvns	r2, r2
 8002062:	401a      	ands	r2, r3
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	601a      	str	r2, [r3, #0]
	SET_BIT(*CCMRX, (8 * (modChannel - 1) + 5));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	7efa      	ldrb	r2, [r7, #27]
 800206e:	3a01      	subs	r2, #1
 8002070:	00d2      	lsls	r2, r2, #3
 8002072:	3205      	adds	r2, #5
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	431a      	orrs	r2, r3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	601a      	str	r2, [r3, #0]
	SET_BIT(*CCMRX, (8 * (modChannel - 1) + 6));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	7efa      	ldrb	r2, [r7, #27]
 8002086:	3a01      	subs	r2, #1
 8002088:	00d2      	lsls	r2, r2, #3
 800208a:	3206      	adds	r2, #6
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f202 	lsl.w	r2, r1, r2
 8002092:	431a      	orrs	r2, r3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	601a      	str	r2, [r3, #0]

	// setting the psc with zero
	TIMX->PSC = 0;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	629a      	str	r2, [r3, #40]	@ 0x28
	// calculating prescaler and arr for specific frequency
	float currentARR = (8000000 / ((frequency * (TIMX->PSC + 1)))) - 1;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a2:	3301      	adds	r3, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fdcf 	bl	8000c48 <__aeabi_ui2f>
 80020aa:	4603      	mov	r3, r0
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fe22 	bl	8000cf8 <__aeabi_fmul>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4619      	mov	r1, r3
 80020b8:	4823      	ldr	r0, [pc, #140]	@ (8002148 <TIM_initPWM+0x3f4>)
 80020ba:	f7fe fed1 	bl	8000e60 <__aeabi_fdiv>
 80020be:	4603      	mov	r3, r0
 80020c0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fd0d 	bl	8000ae4 <__aeabi_fsub>
 80020ca:	4603      	mov	r3, r0
 80020cc:	617b      	str	r3, [r7, #20]
	while (currentARR >= 65536) {
 80020ce:	e01c      	b.n	800210a <TIM_initPWM+0x3b6>
		TIMX->PSC += 1;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	629a      	str	r2, [r3, #40]	@ 0x28
		currentARR = (8000000 / ((frequency * (TIMX->PSC + 1)))) - 1;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	3301      	adds	r3, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fdb1 	bl	8000c48 <__aeabi_ui2f>
 80020e6:	4603      	mov	r3, r0
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fe04 	bl	8000cf8 <__aeabi_fmul>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4619      	mov	r1, r3
 80020f4:	4814      	ldr	r0, [pc, #80]	@ (8002148 <TIM_initPWM+0x3f4>)
 80020f6:	f7fe feb3 	bl	8000e60 <__aeabi_fdiv>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fcef 	bl	8000ae4 <__aeabi_fsub>
 8002106:	4603      	mov	r3, r0
 8002108:	617b      	str	r3, [r7, #20]
	while (currentARR >= 65536) {
 800210a:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7fe ffa4 	bl	800105c <__aeabi_fcmpge>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1da      	bne.n	80020d0 <TIM_initPWM+0x37c>
	}
	TIMX->ARR = currentARR;
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7fe ffb2 	bl	8001084 <__aeabi_f2uiz>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	62da      	str	r2, [r3, #44]	@ 0x2c
	SET_BIT(TIMX->EGR, 0);  // UG: Update Generation
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	615a      	str	r2, [r3, #20]
	// start counting
	SET_BIT(TIMX->CR1, 0);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e000      	b.n	8002142 <TIM_initPWM+0x3ee>
		return;
 8002140:	bf00      	nop
}
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	4af42400 	.word	0x4af42400

0800214c <TIM_writePWM>:

void TIM_writePWM(TIM_TypeDef *TIMX, uint8_t channel, float dutyCycle) {
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	460b      	mov	r3, r1
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	72fb      	strb	r3, [r7, #11]
	if (channel < 1 || channel > 4 || dutyCycle < 0 || dutyCycle > 100) {
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d044      	beq.n	80021ea <TIM_writePWM+0x9e>
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	2b04      	cmp	r3, #4
 8002164:	d841      	bhi.n	80021ea <TIM_writePWM+0x9e>
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe ff62 	bl	8001034 <__aeabi_fcmplt>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d139      	bne.n	80021ea <TIM_writePWM+0x9e>
 8002176:	491f      	ldr	r1, [pc, #124]	@ (80021f4 <TIM_writePWM+0xa8>)
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe ff79 	bl	8001070 <__aeabi_fcmpgt>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d132      	bne.n	80021ea <TIM_writePWM+0x9e>
		return;
	}
	volatile uint32_t *CCRX;
	if (channel == 1) {
 8002184:	7afb      	ldrb	r3, [r7, #11]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d103      	bne.n	8002192 <TIM_writePWM+0x46>
		CCRX = &TIMX->CCR1;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3334      	adds	r3, #52	@ 0x34
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e013      	b.n	80021ba <TIM_writePWM+0x6e>
	} else if (channel == 2) {
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d103      	bne.n	80021a0 <TIM_writePWM+0x54>
		CCRX = &TIMX->CCR2;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3338      	adds	r3, #56	@ 0x38
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e00c      	b.n	80021ba <TIM_writePWM+0x6e>
	} else if (channel == 3) {
 80021a0:	7afb      	ldrb	r3, [r7, #11]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d103      	bne.n	80021ae <TIM_writePWM+0x62>
		CCRX = &TIMX->CCR3;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	333c      	adds	r3, #60	@ 0x3c
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e005      	b.n	80021ba <TIM_writePWM+0x6e>
	} else if (channel == 4) {
 80021ae:	7afb      	ldrb	r3, [r7, #11]
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d102      	bne.n	80021ba <TIM_writePWM+0x6e>
		CCRX = &TIMX->CCR4;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3340      	adds	r3, #64	@ 0x40
 80021b8:	617b      	str	r3, [r7, #20]
	}
	*CCRX = (dutyCycle / 100) * (TIMX->ARR);
 80021ba:	490e      	ldr	r1, [pc, #56]	@ (80021f4 <TIM_writePWM+0xa8>)
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7fe fe4f 	bl	8000e60 <__aeabi_fdiv>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461c      	mov	r4, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fd3c 	bl	8000c48 <__aeabi_ui2f>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4619      	mov	r1, r3
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7fe fd8f 	bl	8000cf8 <__aeabi_fmul>
 80021da:	4603      	mov	r3, r0
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe ff51 	bl	8001084 <__aeabi_f2uiz>
 80021e2:	4602      	mov	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e000      	b.n	80021ec <TIM_writePWM+0xa0>
		return;
 80021ea:	bf00      	nop
}
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd90      	pop	{r4, r7, pc}
 80021f2:	bf00      	nop
 80021f4:	42c80000 	.word	0x42c80000

080021f8 <enableTimerClock>:
		TIM_delay(TIMX, chunk);
		delay_ms -= chunk;
	}
}

void enableTimerClock(TIM_TypeDef *TIMx) {
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	switch ((uint32_t) TIMx) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a1a      	ldr	r2, [pc, #104]	@ (800226c <enableTimerClock+0x74>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00f      	beq.n	8002228 <enableTimerClock+0x30>
 8002208:	4a18      	ldr	r2, [pc, #96]	@ (800226c <enableTimerClock+0x74>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d828      	bhi.n	8002260 <enableTimerClock+0x68>
 800220e:	4a18      	ldr	r2, [pc, #96]	@ (8002270 <enableTimerClock+0x78>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d01e      	beq.n	8002252 <enableTimerClock+0x5a>
 8002214:	4a16      	ldr	r2, [pc, #88]	@ (8002270 <enableTimerClock+0x78>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d822      	bhi.n	8002260 <enableTimerClock+0x68>
 800221a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800221e:	d00a      	beq.n	8002236 <enableTimerClock+0x3e>
 8002220:	4a14      	ldr	r2, [pc, #80]	@ (8002274 <enableTimerClock+0x7c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00e      	beq.n	8002244 <enableTimerClock+0x4c>
		break;
	case (uint32_t) TIM4:
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
		break;
	default:
		break;
 8002226:	e01b      	b.n	8002260 <enableTimerClock+0x68>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8002228:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <enableTimerClock+0x80>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a12      	ldr	r2, [pc, #72]	@ (8002278 <enableTimerClock+0x80>)
 800222e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002232:	6193      	str	r3, [r2, #24]
		break;
 8002234:	e015      	b.n	8002262 <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <enableTimerClock+0x80>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a0f      	ldr	r2, [pc, #60]	@ (8002278 <enableTimerClock+0x80>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	61d3      	str	r3, [r2, #28]
		break;
 8002242:	e00e      	b.n	8002262 <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002244:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <enableTimerClock+0x80>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	4a0b      	ldr	r2, [pc, #44]	@ (8002278 <enableTimerClock+0x80>)
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	61d3      	str	r3, [r2, #28]
		break;
 8002250:	e007      	b.n	8002262 <enableTimerClock+0x6a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <enableTimerClock+0x80>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a08      	ldr	r2, [pc, #32]	@ (8002278 <enableTimerClock+0x80>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	61d3      	str	r3, [r2, #28]
		break;
 800225e:	e000      	b.n	8002262 <enableTimerClock+0x6a>
		break;
 8002260:	bf00      	nop
	}
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	40012c00 	.word	0x40012c00
 8002270:	40000800 	.word	0x40000800
 8002274:	40000400 	.word	0x40000400
 8002278:	40021000 	.word	0x40021000

0800227c <TIM_initMillis>:
	}

	// start counting
	SET_BIT(TIMX->CR1, 0);
}
void TIM_initMillis(TIM_TypeDef *TIMX, uint16_t trigTime_ms) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
	enableTimerClock(TIMX);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffb5 	bl	80021f8 <enableTimerClock>
	TIMX->CR1 = 0;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
	trigTime_ms_global = trigTime_ms;
 8002294:	4a23      	ldr	r2, [pc, #140]	@ (8002324 <TIM_initMillis+0xa8>)
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	8013      	strh	r3, [r2, #0]
	TIMX->CCER |= TIM_CCER_CC1E;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	621a      	str	r2, [r3, #32]
	TIMX->DIER |= TIM_DIER_CC1IE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f043 0202 	orr.w	r2, r3, #2
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60da      	str	r2, [r3, #12]
	TIMX->CCMR1 &= ~TIM_CCMR1_CC1S;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	619a      	str	r2, [r3, #24]
	TIMX->CNT = 0;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	625a      	str	r2, [r3, #36]	@ 0x24
	TIMX->PSC = 8000 - 1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80022ca:	629a      	str	r2, [r3, #40]	@ 0x28
	TIMX->ARR = (60000) - 1;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80022d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (TIMX == TIM2) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022da:	d103      	bne.n	80022e4 <TIM_initMillis+0x68>
		NVIC_EnableIRQ(TIM2_IRQn);
 80022dc:	201c      	movs	r0, #28
 80022de:	f7ff fd1d 	bl	8001d1c <__NVIC_EnableIRQ>
 80022e2:	e00e      	b.n	8002302 <TIM_initMillis+0x86>
	} else if (TIMX == TIM3) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <TIM_initMillis+0xac>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d103      	bne.n	80022f4 <TIM_initMillis+0x78>
		NVIC_EnableIRQ(TIM3_IRQn);
 80022ec:	201d      	movs	r0, #29
 80022ee:	f7ff fd15 	bl	8001d1c <__NVIC_EnableIRQ>
 80022f2:	e006      	b.n	8002302 <TIM_initMillis+0x86>
	} else if (TIMX == TIM4) {
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <TIM_initMillis+0xb0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d102      	bne.n	8002302 <TIM_initMillis+0x86>
		NVIC_EnableIRQ(TIM4_IRQn);
 80022fc:	201e      	movs	r0, #30
 80022fe:	f7ff fd0d 	bl	8001d1c <__NVIC_EnableIRQ>
	}

	TIMX->CR1 |= TIM_CR1_CEN;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
	TIMX->CCR1 = TIMX->CNT + trigTime_ms_global;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <TIM_initMillis+0xa8>)
 8002314:	8812      	ldrh	r2, [r2, #0]
 8002316:	441a      	add	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200002f8 	.word	0x200002f8
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800

08002330 <TIM_Millis>:

uint64_t TIM_Millis() {
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
	if (isFirstTime) {
 8002334:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <TIM_Millis+0x30>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <TIM_Millis+0x20>
		isFirstTime = 0;
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <TIM_Millis+0x30>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
		millis = 0;
 8002342:	4908      	ldr	r1, [pc, #32]	@ (8002364 <TIM_Millis+0x34>)
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return millis;
 8002350:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <TIM_Millis+0x34>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	2000000c 	.word	0x2000000c
 8002364:	200002f0 	.word	0x200002f0

08002368 <TIM2_IRQHandler>:

void TIM2_IRQHandler() {
 8002368:	b598      	push	{r3, r4, r7, lr}
 800236a:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC1IF) {
 800236c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01a      	beq.n	80023b0 <TIM2_IRQHandler+0x48>
		TIM2->SR &= ~TIM_SR_CC1IF;
 800237a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002384:	f023 0302 	bic.w	r3, r3, #2
 8002388:	6113      	str	r3, [r2, #16]
		TIM2->CCR1 = TIM2->CNT + trigTime_ms_global;
 800238a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <TIM2_IRQHandler+0xa0>)
 8002392:	8812      	ldrh	r2, [r2, #0]
 8002394:	4614      	mov	r4, r2
 8002396:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800239a:	4423      	add	r3, r4
 800239c:	6353      	str	r3, [r2, #52]	@ 0x34
		millis++;
 800239e:	4b1b      	ldr	r3, [pc, #108]	@ (800240c <TIM2_IRQHandler+0xa4>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	1c50      	adds	r0, r2, #1
 80023a6:	f143 0100 	adc.w	r1, r3, #0
 80023aa:	4b18      	ldr	r3, [pc, #96]	@ (800240c <TIM2_IRQHandler+0xa4>)
 80023ac:	e9c3 0100 	strd	r0, r1, [r3]
//		if (isFirstTime) {
//			isFirstTime = 0;
//			millis = 0;
//		}
	}
	if ((TIM2->SR & (1 << 0)) == 1) { // check the uif flag
 80023b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d122      	bne.n	8002404 <TIM2_IRQHandler+0x9c>
		TIM2->SR &= ~(1 << 0); // clear the uif
 80023be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6113      	str	r3, [r2, #16]
		counter2++;
 80023ce:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <TIM2_IRQHandler+0xa8>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3301      	adds	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <TIM2_IRQHandler+0xa8>)
 80023da:	801a      	strh	r2, [r3, #0]
		if (counter2 == n2) {
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <TIM2_IRQHandler+0xa8>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <TIM2_IRQHandler+0xac>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d10b      	bne.n	8002404 <TIM2_IRQHandler+0x9c>
			counter2 = 0;
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <TIM2_IRQHandler+0xa8>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	801a      	strh	r2, [r3, #0]
			TIM2->CNT = preload2; // set the preload
 80023f2:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <TIM2_IRQHandler+0xb0>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24
			callback2();
 80023fe:	4b07      	ldr	r3, [pc, #28]	@ (800241c <TIM2_IRQHandler+0xb4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4798      	blx	r3
		}
	}
}
 8002404:	bf00      	nop
 8002406:	bd98      	pop	{r3, r4, r7, pc}
 8002408:	200002f8 	.word	0x200002f8
 800240c:	200002f0 	.word	0x200002f0
 8002410:	200002d8 	.word	0x200002d8
 8002414:	200002d2 	.word	0x200002d2
 8002418:	200002cc 	.word	0x200002cc
 800241c:	200002e0 	.word	0x200002e0

08002420 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 8002420:	b598      	push	{r3, r4, r7, lr}
 8002422:	af00      	add	r7, sp, #0
	if ((TIM3->SR & (1 << 0)) == 1) { // check the uif flag
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <TIM3_IRQHandler+0x9c>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d142      	bne.n	80024b6 <TIM3_IRQHandler+0x96>
		if (TIM3->SR & TIM_SR_CC1IF) {
 8002430:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <TIM3_IRQHandler+0x9c>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d016      	beq.n	800246a <TIM3_IRQHandler+0x4a>
			TIM3->SR &= ~TIM_SR_CC1IF;
 800243c:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <TIM3_IRQHandler+0x9c>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4a1e      	ldr	r2, [pc, #120]	@ (80024bc <TIM3_IRQHandler+0x9c>)
 8002442:	f023 0302 	bic.w	r3, r3, #2
 8002446:	6113      	str	r3, [r2, #16]
			TIM3->CCR1 = TIM3->CNT + trigTime_ms_global;
 8002448:	4b1c      	ldr	r3, [pc, #112]	@ (80024bc <TIM3_IRQHandler+0x9c>)
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	4a1c      	ldr	r2, [pc, #112]	@ (80024c0 <TIM3_IRQHandler+0xa0>)
 800244e:	8812      	ldrh	r2, [r2, #0]
 8002450:	4614      	mov	r4, r2
 8002452:	4a1a      	ldr	r2, [pc, #104]	@ (80024bc <TIM3_IRQHandler+0x9c>)
 8002454:	4423      	add	r3, r4
 8002456:	6353      	str	r3, [r2, #52]	@ 0x34
			millis++;
 8002458:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <TIM3_IRQHandler+0xa4>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	1c50      	adds	r0, r2, #1
 8002460:	f143 0100 	adc.w	r1, r3, #0
 8002464:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <TIM3_IRQHandler+0xa4>)
 8002466:	e9c3 0100 	strd	r0, r1, [r3]
//			if (isFirstTime) {
//				isFirstTime = 0;
//				millis = 0;
//			}
		}
		if ((TIM3->SR & (1 << 0)) == 1) {
 800246a:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <TIM3_IRQHandler+0x9c>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d11f      	bne.n	80024b6 <TIM3_IRQHandler+0x96>
			TIM3->SR &= ~(1 << 0); // clear the uif
 8002476:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <TIM3_IRQHandler+0x9c>)
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	4a10      	ldr	r2, [pc, #64]	@ (80024bc <TIM3_IRQHandler+0x9c>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6113      	str	r3, [r2, #16]
			counter3++;
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <TIM3_IRQHandler+0xa8>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <TIM3_IRQHandler+0xa8>)
 800248e:	801a      	strh	r2, [r3, #0]
			if (counter3 == n3) {
 8002490:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <TIM3_IRQHandler+0xa8>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b29a      	uxth	r2, r3
 8002496:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <TIM3_IRQHandler+0xac>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	429a      	cmp	r2, r3
 800249e:	d10a      	bne.n	80024b6 <TIM3_IRQHandler+0x96>
				counter3 = 0;
 80024a0:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <TIM3_IRQHandler+0xa8>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	801a      	strh	r2, [r3, #0]
				TIM3->CNT = preload3; // set the preload
 80024a6:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <TIM3_IRQHandler+0xb0>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <TIM3_IRQHandler+0x9c>)
 80024ae:	625a      	str	r2, [r3, #36]	@ 0x24
				callback3();
 80024b0:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <TIM3_IRQHandler+0xb4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4798      	blx	r3
			}
		}
	}
}
 80024b6:	bf00      	nop
 80024b8:	bd98      	pop	{r3, r4, r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40000400 	.word	0x40000400
 80024c0:	200002f8 	.word	0x200002f8
 80024c4:	200002f0 	.word	0x200002f0
 80024c8:	200002da 	.word	0x200002da
 80024cc:	200002d4 	.word	0x200002d4
 80024d0:	200002ce 	.word	0x200002ce
 80024d4:	200002e4 	.word	0x200002e4

080024d8 <TIM4_IRQHandler>:

void TIM4_IRQHandler() {
 80024d8:	b598      	push	{r3, r4, r7, lr}
 80024da:	af00      	add	r7, sp, #0
	if ((TIM4->SR & (1 << 0)) == 1) { // check the uif flag
 80024dc:	4b25      	ldr	r3, [pc, #148]	@ (8002574 <TIM4_IRQHandler+0x9c>)
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d142      	bne.n	800256e <TIM4_IRQHandler+0x96>
		if (TIM4->SR & TIM_SR_CC1IF) {
 80024e8:	4b22      	ldr	r3, [pc, #136]	@ (8002574 <TIM4_IRQHandler+0x9c>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d016      	beq.n	8002522 <TIM4_IRQHandler+0x4a>
			TIM4->SR &= ~TIM_SR_CC1IF;
 80024f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002574 <TIM4_IRQHandler+0x9c>)
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002574 <TIM4_IRQHandler+0x9c>)
 80024fa:	f023 0302 	bic.w	r3, r3, #2
 80024fe:	6113      	str	r3, [r2, #16]
			TIM4->CCR1 = TIM4->CNT + trigTime_ms_global;
 8002500:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <TIM4_IRQHandler+0x9c>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	4a1c      	ldr	r2, [pc, #112]	@ (8002578 <TIM4_IRQHandler+0xa0>)
 8002506:	8812      	ldrh	r2, [r2, #0]
 8002508:	4614      	mov	r4, r2
 800250a:	4a1a      	ldr	r2, [pc, #104]	@ (8002574 <TIM4_IRQHandler+0x9c>)
 800250c:	4423      	add	r3, r4
 800250e:	6353      	str	r3, [r2, #52]	@ 0x34
			millis++;
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <TIM4_IRQHandler+0xa4>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	1c50      	adds	r0, r2, #1
 8002518:	f143 0100 	adc.w	r1, r3, #0
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <TIM4_IRQHandler+0xa4>)
 800251e:	e9c3 0100 	strd	r0, r1, [r3]
//			if (isFirstTime) {
//				isFirstTime = 0;
//				millis = 0;
//			}
		}
		if ((TIM4->SR & (1 << 0)) == 1) {
 8002522:	4b14      	ldr	r3, [pc, #80]	@ (8002574 <TIM4_IRQHandler+0x9c>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d11f      	bne.n	800256e <TIM4_IRQHandler+0x96>
			TIM4->SR &= ~(1 << 0); // clear the uif
 800252e:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <TIM4_IRQHandler+0x9c>)
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	4a10      	ldr	r2, [pc, #64]	@ (8002574 <TIM4_IRQHandler+0x9c>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6113      	str	r3, [r2, #16]
			counter4++;
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <TIM4_IRQHandler+0xa8>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	3301      	adds	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <TIM4_IRQHandler+0xa8>)
 8002546:	801a      	strh	r2, [r3, #0]
			if (counter4 == n4) {
 8002548:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <TIM4_IRQHandler+0xa8>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29a      	uxth	r2, r3
 800254e:	4b0d      	ldr	r3, [pc, #52]	@ (8002584 <TIM4_IRQHandler+0xac>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	429a      	cmp	r2, r3
 8002556:	d10a      	bne.n	800256e <TIM4_IRQHandler+0x96>
				counter4 = 0;
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <TIM4_IRQHandler+0xa8>)
 800255a:	2200      	movs	r2, #0
 800255c:	801a      	strh	r2, [r3, #0]
				TIM4->CNT = preload4; // set the preload
 800255e:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <TIM4_IRQHandler+0xb0>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b03      	ldr	r3, [pc, #12]	@ (8002574 <TIM4_IRQHandler+0x9c>)
 8002566:	625a      	str	r2, [r3, #36]	@ 0x24
				callback4();
 8002568:	4b08      	ldr	r3, [pc, #32]	@ (800258c <TIM4_IRQHandler+0xb4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4798      	blx	r3
			}
		}
	}
}
 800256e:	bf00      	nop
 8002570:	bd98      	pop	{r3, r4, r7, pc}
 8002572:	bf00      	nop
 8002574:	40000800 	.word	0x40000800
 8002578:	200002f8 	.word	0x200002f8
 800257c:	200002f0 	.word	0x200002f0
 8002580:	200002dc 	.word	0x200002dc
 8002584:	200002d6 	.word	0x200002d6
 8002588:	200002d0 	.word	0x200002d0
 800258c:	200002e8 	.word	0x200002e8

08002590 <atof>:
 8002590:	2100      	movs	r1, #0
 8002592:	f000 bdf9 	b.w	8003188 <strtod>

08002596 <sulp>:
 8002596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800259a:	460f      	mov	r7, r1
 800259c:	4690      	mov	r8, r2
 800259e:	f001 ff75 	bl	800448c <__ulp>
 80025a2:	4604      	mov	r4, r0
 80025a4:	460d      	mov	r5, r1
 80025a6:	f1b8 0f00 	cmp.w	r8, #0
 80025aa:	d011      	beq.n	80025d0 <sulp+0x3a>
 80025ac:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80025b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	dd0b      	ble.n	80025d0 <sulp+0x3a>
 80025b8:	2400      	movs	r4, #0
 80025ba:	051b      	lsls	r3, r3, #20
 80025bc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80025c0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80025c4:	4622      	mov	r2, r4
 80025c6:	462b      	mov	r3, r5
 80025c8:	f7fd ff7e 	bl	80004c8 <__aeabi_dmul>
 80025cc:	4604      	mov	r4, r0
 80025ce:	460d      	mov	r5, r1
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025d8 <_strtod_l>:
 80025d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025dc:	b09f      	sub	sp, #124	@ 0x7c
 80025de:	9217      	str	r2, [sp, #92]	@ 0x5c
 80025e0:	2200      	movs	r2, #0
 80025e2:	460c      	mov	r4, r1
 80025e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80025e6:	f04f 0a00 	mov.w	sl, #0
 80025ea:	f04f 0b00 	mov.w	fp, #0
 80025ee:	460a      	mov	r2, r1
 80025f0:	9005      	str	r0, [sp, #20]
 80025f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80025f4:	7811      	ldrb	r1, [r2, #0]
 80025f6:	292b      	cmp	r1, #43	@ 0x2b
 80025f8:	d048      	beq.n	800268c <_strtod_l+0xb4>
 80025fa:	d836      	bhi.n	800266a <_strtod_l+0x92>
 80025fc:	290d      	cmp	r1, #13
 80025fe:	d830      	bhi.n	8002662 <_strtod_l+0x8a>
 8002600:	2908      	cmp	r1, #8
 8002602:	d830      	bhi.n	8002666 <_strtod_l+0x8e>
 8002604:	2900      	cmp	r1, #0
 8002606:	d039      	beq.n	800267c <_strtod_l+0xa4>
 8002608:	2200      	movs	r2, #0
 800260a:	920e      	str	r2, [sp, #56]	@ 0x38
 800260c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800260e:	782a      	ldrb	r2, [r5, #0]
 8002610:	2a30      	cmp	r2, #48	@ 0x30
 8002612:	f040 80b0 	bne.w	8002776 <_strtod_l+0x19e>
 8002616:	786a      	ldrb	r2, [r5, #1]
 8002618:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800261c:	2a58      	cmp	r2, #88	@ 0x58
 800261e:	d16c      	bne.n	80026fa <_strtod_l+0x122>
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002624:	4a8f      	ldr	r2, [pc, #572]	@ (8002864 <_strtod_l+0x28c>)
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	ab1a      	add	r3, sp, #104	@ 0x68
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	9805      	ldr	r0, [sp, #20]
 800262e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8002630:	a919      	add	r1, sp, #100	@ 0x64
 8002632:	f001 f82d 	bl	8003690 <__gethex>
 8002636:	f010 060f 	ands.w	r6, r0, #15
 800263a:	4604      	mov	r4, r0
 800263c:	d005      	beq.n	800264a <_strtod_l+0x72>
 800263e:	2e06      	cmp	r6, #6
 8002640:	d126      	bne.n	8002690 <_strtod_l+0xb8>
 8002642:	2300      	movs	r3, #0
 8002644:	3501      	adds	r5, #1
 8002646:	9519      	str	r5, [sp, #100]	@ 0x64
 8002648:	930e      	str	r3, [sp, #56]	@ 0x38
 800264a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 8582 	bne.w	8003156 <_strtod_l+0xb7e>
 8002652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002654:	b1bb      	cbz	r3, 8002686 <_strtod_l+0xae>
 8002656:	4650      	mov	r0, sl
 8002658:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800265c:	b01f      	add	sp, #124	@ 0x7c
 800265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002662:	2920      	cmp	r1, #32
 8002664:	d1d0      	bne.n	8002608 <_strtod_l+0x30>
 8002666:	3201      	adds	r2, #1
 8002668:	e7c3      	b.n	80025f2 <_strtod_l+0x1a>
 800266a:	292d      	cmp	r1, #45	@ 0x2d
 800266c:	d1cc      	bne.n	8002608 <_strtod_l+0x30>
 800266e:	2101      	movs	r1, #1
 8002670:	910e      	str	r1, [sp, #56]	@ 0x38
 8002672:	1c51      	adds	r1, r2, #1
 8002674:	9119      	str	r1, [sp, #100]	@ 0x64
 8002676:	7852      	ldrb	r2, [r2, #1]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d1c7      	bne.n	800260c <_strtod_l+0x34>
 800267c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800267e:	9419      	str	r4, [sp, #100]	@ 0x64
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 8566 	bne.w	8003152 <_strtod_l+0xb7a>
 8002686:	4650      	mov	r0, sl
 8002688:	4659      	mov	r1, fp
 800268a:	e7e7      	b.n	800265c <_strtod_l+0x84>
 800268c:	2100      	movs	r1, #0
 800268e:	e7ef      	b.n	8002670 <_strtod_l+0x98>
 8002690:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8002692:	b13a      	cbz	r2, 80026a4 <_strtod_l+0xcc>
 8002694:	2135      	movs	r1, #53	@ 0x35
 8002696:	a81c      	add	r0, sp, #112	@ 0x70
 8002698:	f001 ffe8 	bl	800466c <__copybits>
 800269c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800269e:	9805      	ldr	r0, [sp, #20]
 80026a0:	f001 fbc8 	bl	8003e34 <_Bfree>
 80026a4:	3e01      	subs	r6, #1
 80026a6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80026a8:	2e04      	cmp	r6, #4
 80026aa:	d806      	bhi.n	80026ba <_strtod_l+0xe2>
 80026ac:	e8df f006 	tbb	[pc, r6]
 80026b0:	201d0314 	.word	0x201d0314
 80026b4:	14          	.byte	0x14
 80026b5:	00          	.byte	0x00
 80026b6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80026ba:	05e1      	lsls	r1, r4, #23
 80026bc:	bf48      	it	mi
 80026be:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80026c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80026c6:	0d1b      	lsrs	r3, r3, #20
 80026c8:	051b      	lsls	r3, r3, #20
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1bd      	bne.n	800264a <_strtod_l+0x72>
 80026ce:	f000 feed 	bl	80034ac <__errno>
 80026d2:	2322      	movs	r3, #34	@ 0x22
 80026d4:	6003      	str	r3, [r0, #0]
 80026d6:	e7b8      	b.n	800264a <_strtod_l+0x72>
 80026d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80026dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80026e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026e4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80026e8:	e7e7      	b.n	80026ba <_strtod_l+0xe2>
 80026ea:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8002868 <_strtod_l+0x290>
 80026ee:	e7e4      	b.n	80026ba <_strtod_l+0xe2>
 80026f0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80026f4:	f04f 3aff 	mov.w	sl, #4294967295
 80026f8:	e7df      	b.n	80026ba <_strtod_l+0xe2>
 80026fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8002700:	785b      	ldrb	r3, [r3, #1]
 8002702:	2b30      	cmp	r3, #48	@ 0x30
 8002704:	d0f9      	beq.n	80026fa <_strtod_l+0x122>
 8002706:	2b00      	cmp	r3, #0
 8002708:	d09f      	beq.n	800264a <_strtod_l+0x72>
 800270a:	2301      	movs	r3, #1
 800270c:	2700      	movs	r7, #0
 800270e:	220a      	movs	r2, #10
 8002710:	46b9      	mov	r9, r7
 8002712:	9308      	str	r3, [sp, #32]
 8002714:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002716:	970b      	str	r7, [sp, #44]	@ 0x2c
 8002718:	930c      	str	r3, [sp, #48]	@ 0x30
 800271a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800271c:	7805      	ldrb	r5, [r0, #0]
 800271e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8002722:	b2d9      	uxtb	r1, r3
 8002724:	2909      	cmp	r1, #9
 8002726:	d928      	bls.n	800277a <_strtod_l+0x1a2>
 8002728:	2201      	movs	r2, #1
 800272a:	4950      	ldr	r1, [pc, #320]	@ (800286c <_strtod_l+0x294>)
 800272c:	f000 fe52 	bl	80033d4 <strncmp>
 8002730:	2800      	cmp	r0, #0
 8002732:	d032      	beq.n	800279a <_strtod_l+0x1c2>
 8002734:	2000      	movs	r0, #0
 8002736:	462a      	mov	r2, r5
 8002738:	4603      	mov	r3, r0
 800273a:	464d      	mov	r5, r9
 800273c:	900a      	str	r0, [sp, #40]	@ 0x28
 800273e:	2a65      	cmp	r2, #101	@ 0x65
 8002740:	d001      	beq.n	8002746 <_strtod_l+0x16e>
 8002742:	2a45      	cmp	r2, #69	@ 0x45
 8002744:	d114      	bne.n	8002770 <_strtod_l+0x198>
 8002746:	b91d      	cbnz	r5, 8002750 <_strtod_l+0x178>
 8002748:	9a08      	ldr	r2, [sp, #32]
 800274a:	4302      	orrs	r2, r0
 800274c:	d096      	beq.n	800267c <_strtod_l+0xa4>
 800274e:	2500      	movs	r5, #0
 8002750:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8002752:	1c62      	adds	r2, r4, #1
 8002754:	9219      	str	r2, [sp, #100]	@ 0x64
 8002756:	7862      	ldrb	r2, [r4, #1]
 8002758:	2a2b      	cmp	r2, #43	@ 0x2b
 800275a:	d07a      	beq.n	8002852 <_strtod_l+0x27a>
 800275c:	2a2d      	cmp	r2, #45	@ 0x2d
 800275e:	d07e      	beq.n	800285e <_strtod_l+0x286>
 8002760:	f04f 0c00 	mov.w	ip, #0
 8002764:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8002768:	2909      	cmp	r1, #9
 800276a:	f240 8085 	bls.w	8002878 <_strtod_l+0x2a0>
 800276e:	9419      	str	r4, [sp, #100]	@ 0x64
 8002770:	f04f 0800 	mov.w	r8, #0
 8002774:	e0a5      	b.n	80028c2 <_strtod_l+0x2ea>
 8002776:	2300      	movs	r3, #0
 8002778:	e7c8      	b.n	800270c <_strtod_l+0x134>
 800277a:	f1b9 0f08 	cmp.w	r9, #8
 800277e:	bfd8      	it	le
 8002780:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8002782:	f100 0001 	add.w	r0, r0, #1
 8002786:	bfd6      	itet	le
 8002788:	fb02 3301 	mlale	r3, r2, r1, r3
 800278c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8002790:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8002792:	f109 0901 	add.w	r9, r9, #1
 8002796:	9019      	str	r0, [sp, #100]	@ 0x64
 8002798:	e7bf      	b.n	800271a <_strtod_l+0x142>
 800279a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	9219      	str	r2, [sp, #100]	@ 0x64
 80027a0:	785a      	ldrb	r2, [r3, #1]
 80027a2:	f1b9 0f00 	cmp.w	r9, #0
 80027a6:	d03b      	beq.n	8002820 <_strtod_l+0x248>
 80027a8:	464d      	mov	r5, r9
 80027aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80027ac:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80027b0:	2b09      	cmp	r3, #9
 80027b2:	d912      	bls.n	80027da <_strtod_l+0x202>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e7c2      	b.n	800273e <_strtod_l+0x166>
 80027b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80027ba:	3001      	adds	r0, #1
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	9219      	str	r2, [sp, #100]	@ 0x64
 80027c0:	785a      	ldrb	r2, [r3, #1]
 80027c2:	2a30      	cmp	r2, #48	@ 0x30
 80027c4:	d0f8      	beq.n	80027b8 <_strtod_l+0x1e0>
 80027c6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	f200 84c8 	bhi.w	8003160 <_strtod_l+0xb88>
 80027d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80027d2:	2000      	movs	r0, #0
 80027d4:	4605      	mov	r5, r0
 80027d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80027d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80027da:	3a30      	subs	r2, #48	@ 0x30
 80027dc:	f100 0301 	add.w	r3, r0, #1
 80027e0:	d018      	beq.n	8002814 <_strtod_l+0x23c>
 80027e2:	462e      	mov	r6, r5
 80027e4:	f04f 0e0a 	mov.w	lr, #10
 80027e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80027ea:	4419      	add	r1, r3
 80027ec:	910a      	str	r1, [sp, #40]	@ 0x28
 80027ee:	1c71      	adds	r1, r6, #1
 80027f0:	eba1 0c05 	sub.w	ip, r1, r5
 80027f4:	4563      	cmp	r3, ip
 80027f6:	dc15      	bgt.n	8002824 <_strtod_l+0x24c>
 80027f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80027fc:	182b      	adds	r3, r5, r0
 80027fe:	2b08      	cmp	r3, #8
 8002800:	f105 0501 	add.w	r5, r5, #1
 8002804:	4405      	add	r5, r0
 8002806:	dc1a      	bgt.n	800283e <_strtod_l+0x266>
 8002808:	230a      	movs	r3, #10
 800280a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800280c:	fb03 2301 	mla	r3, r3, r1, r2
 8002810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002812:	2300      	movs	r3, #0
 8002814:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002816:	4618      	mov	r0, r3
 8002818:	1c51      	adds	r1, r2, #1
 800281a:	9119      	str	r1, [sp, #100]	@ 0x64
 800281c:	7852      	ldrb	r2, [r2, #1]
 800281e:	e7c5      	b.n	80027ac <_strtod_l+0x1d4>
 8002820:	4648      	mov	r0, r9
 8002822:	e7ce      	b.n	80027c2 <_strtod_l+0x1ea>
 8002824:	2e08      	cmp	r6, #8
 8002826:	dc05      	bgt.n	8002834 <_strtod_l+0x25c>
 8002828:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800282a:	fb0e f606 	mul.w	r6, lr, r6
 800282e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8002830:	460e      	mov	r6, r1
 8002832:	e7dc      	b.n	80027ee <_strtod_l+0x216>
 8002834:	2910      	cmp	r1, #16
 8002836:	bfd8      	it	le
 8002838:	fb0e f707 	mulle.w	r7, lr, r7
 800283c:	e7f8      	b.n	8002830 <_strtod_l+0x258>
 800283e:	2b0f      	cmp	r3, #15
 8002840:	bfdc      	itt	le
 8002842:	230a      	movle	r3, #10
 8002844:	fb03 2707 	mlale	r7, r3, r7, r2
 8002848:	e7e3      	b.n	8002812 <_strtod_l+0x23a>
 800284a:	2300      	movs	r3, #0
 800284c:	930a      	str	r3, [sp, #40]	@ 0x28
 800284e:	2301      	movs	r3, #1
 8002850:	e77a      	b.n	8002748 <_strtod_l+0x170>
 8002852:	f04f 0c00 	mov.w	ip, #0
 8002856:	1ca2      	adds	r2, r4, #2
 8002858:	9219      	str	r2, [sp, #100]	@ 0x64
 800285a:	78a2      	ldrb	r2, [r4, #2]
 800285c:	e782      	b.n	8002764 <_strtod_l+0x18c>
 800285e:	f04f 0c01 	mov.w	ip, #1
 8002862:	e7f8      	b.n	8002856 <_strtod_l+0x27e>
 8002864:	0800532c 	.word	0x0800532c
 8002868:	7ff00000 	.word	0x7ff00000
 800286c:	080051b0 	.word	0x080051b0
 8002870:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002872:	1c51      	adds	r1, r2, #1
 8002874:	9119      	str	r1, [sp, #100]	@ 0x64
 8002876:	7852      	ldrb	r2, [r2, #1]
 8002878:	2a30      	cmp	r2, #48	@ 0x30
 800287a:	d0f9      	beq.n	8002870 <_strtod_l+0x298>
 800287c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8002880:	2908      	cmp	r1, #8
 8002882:	f63f af75 	bhi.w	8002770 <_strtod_l+0x198>
 8002886:	f04f 080a 	mov.w	r8, #10
 800288a:	3a30      	subs	r2, #48	@ 0x30
 800288c:	9209      	str	r2, [sp, #36]	@ 0x24
 800288e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002890:	920f      	str	r2, [sp, #60]	@ 0x3c
 8002892:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002894:	1c56      	adds	r6, r2, #1
 8002896:	9619      	str	r6, [sp, #100]	@ 0x64
 8002898:	7852      	ldrb	r2, [r2, #1]
 800289a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800289e:	f1be 0f09 	cmp.w	lr, #9
 80028a2:	d939      	bls.n	8002918 <_strtod_l+0x340>
 80028a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80028a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80028aa:	1a76      	subs	r6, r6, r1
 80028ac:	2e08      	cmp	r6, #8
 80028ae:	dc03      	bgt.n	80028b8 <_strtod_l+0x2e0>
 80028b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80028b2:	4588      	cmp	r8, r1
 80028b4:	bfa8      	it	ge
 80028b6:	4688      	movge	r8, r1
 80028b8:	f1bc 0f00 	cmp.w	ip, #0
 80028bc:	d001      	beq.n	80028c2 <_strtod_l+0x2ea>
 80028be:	f1c8 0800 	rsb	r8, r8, #0
 80028c2:	2d00      	cmp	r5, #0
 80028c4:	d14e      	bne.n	8002964 <_strtod_l+0x38c>
 80028c6:	9908      	ldr	r1, [sp, #32]
 80028c8:	4308      	orrs	r0, r1
 80028ca:	f47f aebe 	bne.w	800264a <_strtod_l+0x72>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f47f aed4 	bne.w	800267c <_strtod_l+0xa4>
 80028d4:	2a69      	cmp	r2, #105	@ 0x69
 80028d6:	d028      	beq.n	800292a <_strtod_l+0x352>
 80028d8:	dc25      	bgt.n	8002926 <_strtod_l+0x34e>
 80028da:	2a49      	cmp	r2, #73	@ 0x49
 80028dc:	d025      	beq.n	800292a <_strtod_l+0x352>
 80028de:	2a4e      	cmp	r2, #78	@ 0x4e
 80028e0:	f47f aecc 	bne.w	800267c <_strtod_l+0xa4>
 80028e4:	4999      	ldr	r1, [pc, #612]	@ (8002b4c <_strtod_l+0x574>)
 80028e6:	a819      	add	r0, sp, #100	@ 0x64
 80028e8:	f001 f8f4 	bl	8003ad4 <__match>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	f43f aec5 	beq.w	800267c <_strtod_l+0xa4>
 80028f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b28      	cmp	r3, #40	@ 0x28
 80028f8:	d12e      	bne.n	8002958 <_strtod_l+0x380>
 80028fa:	4995      	ldr	r1, [pc, #596]	@ (8002b50 <_strtod_l+0x578>)
 80028fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80028fe:	a819      	add	r0, sp, #100	@ 0x64
 8002900:	f001 f8fc 	bl	8003afc <__hexnan>
 8002904:	2805      	cmp	r0, #5
 8002906:	d127      	bne.n	8002958 <_strtod_l+0x380>
 8002908:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800290a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800290e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8002912:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8002916:	e698      	b.n	800264a <_strtod_l+0x72>
 8002918:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800291a:	fb08 2101 	mla	r1, r8, r1, r2
 800291e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8002922:	9209      	str	r2, [sp, #36]	@ 0x24
 8002924:	e7b5      	b.n	8002892 <_strtod_l+0x2ba>
 8002926:	2a6e      	cmp	r2, #110	@ 0x6e
 8002928:	e7da      	b.n	80028e0 <_strtod_l+0x308>
 800292a:	498a      	ldr	r1, [pc, #552]	@ (8002b54 <_strtod_l+0x57c>)
 800292c:	a819      	add	r0, sp, #100	@ 0x64
 800292e:	f001 f8d1 	bl	8003ad4 <__match>
 8002932:	2800      	cmp	r0, #0
 8002934:	f43f aea2 	beq.w	800267c <_strtod_l+0xa4>
 8002938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800293a:	4987      	ldr	r1, [pc, #540]	@ (8002b58 <_strtod_l+0x580>)
 800293c:	3b01      	subs	r3, #1
 800293e:	a819      	add	r0, sp, #100	@ 0x64
 8002940:	9319      	str	r3, [sp, #100]	@ 0x64
 8002942:	f001 f8c7 	bl	8003ad4 <__match>
 8002946:	b910      	cbnz	r0, 800294e <_strtod_l+0x376>
 8002948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800294a:	3301      	adds	r3, #1
 800294c:	9319      	str	r3, [sp, #100]	@ 0x64
 800294e:	f04f 0a00 	mov.w	sl, #0
 8002952:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8002b5c <_strtod_l+0x584>
 8002956:	e678      	b.n	800264a <_strtod_l+0x72>
 8002958:	4881      	ldr	r0, [pc, #516]	@ (8002b60 <_strtod_l+0x588>)
 800295a:	f000 fde3 	bl	8003524 <nan>
 800295e:	4682      	mov	sl, r0
 8002960:	468b      	mov	fp, r1
 8002962:	e672      	b.n	800264a <_strtod_l+0x72>
 8002964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002966:	f1b9 0f00 	cmp.w	r9, #0
 800296a:	bf08      	it	eq
 800296c:	46a9      	moveq	r9, r5
 800296e:	eba8 0303 	sub.w	r3, r8, r3
 8002972:	2d10      	cmp	r5, #16
 8002974:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002976:	462c      	mov	r4, r5
 8002978:	9309      	str	r3, [sp, #36]	@ 0x24
 800297a:	bfa8      	it	ge
 800297c:	2410      	movge	r4, #16
 800297e:	f7fd fd29 	bl	80003d4 <__aeabi_ui2d>
 8002982:	2d09      	cmp	r5, #9
 8002984:	4682      	mov	sl, r0
 8002986:	468b      	mov	fp, r1
 8002988:	dc11      	bgt.n	80029ae <_strtod_l+0x3d6>
 800298a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800298c:	2b00      	cmp	r3, #0
 800298e:	f43f ae5c 	beq.w	800264a <_strtod_l+0x72>
 8002992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002994:	dd76      	ble.n	8002a84 <_strtod_l+0x4ac>
 8002996:	2b16      	cmp	r3, #22
 8002998:	dc5d      	bgt.n	8002a56 <_strtod_l+0x47e>
 800299a:	4972      	ldr	r1, [pc, #456]	@ (8002b64 <_strtod_l+0x58c>)
 800299c:	4652      	mov	r2, sl
 800299e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80029a2:	465b      	mov	r3, fp
 80029a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029a8:	f7fd fd8e 	bl	80004c8 <__aeabi_dmul>
 80029ac:	e7d7      	b.n	800295e <_strtod_l+0x386>
 80029ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002b64 <_strtod_l+0x58c>)
 80029b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80029b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80029b8:	f7fd fd86 	bl	80004c8 <__aeabi_dmul>
 80029bc:	4682      	mov	sl, r0
 80029be:	4638      	mov	r0, r7
 80029c0:	468b      	mov	fp, r1
 80029c2:	f7fd fd07 	bl	80003d4 <__aeabi_ui2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4650      	mov	r0, sl
 80029cc:	4659      	mov	r1, fp
 80029ce:	f7fd fbc5 	bl	800015c <__adddf3>
 80029d2:	2d0f      	cmp	r5, #15
 80029d4:	4682      	mov	sl, r0
 80029d6:	468b      	mov	fp, r1
 80029d8:	ddd7      	ble.n	800298a <_strtod_l+0x3b2>
 80029da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029dc:	1b2c      	subs	r4, r5, r4
 80029de:	441c      	add	r4, r3
 80029e0:	2c00      	cmp	r4, #0
 80029e2:	f340 8093 	ble.w	8002b0c <_strtod_l+0x534>
 80029e6:	f014 030f 	ands.w	r3, r4, #15
 80029ea:	d00a      	beq.n	8002a02 <_strtod_l+0x42a>
 80029ec:	495d      	ldr	r1, [pc, #372]	@ (8002b64 <_strtod_l+0x58c>)
 80029ee:	4652      	mov	r2, sl
 80029f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80029f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029f8:	465b      	mov	r3, fp
 80029fa:	f7fd fd65 	bl	80004c8 <__aeabi_dmul>
 80029fe:	4682      	mov	sl, r0
 8002a00:	468b      	mov	fp, r1
 8002a02:	f034 040f 	bics.w	r4, r4, #15
 8002a06:	d073      	beq.n	8002af0 <_strtod_l+0x518>
 8002a08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8002a0c:	dd49      	ble.n	8002aa2 <_strtod_l+0x4ca>
 8002a0e:	2400      	movs	r4, #0
 8002a10:	46a0      	mov	r8, r4
 8002a12:	46a1      	mov	r9, r4
 8002a14:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002a16:	2322      	movs	r3, #34	@ 0x22
 8002a18:	f04f 0a00 	mov.w	sl, #0
 8002a1c:	9a05      	ldr	r2, [sp, #20]
 8002a1e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8002b5c <_strtod_l+0x584>
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f43f ae0f 	beq.w	800264a <_strtod_l+0x72>
 8002a2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002a2e:	9805      	ldr	r0, [sp, #20]
 8002a30:	f001 fa00 	bl	8003e34 <_Bfree>
 8002a34:	4649      	mov	r1, r9
 8002a36:	9805      	ldr	r0, [sp, #20]
 8002a38:	f001 f9fc 	bl	8003e34 <_Bfree>
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	9805      	ldr	r0, [sp, #20]
 8002a40:	f001 f9f8 	bl	8003e34 <_Bfree>
 8002a44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002a46:	9805      	ldr	r0, [sp, #20]
 8002a48:	f001 f9f4 	bl	8003e34 <_Bfree>
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	9805      	ldr	r0, [sp, #20]
 8002a50:	f001 f9f0 	bl	8003e34 <_Bfree>
 8002a54:	e5f9      	b.n	800264a <_strtod_l+0x72>
 8002a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	dbbc      	blt.n	80029da <_strtod_l+0x402>
 8002a60:	4c40      	ldr	r4, [pc, #256]	@ (8002b64 <_strtod_l+0x58c>)
 8002a62:	f1c5 050f 	rsb	r5, r5, #15
 8002a66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8002a6a:	4652      	mov	r2, sl
 8002a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a70:	465b      	mov	r3, fp
 8002a72:	f7fd fd29 	bl	80004c8 <__aeabi_dmul>
 8002a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a78:	1b5d      	subs	r5, r3, r5
 8002a7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8002a7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002a82:	e791      	b.n	80029a8 <_strtod_l+0x3d0>
 8002a84:	3316      	adds	r3, #22
 8002a86:	dba8      	blt.n	80029da <_strtod_l+0x402>
 8002a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002a8a:	4650      	mov	r0, sl
 8002a8c:	eba3 0808 	sub.w	r8, r3, r8
 8002a90:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <_strtod_l+0x58c>)
 8002a92:	4659      	mov	r1, fp
 8002a94:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8002a98:	e9d8 2300 	ldrd	r2, r3, [r8]
 8002a9c:	f7fd fe3e 	bl	800071c <__aeabi_ddiv>
 8002aa0:	e75d      	b.n	800295e <_strtod_l+0x386>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	4650      	mov	r0, sl
 8002aa6:	4659      	mov	r1, fp
 8002aa8:	461e      	mov	r6, r3
 8002aaa:	4f2f      	ldr	r7, [pc, #188]	@ (8002b68 <_strtod_l+0x590>)
 8002aac:	1124      	asrs	r4, r4, #4
 8002aae:	2c01      	cmp	r4, #1
 8002ab0:	dc21      	bgt.n	8002af6 <_strtod_l+0x51e>
 8002ab2:	b10b      	cbz	r3, 8002ab8 <_strtod_l+0x4e0>
 8002ab4:	4682      	mov	sl, r0
 8002ab6:	468b      	mov	fp, r1
 8002ab8:	492b      	ldr	r1, [pc, #172]	@ (8002b68 <_strtod_l+0x590>)
 8002aba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8002abe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8002ac2:	4652      	mov	r2, sl
 8002ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ac8:	465b      	mov	r3, fp
 8002aca:	f7fd fcfd 	bl	80004c8 <__aeabi_dmul>
 8002ace:	4b23      	ldr	r3, [pc, #140]	@ (8002b5c <_strtod_l+0x584>)
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	400b      	ands	r3, r1
 8002ad4:	4925      	ldr	r1, [pc, #148]	@ (8002b6c <_strtod_l+0x594>)
 8002ad6:	4682      	mov	sl, r0
 8002ad8:	428b      	cmp	r3, r1
 8002ada:	d898      	bhi.n	8002a0e <_strtod_l+0x436>
 8002adc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	bf86      	itte	hi
 8002ae4:	f04f 3aff 	movhi.w	sl, #4294967295
 8002ae8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8002b70 <_strtod_l+0x598>
 8002aec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8002af0:	2300      	movs	r3, #0
 8002af2:	9308      	str	r3, [sp, #32]
 8002af4:	e076      	b.n	8002be4 <_strtod_l+0x60c>
 8002af6:	07e2      	lsls	r2, r4, #31
 8002af8:	d504      	bpl.n	8002b04 <_strtod_l+0x52c>
 8002afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002afe:	f7fd fce3 	bl	80004c8 <__aeabi_dmul>
 8002b02:	2301      	movs	r3, #1
 8002b04:	3601      	adds	r6, #1
 8002b06:	1064      	asrs	r4, r4, #1
 8002b08:	3708      	adds	r7, #8
 8002b0a:	e7d0      	b.n	8002aae <_strtod_l+0x4d6>
 8002b0c:	d0f0      	beq.n	8002af0 <_strtod_l+0x518>
 8002b0e:	4264      	negs	r4, r4
 8002b10:	f014 020f 	ands.w	r2, r4, #15
 8002b14:	d00a      	beq.n	8002b2c <_strtod_l+0x554>
 8002b16:	4b13      	ldr	r3, [pc, #76]	@ (8002b64 <_strtod_l+0x58c>)
 8002b18:	4650      	mov	r0, sl
 8002b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b1e:	4659      	mov	r1, fp
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f7fd fdfa 	bl	800071c <__aeabi_ddiv>
 8002b28:	4682      	mov	sl, r0
 8002b2a:	468b      	mov	fp, r1
 8002b2c:	1124      	asrs	r4, r4, #4
 8002b2e:	d0df      	beq.n	8002af0 <_strtod_l+0x518>
 8002b30:	2c1f      	cmp	r4, #31
 8002b32:	dd1f      	ble.n	8002b74 <_strtod_l+0x59c>
 8002b34:	2400      	movs	r4, #0
 8002b36:	46a0      	mov	r8, r4
 8002b38:	46a1      	mov	r9, r4
 8002b3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002b3c:	2322      	movs	r3, #34	@ 0x22
 8002b3e:	9a05      	ldr	r2, [sp, #20]
 8002b40:	f04f 0a00 	mov.w	sl, #0
 8002b44:	f04f 0b00 	mov.w	fp, #0
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e76b      	b.n	8002a24 <_strtod_l+0x44c>
 8002b4c:	080051bb 	.word	0x080051bb
 8002b50:	08005318 	.word	0x08005318
 8002b54:	080051b2 	.word	0x080051b2
 8002b58:	080051b5 	.word	0x080051b5
 8002b5c:	7ff00000 	.word	0x7ff00000
 8002b60:	080052e2 	.word	0x080052e2
 8002b64:	080053a0 	.word	0x080053a0
 8002b68:	08005378 	.word	0x08005378
 8002b6c:	7ca00000 	.word	0x7ca00000
 8002b70:	7fefffff 	.word	0x7fefffff
 8002b74:	f014 0310 	ands.w	r3, r4, #16
 8002b78:	bf18      	it	ne
 8002b7a:	236a      	movne	r3, #106	@ 0x6a
 8002b7c:	4650      	mov	r0, sl
 8002b7e:	9308      	str	r3, [sp, #32]
 8002b80:	4659      	mov	r1, fp
 8002b82:	2300      	movs	r3, #0
 8002b84:	4e77      	ldr	r6, [pc, #476]	@ (8002d64 <_strtod_l+0x78c>)
 8002b86:	07e7      	lsls	r7, r4, #31
 8002b88:	d504      	bpl.n	8002b94 <_strtod_l+0x5bc>
 8002b8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002b8e:	f7fd fc9b 	bl	80004c8 <__aeabi_dmul>
 8002b92:	2301      	movs	r3, #1
 8002b94:	1064      	asrs	r4, r4, #1
 8002b96:	f106 0608 	add.w	r6, r6, #8
 8002b9a:	d1f4      	bne.n	8002b86 <_strtod_l+0x5ae>
 8002b9c:	b10b      	cbz	r3, 8002ba2 <_strtod_l+0x5ca>
 8002b9e:	4682      	mov	sl, r0
 8002ba0:	468b      	mov	fp, r1
 8002ba2:	9b08      	ldr	r3, [sp, #32]
 8002ba4:	b1b3      	cbz	r3, 8002bd4 <_strtod_l+0x5fc>
 8002ba6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8002baa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	4659      	mov	r1, fp
 8002bb2:	dd0f      	ble.n	8002bd4 <_strtod_l+0x5fc>
 8002bb4:	2b1f      	cmp	r3, #31
 8002bb6:	dd58      	ble.n	8002c6a <_strtod_l+0x692>
 8002bb8:	2b34      	cmp	r3, #52	@ 0x34
 8002bba:	bfd8      	it	le
 8002bbc:	f04f 33ff 	movle.w	r3, #4294967295
 8002bc0:	f04f 0a00 	mov.w	sl, #0
 8002bc4:	bfcf      	iteee	gt
 8002bc6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8002bca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8002bce:	4093      	lslle	r3, r2
 8002bd0:	ea03 0b01 	andle.w	fp, r3, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	4650      	mov	r0, sl
 8002bda:	4659      	mov	r1, fp
 8002bdc:	f7fd fedc 	bl	8000998 <__aeabi_dcmpeq>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d1a7      	bne.n	8002b34 <_strtod_l+0x55c>
 8002be4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002be6:	464a      	mov	r2, r9
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8002bec:	462b      	mov	r3, r5
 8002bee:	9805      	ldr	r0, [sp, #20]
 8002bf0:	f001 f988 	bl	8003f04 <__s2b>
 8002bf4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	f43f af09 	beq.w	8002a0e <_strtod_l+0x436>
 8002bfc:	2400      	movs	r4, #0
 8002bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	eba3 0308 	sub.w	r3, r3, r8
 8002c08:	bfa8      	it	ge
 8002c0a:	2300      	movge	r3, #0
 8002c0c:	46a0      	mov	r8, r4
 8002c0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8002c10:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8002c14:	9316      	str	r3, [sp, #88]	@ 0x58
 8002c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002c18:	9805      	ldr	r0, [sp, #20]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	f001 f8ca 	bl	8003db4 <_Balloc>
 8002c20:	4681      	mov	r9, r0
 8002c22:	2800      	cmp	r0, #0
 8002c24:	f43f aef7 	beq.w	8002a16 <_strtod_l+0x43e>
 8002c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002c2a:	300c      	adds	r0, #12
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	f103 010c 	add.w	r1, r3, #12
 8002c32:	3202      	adds	r2, #2
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	f000 fc66 	bl	8003506 <memcpy>
 8002c3a:	ab1c      	add	r3, sp, #112	@ 0x70
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4652      	mov	r2, sl
 8002c44:	465b      	mov	r3, fp
 8002c46:	9805      	ldr	r0, [sp, #20]
 8002c48:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8002c4c:	f001 fc86 	bl	800455c <__d2b>
 8002c50:	901a      	str	r0, [sp, #104]	@ 0x68
 8002c52:	2800      	cmp	r0, #0
 8002c54:	f43f aedf 	beq.w	8002a16 <_strtod_l+0x43e>
 8002c58:	2101      	movs	r1, #1
 8002c5a:	9805      	ldr	r0, [sp, #20]
 8002c5c:	f001 f9e8 	bl	8004030 <__i2b>
 8002c60:	4680      	mov	r8, r0
 8002c62:	b948      	cbnz	r0, 8002c78 <_strtod_l+0x6a0>
 8002c64:	f04f 0800 	mov.w	r8, #0
 8002c68:	e6d5      	b.n	8002a16 <_strtod_l+0x43e>
 8002c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	ea03 0a0a 	and.w	sl, r3, sl
 8002c76:	e7ad      	b.n	8002bd4 <_strtod_l+0x5fc>
 8002c78:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8002c7a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8002c7c:	2d00      	cmp	r5, #0
 8002c7e:	bfab      	itete	ge
 8002c80:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8002c82:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8002c84:	18ef      	addge	r7, r5, r3
 8002c86:	1b5e      	sublt	r6, r3, r5
 8002c88:	9b08      	ldr	r3, [sp, #32]
 8002c8a:	bfa8      	it	ge
 8002c8c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8002c8e:	eba5 0503 	sub.w	r5, r5, r3
 8002c92:	4415      	add	r5, r2
 8002c94:	4b34      	ldr	r3, [pc, #208]	@ (8002d68 <_strtod_l+0x790>)
 8002c96:	f105 35ff 	add.w	r5, r5, #4294967295
 8002c9a:	bfb8      	it	lt
 8002c9c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8002c9e:	429d      	cmp	r5, r3
 8002ca0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8002ca4:	da50      	bge.n	8002d48 <_strtod_l+0x770>
 8002ca6:	1b5b      	subs	r3, r3, r5
 8002ca8:	2b1f      	cmp	r3, #31
 8002caa:	f04f 0101 	mov.w	r1, #1
 8002cae:	eba2 0203 	sub.w	r2, r2, r3
 8002cb2:	dc3d      	bgt.n	8002d30 <_strtod_l+0x758>
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8002cbe:	18bd      	adds	r5, r7, r2
 8002cc0:	9b08      	ldr	r3, [sp, #32]
 8002cc2:	42af      	cmp	r7, r5
 8002cc4:	4416      	add	r6, r2
 8002cc6:	441e      	add	r6, r3
 8002cc8:	463b      	mov	r3, r7
 8002cca:	bfa8      	it	ge
 8002ccc:	462b      	movge	r3, r5
 8002cce:	42b3      	cmp	r3, r6
 8002cd0:	bfa8      	it	ge
 8002cd2:	4633      	movge	r3, r6
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bfc2      	ittt	gt
 8002cd8:	1aed      	subgt	r5, r5, r3
 8002cda:	1af6      	subgt	r6, r6, r3
 8002cdc:	1aff      	subgt	r7, r7, r3
 8002cde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	dd16      	ble.n	8002d12 <_strtod_l+0x73a>
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	9805      	ldr	r0, [sp, #20]
 8002cea:	f001 fa59 	bl	80041a0 <__pow5mult>
 8002cee:	4680      	mov	r8, r0
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d0b7      	beq.n	8002c64 <_strtod_l+0x68c>
 8002cf4:	4601      	mov	r1, r0
 8002cf6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8002cf8:	9805      	ldr	r0, [sp, #20]
 8002cfa:	f001 f9af 	bl	800405c <__multiply>
 8002cfe:	900a      	str	r0, [sp, #40]	@ 0x28
 8002d00:	2800      	cmp	r0, #0
 8002d02:	f43f ae88 	beq.w	8002a16 <_strtod_l+0x43e>
 8002d06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002d08:	9805      	ldr	r0, [sp, #20]
 8002d0a:	f001 f893 	bl	8003e34 <_Bfree>
 8002d0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d10:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d12:	2d00      	cmp	r5, #0
 8002d14:	dc1d      	bgt.n	8002d52 <_strtod_l+0x77a>
 8002d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	dd27      	ble.n	8002d6c <_strtod_l+0x794>
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8002d20:	9805      	ldr	r0, [sp, #20]
 8002d22:	f001 fa3d 	bl	80041a0 <__pow5mult>
 8002d26:	4681      	mov	r9, r0
 8002d28:	bb00      	cbnz	r0, 8002d6c <_strtod_l+0x794>
 8002d2a:	f04f 0900 	mov.w	r9, #0
 8002d2e:	e672      	b.n	8002a16 <_strtod_l+0x43e>
 8002d30:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8002d34:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8002d38:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8002d3c:	35e2      	adds	r5, #226	@ 0xe2
 8002d3e:	fa01 f305 	lsl.w	r3, r1, r5
 8002d42:	9310      	str	r3, [sp, #64]	@ 0x40
 8002d44:	9113      	str	r1, [sp, #76]	@ 0x4c
 8002d46:	e7ba      	b.n	8002cbe <_strtod_l+0x6e6>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002d50:	e7b5      	b.n	8002cbe <_strtod_l+0x6e6>
 8002d52:	462a      	mov	r2, r5
 8002d54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002d56:	9805      	ldr	r0, [sp, #20]
 8002d58:	f001 fa7c 	bl	8004254 <__lshift>
 8002d5c:	901a      	str	r0, [sp, #104]	@ 0x68
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d1d9      	bne.n	8002d16 <_strtod_l+0x73e>
 8002d62:	e658      	b.n	8002a16 <_strtod_l+0x43e>
 8002d64:	08005340 	.word	0x08005340
 8002d68:	fffffc02 	.word	0xfffffc02
 8002d6c:	2e00      	cmp	r6, #0
 8002d6e:	dd07      	ble.n	8002d80 <_strtod_l+0x7a8>
 8002d70:	4649      	mov	r1, r9
 8002d72:	4632      	mov	r2, r6
 8002d74:	9805      	ldr	r0, [sp, #20]
 8002d76:	f001 fa6d 	bl	8004254 <__lshift>
 8002d7a:	4681      	mov	r9, r0
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d0d4      	beq.n	8002d2a <_strtod_l+0x752>
 8002d80:	2f00      	cmp	r7, #0
 8002d82:	dd08      	ble.n	8002d96 <_strtod_l+0x7be>
 8002d84:	4641      	mov	r1, r8
 8002d86:	463a      	mov	r2, r7
 8002d88:	9805      	ldr	r0, [sp, #20]
 8002d8a:	f001 fa63 	bl	8004254 <__lshift>
 8002d8e:	4680      	mov	r8, r0
 8002d90:	2800      	cmp	r0, #0
 8002d92:	f43f ae40 	beq.w	8002a16 <_strtod_l+0x43e>
 8002d96:	464a      	mov	r2, r9
 8002d98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002d9a:	9805      	ldr	r0, [sp, #20]
 8002d9c:	f001 fae2 	bl	8004364 <__mdiff>
 8002da0:	4604      	mov	r4, r0
 8002da2:	2800      	cmp	r0, #0
 8002da4:	f43f ae37 	beq.w	8002a16 <_strtod_l+0x43e>
 8002da8:	68c3      	ldr	r3, [r0, #12]
 8002daa:	4641      	mov	r1, r8
 8002dac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002dae:	2300      	movs	r3, #0
 8002db0:	60c3      	str	r3, [r0, #12]
 8002db2:	f001 fabb 	bl	800432c <__mcmp>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	da3d      	bge.n	8002e36 <_strtod_l+0x85e>
 8002dba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002dbc:	ea53 030a 	orrs.w	r3, r3, sl
 8002dc0:	d163      	bne.n	8002e8a <_strtod_l+0x8b2>
 8002dc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d15f      	bne.n	8002e8a <_strtod_l+0x8b2>
 8002dca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8002dce:	0d1b      	lsrs	r3, r3, #20
 8002dd0:	051b      	lsls	r3, r3, #20
 8002dd2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8002dd6:	d958      	bls.n	8002e8a <_strtod_l+0x8b2>
 8002dd8:	6963      	ldr	r3, [r4, #20]
 8002dda:	b913      	cbnz	r3, 8002de2 <_strtod_l+0x80a>
 8002ddc:	6923      	ldr	r3, [r4, #16]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	dd53      	ble.n	8002e8a <_strtod_l+0x8b2>
 8002de2:	4621      	mov	r1, r4
 8002de4:	2201      	movs	r2, #1
 8002de6:	9805      	ldr	r0, [sp, #20]
 8002de8:	f001 fa34 	bl	8004254 <__lshift>
 8002dec:	4641      	mov	r1, r8
 8002dee:	4604      	mov	r4, r0
 8002df0:	f001 fa9c 	bl	800432c <__mcmp>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	dd48      	ble.n	8002e8a <_strtod_l+0x8b2>
 8002df8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8002dfc:	9a08      	ldr	r2, [sp, #32]
 8002dfe:	0d1b      	lsrs	r3, r3, #20
 8002e00:	051b      	lsls	r3, r3, #20
 8002e02:	2a00      	cmp	r2, #0
 8002e04:	d062      	beq.n	8002ecc <_strtod_l+0x8f4>
 8002e06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8002e0a:	d85f      	bhi.n	8002ecc <_strtod_l+0x8f4>
 8002e0c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8002e10:	f67f ae94 	bls.w	8002b3c <_strtod_l+0x564>
 8002e14:	4650      	mov	r0, sl
 8002e16:	4659      	mov	r1, fp
 8002e18:	4ba3      	ldr	r3, [pc, #652]	@ (80030a8 <_strtod_l+0xad0>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f7fd fb54 	bl	80004c8 <__aeabi_dmul>
 8002e20:	4ba2      	ldr	r3, [pc, #648]	@ (80030ac <_strtod_l+0xad4>)
 8002e22:	4682      	mov	sl, r0
 8002e24:	400b      	ands	r3, r1
 8002e26:	468b      	mov	fp, r1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f47f adff 	bne.w	8002a2c <_strtod_l+0x454>
 8002e2e:	2322      	movs	r3, #34	@ 0x22
 8002e30:	9a05      	ldr	r2, [sp, #20]
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e5fa      	b.n	8002a2c <_strtod_l+0x454>
 8002e36:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8002e3a:	d165      	bne.n	8002f08 <_strtod_l+0x930>
 8002e3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8002e3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002e42:	b35a      	cbz	r2, 8002e9c <_strtod_l+0x8c4>
 8002e44:	4a9a      	ldr	r2, [pc, #616]	@ (80030b0 <_strtod_l+0xad8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12b      	bne.n	8002ea2 <_strtod_l+0x8ca>
 8002e4a:	9b08      	ldr	r3, [sp, #32]
 8002e4c:	4651      	mov	r1, sl
 8002e4e:	b303      	cbz	r3, 8002e92 <_strtod_l+0x8ba>
 8002e50:	465a      	mov	r2, fp
 8002e52:	4b96      	ldr	r3, [pc, #600]	@ (80030ac <_strtod_l+0xad4>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	d81b      	bhi.n	8002e98 <_strtod_l+0x8c0>
 8002e60:	0d1b      	lsrs	r3, r3, #20
 8002e62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	4299      	cmp	r1, r3
 8002e6c:	d119      	bne.n	8002ea2 <_strtod_l+0x8ca>
 8002e6e:	4b91      	ldr	r3, [pc, #580]	@ (80030b4 <_strtod_l+0xadc>)
 8002e70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d102      	bne.n	8002e7c <_strtod_l+0x8a4>
 8002e76:	3101      	adds	r1, #1
 8002e78:	f43f adcd 	beq.w	8002a16 <_strtod_l+0x43e>
 8002e7c:	f04f 0a00 	mov.w	sl, #0
 8002e80:	4b8a      	ldr	r3, [pc, #552]	@ (80030ac <_strtod_l+0xad4>)
 8002e82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002e84:	401a      	ands	r2, r3
 8002e86:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8002e8a:	9b08      	ldr	r3, [sp, #32]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1c1      	bne.n	8002e14 <_strtod_l+0x83c>
 8002e90:	e5cc      	b.n	8002a2c <_strtod_l+0x454>
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
 8002e96:	e7e8      	b.n	8002e6a <_strtod_l+0x892>
 8002e98:	4613      	mov	r3, r2
 8002e9a:	e7e6      	b.n	8002e6a <_strtod_l+0x892>
 8002e9c:	ea53 030a 	orrs.w	r3, r3, sl
 8002ea0:	d0aa      	beq.n	8002df8 <_strtod_l+0x820>
 8002ea2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002ea4:	b1db      	cbz	r3, 8002ede <_strtod_l+0x906>
 8002ea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002ea8:	4213      	tst	r3, r2
 8002eaa:	d0ee      	beq.n	8002e8a <_strtod_l+0x8b2>
 8002eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002eae:	4650      	mov	r0, sl
 8002eb0:	4659      	mov	r1, fp
 8002eb2:	9a08      	ldr	r2, [sp, #32]
 8002eb4:	b1bb      	cbz	r3, 8002ee6 <_strtod_l+0x90e>
 8002eb6:	f7ff fb6e 	bl	8002596 <sulp>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002ec2:	f7fd f94b 	bl	800015c <__adddf3>
 8002ec6:	4682      	mov	sl, r0
 8002ec8:	468b      	mov	fp, r1
 8002eca:	e7de      	b.n	8002e8a <_strtod_l+0x8b2>
 8002ecc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8002ed0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8002ed4:	f04f 3aff 	mov.w	sl, #4294967295
 8002ed8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8002edc:	e7d5      	b.n	8002e8a <_strtod_l+0x8b2>
 8002ede:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002ee0:	ea13 0f0a 	tst.w	r3, sl
 8002ee4:	e7e1      	b.n	8002eaa <_strtod_l+0x8d2>
 8002ee6:	f7ff fb56 	bl	8002596 <sulp>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002ef2:	f7fd f931 	bl	8000158 <__aeabi_dsub>
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2300      	movs	r3, #0
 8002efa:	4682      	mov	sl, r0
 8002efc:	468b      	mov	fp, r1
 8002efe:	f7fd fd4b 	bl	8000998 <__aeabi_dcmpeq>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d0c1      	beq.n	8002e8a <_strtod_l+0x8b2>
 8002f06:	e619      	b.n	8002b3c <_strtod_l+0x564>
 8002f08:	4641      	mov	r1, r8
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f001 fb7e 	bl	800460c <__ratio>
 8002f10:	2200      	movs	r2, #0
 8002f12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f16:	4606      	mov	r6, r0
 8002f18:	460f      	mov	r7, r1
 8002f1a:	f7fd fd51 	bl	80009c0 <__aeabi_dcmple>
 8002f1e:	2800      	cmp	r0, #0
 8002f20:	d06d      	beq.n	8002ffe <_strtod_l+0xa26>
 8002f22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d178      	bne.n	800301a <_strtod_l+0xa42>
 8002f28:	f1ba 0f00 	cmp.w	sl, #0
 8002f2c:	d156      	bne.n	8002fdc <_strtod_l+0xa04>
 8002f2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d158      	bne.n	8002fea <_strtod_l+0xa12>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	4639      	mov	r1, r7
 8002f3e:	4b5e      	ldr	r3, [pc, #376]	@ (80030b8 <_strtod_l+0xae0>)
 8002f40:	f7fd fd34 	bl	80009ac <__aeabi_dcmplt>
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d157      	bne.n	8002ff8 <_strtod_l+0xa20>
 8002f48:	4630      	mov	r0, r6
 8002f4a:	4639      	mov	r1, r7
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <_strtod_l+0xae4>)
 8002f50:	f7fd faba 	bl	80004c8 <__aeabi_dmul>
 8002f54:	4606      	mov	r6, r0
 8002f56:	460f      	mov	r7, r1
 8002f58:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8002f5c:	9606      	str	r6, [sp, #24]
 8002f5e:	9307      	str	r3, [sp, #28]
 8002f60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002f64:	4d51      	ldr	r5, [pc, #324]	@ (80030ac <_strtod_l+0xad4>)
 8002f66:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f6c:	401d      	ands	r5, r3
 8002f6e:	4b54      	ldr	r3, [pc, #336]	@ (80030c0 <_strtod_l+0xae8>)
 8002f70:	429d      	cmp	r5, r3
 8002f72:	f040 80ab 	bne.w	80030cc <_strtod_l+0xaf4>
 8002f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f78:	4650      	mov	r0, sl
 8002f7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8002f7e:	4659      	mov	r1, fp
 8002f80:	f001 fa84 	bl	800448c <__ulp>
 8002f84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002f88:	f7fd fa9e 	bl	80004c8 <__aeabi_dmul>
 8002f8c:	4652      	mov	r2, sl
 8002f8e:	465b      	mov	r3, fp
 8002f90:	f7fd f8e4 	bl	800015c <__adddf3>
 8002f94:	460b      	mov	r3, r1
 8002f96:	4945      	ldr	r1, [pc, #276]	@ (80030ac <_strtod_l+0xad4>)
 8002f98:	4a4a      	ldr	r2, [pc, #296]	@ (80030c4 <_strtod_l+0xaec>)
 8002f9a:	4019      	ands	r1, r3
 8002f9c:	4291      	cmp	r1, r2
 8002f9e:	4682      	mov	sl, r0
 8002fa0:	d942      	bls.n	8003028 <_strtod_l+0xa50>
 8002fa2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002fa4:	4b43      	ldr	r3, [pc, #268]	@ (80030b4 <_strtod_l+0xadc>)
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d103      	bne.n	8002fb2 <_strtod_l+0x9da>
 8002faa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002fac:	3301      	adds	r3, #1
 8002fae:	f43f ad32 	beq.w	8002a16 <_strtod_l+0x43e>
 8002fb2:	f04f 3aff 	mov.w	sl, #4294967295
 8002fb6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80030b4 <_strtod_l+0xadc>
 8002fba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8002fbc:	9805      	ldr	r0, [sp, #20]
 8002fbe:	f000 ff39 	bl	8003e34 <_Bfree>
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	9805      	ldr	r0, [sp, #20]
 8002fc6:	f000 ff35 	bl	8003e34 <_Bfree>
 8002fca:	4641      	mov	r1, r8
 8002fcc:	9805      	ldr	r0, [sp, #20]
 8002fce:	f000 ff31 	bl	8003e34 <_Bfree>
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	9805      	ldr	r0, [sp, #20]
 8002fd6:	f000 ff2d 	bl	8003e34 <_Bfree>
 8002fda:	e61c      	b.n	8002c16 <_strtod_l+0x63e>
 8002fdc:	f1ba 0f01 	cmp.w	sl, #1
 8002fe0:	d103      	bne.n	8002fea <_strtod_l+0xa12>
 8002fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f43f ada9 	beq.w	8002b3c <_strtod_l+0x564>
 8002fea:	2200      	movs	r2, #0
 8002fec:	4b36      	ldr	r3, [pc, #216]	@ (80030c8 <_strtod_l+0xaf0>)
 8002fee:	2600      	movs	r6, #0
 8002ff0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002ff4:	4f30      	ldr	r7, [pc, #192]	@ (80030b8 <_strtod_l+0xae0>)
 8002ff6:	e7b3      	b.n	8002f60 <_strtod_l+0x988>
 8002ff8:	2600      	movs	r6, #0
 8002ffa:	4f30      	ldr	r7, [pc, #192]	@ (80030bc <_strtod_l+0xae4>)
 8002ffc:	e7ac      	b.n	8002f58 <_strtod_l+0x980>
 8002ffe:	4630      	mov	r0, r6
 8003000:	4639      	mov	r1, r7
 8003002:	4b2e      	ldr	r3, [pc, #184]	@ (80030bc <_strtod_l+0xae4>)
 8003004:	2200      	movs	r2, #0
 8003006:	f7fd fa5f 	bl	80004c8 <__aeabi_dmul>
 800300a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800300c:	4606      	mov	r6, r0
 800300e:	460f      	mov	r7, r1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0a1      	beq.n	8002f58 <_strtod_l+0x980>
 8003014:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003018:	e7a2      	b.n	8002f60 <_strtod_l+0x988>
 800301a:	2200      	movs	r2, #0
 800301c:	4b26      	ldr	r3, [pc, #152]	@ (80030b8 <_strtod_l+0xae0>)
 800301e:	4616      	mov	r6, r2
 8003020:	461f      	mov	r7, r3
 8003022:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003026:	e79b      	b.n	8002f60 <_strtod_l+0x988>
 8003028:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800302c:	9b08      	ldr	r3, [sp, #32]
 800302e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1c1      	bne.n	8002fba <_strtod_l+0x9e2>
 8003036:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800303a:	0d1b      	lsrs	r3, r3, #20
 800303c:	051b      	lsls	r3, r3, #20
 800303e:	429d      	cmp	r5, r3
 8003040:	d1bb      	bne.n	8002fba <_strtod_l+0x9e2>
 8003042:	4630      	mov	r0, r6
 8003044:	4639      	mov	r1, r7
 8003046:	f7fe f83d 	bl	80010c4 <__aeabi_d2lz>
 800304a:	f7fd fa0f 	bl	800046c <__aeabi_l2d>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4630      	mov	r0, r6
 8003054:	4639      	mov	r1, r7
 8003056:	f7fd f87f 	bl	8000158 <__aeabi_dsub>
 800305a:	460b      	mov	r3, r1
 800305c:	4602      	mov	r2, r0
 800305e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8003062:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003066:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003068:	ea46 060a 	orr.w	r6, r6, sl
 800306c:	431e      	orrs	r6, r3
 800306e:	d06a      	beq.n	8003146 <_strtod_l+0xb6e>
 8003070:	a309      	add	r3, pc, #36	@ (adr r3, 8003098 <_strtod_l+0xac0>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f7fd fc99 	bl	80009ac <__aeabi_dcmplt>
 800307a:	2800      	cmp	r0, #0
 800307c:	f47f acd6 	bne.w	8002a2c <_strtod_l+0x454>
 8003080:	a307      	add	r3, pc, #28	@ (adr r3, 80030a0 <_strtod_l+0xac8>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800308a:	f7fd fcad 	bl	80009e8 <__aeabi_dcmpgt>
 800308e:	2800      	cmp	r0, #0
 8003090:	d093      	beq.n	8002fba <_strtod_l+0x9e2>
 8003092:	e4cb      	b.n	8002a2c <_strtod_l+0x454>
 8003094:	f3af 8000 	nop.w
 8003098:	94a03595 	.word	0x94a03595
 800309c:	3fdfffff 	.word	0x3fdfffff
 80030a0:	35afe535 	.word	0x35afe535
 80030a4:	3fe00000 	.word	0x3fe00000
 80030a8:	39500000 	.word	0x39500000
 80030ac:	7ff00000 	.word	0x7ff00000
 80030b0:	000fffff 	.word	0x000fffff
 80030b4:	7fefffff 	.word	0x7fefffff
 80030b8:	3ff00000 	.word	0x3ff00000
 80030bc:	3fe00000 	.word	0x3fe00000
 80030c0:	7fe00000 	.word	0x7fe00000
 80030c4:	7c9fffff 	.word	0x7c9fffff
 80030c8:	bff00000 	.word	0xbff00000
 80030cc:	9b08      	ldr	r3, [sp, #32]
 80030ce:	b323      	cbz	r3, 800311a <_strtod_l+0xb42>
 80030d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80030d4:	d821      	bhi.n	800311a <_strtod_l+0xb42>
 80030d6:	a328      	add	r3, pc, #160	@ (adr r3, 8003178 <_strtod_l+0xba0>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	4630      	mov	r0, r6
 80030de:	4639      	mov	r1, r7
 80030e0:	f7fd fc6e 	bl	80009c0 <__aeabi_dcmple>
 80030e4:	b1a0      	cbz	r0, 8003110 <_strtod_l+0xb38>
 80030e6:	4639      	mov	r1, r7
 80030e8:	4630      	mov	r0, r6
 80030ea:	f7fd fc87 	bl	80009fc <__aeabi_d2uiz>
 80030ee:	2801      	cmp	r0, #1
 80030f0:	bf38      	it	cc
 80030f2:	2001      	movcc	r0, #1
 80030f4:	f7fd f96e 	bl	80003d4 <__aeabi_ui2d>
 80030f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80030fa:	4606      	mov	r6, r0
 80030fc:	460f      	mov	r7, r1
 80030fe:	b9fb      	cbnz	r3, 8003140 <_strtod_l+0xb68>
 8003100:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003104:	9014      	str	r0, [sp, #80]	@ 0x50
 8003106:	9315      	str	r3, [sp, #84]	@ 0x54
 8003108:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800310c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003110:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003112:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8003116:	1b5b      	subs	r3, r3, r5
 8003118:	9311      	str	r3, [sp, #68]	@ 0x44
 800311a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800311e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8003122:	f001 f9b3 	bl	800448c <__ulp>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4650      	mov	r0, sl
 800312c:	4659      	mov	r1, fp
 800312e:	f7fd f9cb 	bl	80004c8 <__aeabi_dmul>
 8003132:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003136:	f7fd f811 	bl	800015c <__adddf3>
 800313a:	4682      	mov	sl, r0
 800313c:	468b      	mov	fp, r1
 800313e:	e775      	b.n	800302c <_strtod_l+0xa54>
 8003140:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8003144:	e7e0      	b.n	8003108 <_strtod_l+0xb30>
 8003146:	a30e      	add	r3, pc, #56	@ (adr r3, 8003180 <_strtod_l+0xba8>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f7fd fc2e 	bl	80009ac <__aeabi_dcmplt>
 8003150:	e79d      	b.n	800308e <_strtod_l+0xab6>
 8003152:	2300      	movs	r3, #0
 8003154:	930e      	str	r3, [sp, #56]	@ 0x38
 8003156:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003158:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	f7ff ba79 	b.w	8002652 <_strtod_l+0x7a>
 8003160:	2a65      	cmp	r2, #101	@ 0x65
 8003162:	f43f ab72 	beq.w	800284a <_strtod_l+0x272>
 8003166:	2a45      	cmp	r2, #69	@ 0x45
 8003168:	f43f ab6f 	beq.w	800284a <_strtod_l+0x272>
 800316c:	2301      	movs	r3, #1
 800316e:	f7ff bbaa 	b.w	80028c6 <_strtod_l+0x2ee>
 8003172:	bf00      	nop
 8003174:	f3af 8000 	nop.w
 8003178:	ffc00000 	.word	0xffc00000
 800317c:	41dfffff 	.word	0x41dfffff
 8003180:	94a03595 	.word	0x94a03595
 8003184:	3fcfffff 	.word	0x3fcfffff

08003188 <strtod>:
 8003188:	460a      	mov	r2, r1
 800318a:	4601      	mov	r1, r0
 800318c:	4802      	ldr	r0, [pc, #8]	@ (8003198 <strtod+0x10>)
 800318e:	4b03      	ldr	r3, [pc, #12]	@ (800319c <strtod+0x14>)
 8003190:	6800      	ldr	r0, [r0, #0]
 8003192:	f7ff ba21 	b.w	80025d8 <_strtod_l>
 8003196:	bf00      	nop
 8003198:	20000188 	.word	0x20000188
 800319c:	2000001c 	.word	0x2000001c

080031a0 <std>:
 80031a0:	2300      	movs	r3, #0
 80031a2:	b510      	push	{r4, lr}
 80031a4:	4604      	mov	r4, r0
 80031a6:	e9c0 3300 	strd	r3, r3, [r0]
 80031aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031ae:	6083      	str	r3, [r0, #8]
 80031b0:	8181      	strh	r1, [r0, #12]
 80031b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80031b4:	81c2      	strh	r2, [r0, #14]
 80031b6:	6183      	str	r3, [r0, #24]
 80031b8:	4619      	mov	r1, r3
 80031ba:	2208      	movs	r2, #8
 80031bc:	305c      	adds	r0, #92	@ 0x5c
 80031be:	f000 f8f4 	bl	80033aa <memset>
 80031c2:	4b0d      	ldr	r3, [pc, #52]	@ (80031f8 <std+0x58>)
 80031c4:	6224      	str	r4, [r4, #32]
 80031c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80031c8:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <std+0x5c>)
 80031ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <std+0x60>)
 80031ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <std+0x64>)
 80031d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <std+0x68>)
 80031d6:	429c      	cmp	r4, r3
 80031d8:	d006      	beq.n	80031e8 <std+0x48>
 80031da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80031de:	4294      	cmp	r4, r2
 80031e0:	d002      	beq.n	80031e8 <std+0x48>
 80031e2:	33d0      	adds	r3, #208	@ 0xd0
 80031e4:	429c      	cmp	r4, r3
 80031e6:	d105      	bne.n	80031f4 <std+0x54>
 80031e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80031ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f0:	f000 b986 	b.w	8003500 <__retarget_lock_init_recursive>
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	bf00      	nop
 80031f8:	08003325 	.word	0x08003325
 80031fc:	08003347 	.word	0x08003347
 8003200:	0800337f 	.word	0x0800337f
 8003204:	080033a3 	.word	0x080033a3
 8003208:	200002fc 	.word	0x200002fc

0800320c <stdio_exit_handler>:
 800320c:	4a02      	ldr	r2, [pc, #8]	@ (8003218 <stdio_exit_handler+0xc>)
 800320e:	4903      	ldr	r1, [pc, #12]	@ (800321c <stdio_exit_handler+0x10>)
 8003210:	4803      	ldr	r0, [pc, #12]	@ (8003220 <stdio_exit_handler+0x14>)
 8003212:	f000 b869 	b.w	80032e8 <_fwalk_sglue>
 8003216:	bf00      	nop
 8003218:	20000010 	.word	0x20000010
 800321c:	08004811 	.word	0x08004811
 8003220:	2000018c 	.word	0x2000018c

08003224 <cleanup_stdio>:
 8003224:	6841      	ldr	r1, [r0, #4]
 8003226:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <cleanup_stdio+0x34>)
 8003228:	b510      	push	{r4, lr}
 800322a:	4299      	cmp	r1, r3
 800322c:	4604      	mov	r4, r0
 800322e:	d001      	beq.n	8003234 <cleanup_stdio+0x10>
 8003230:	f001 faee 	bl	8004810 <_fflush_r>
 8003234:	68a1      	ldr	r1, [r4, #8]
 8003236:	4b09      	ldr	r3, [pc, #36]	@ (800325c <cleanup_stdio+0x38>)
 8003238:	4299      	cmp	r1, r3
 800323a:	d002      	beq.n	8003242 <cleanup_stdio+0x1e>
 800323c:	4620      	mov	r0, r4
 800323e:	f001 fae7 	bl	8004810 <_fflush_r>
 8003242:	68e1      	ldr	r1, [r4, #12]
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <cleanup_stdio+0x3c>)
 8003246:	4299      	cmp	r1, r3
 8003248:	d004      	beq.n	8003254 <cleanup_stdio+0x30>
 800324a:	4620      	mov	r0, r4
 800324c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003250:	f001 bade 	b.w	8004810 <_fflush_r>
 8003254:	bd10      	pop	{r4, pc}
 8003256:	bf00      	nop
 8003258:	200002fc 	.word	0x200002fc
 800325c:	20000364 	.word	0x20000364
 8003260:	200003cc 	.word	0x200003cc

08003264 <global_stdio_init.part.0>:
 8003264:	b510      	push	{r4, lr}
 8003266:	4b0b      	ldr	r3, [pc, #44]	@ (8003294 <global_stdio_init.part.0+0x30>)
 8003268:	4c0b      	ldr	r4, [pc, #44]	@ (8003298 <global_stdio_init.part.0+0x34>)
 800326a:	4a0c      	ldr	r2, [pc, #48]	@ (800329c <global_stdio_init.part.0+0x38>)
 800326c:	4620      	mov	r0, r4
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	2104      	movs	r1, #4
 8003272:	2200      	movs	r2, #0
 8003274:	f7ff ff94 	bl	80031a0 <std>
 8003278:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800327c:	2201      	movs	r2, #1
 800327e:	2109      	movs	r1, #9
 8003280:	f7ff ff8e 	bl	80031a0 <std>
 8003284:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003288:	2202      	movs	r2, #2
 800328a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800328e:	2112      	movs	r1, #18
 8003290:	f7ff bf86 	b.w	80031a0 <std>
 8003294:	20000434 	.word	0x20000434
 8003298:	200002fc 	.word	0x200002fc
 800329c:	0800320d 	.word	0x0800320d

080032a0 <__sfp_lock_acquire>:
 80032a0:	4801      	ldr	r0, [pc, #4]	@ (80032a8 <__sfp_lock_acquire+0x8>)
 80032a2:	f000 b92e 	b.w	8003502 <__retarget_lock_acquire_recursive>
 80032a6:	bf00      	nop
 80032a8:	2000043d 	.word	0x2000043d

080032ac <__sfp_lock_release>:
 80032ac:	4801      	ldr	r0, [pc, #4]	@ (80032b4 <__sfp_lock_release+0x8>)
 80032ae:	f000 b929 	b.w	8003504 <__retarget_lock_release_recursive>
 80032b2:	bf00      	nop
 80032b4:	2000043d 	.word	0x2000043d

080032b8 <__sinit>:
 80032b8:	b510      	push	{r4, lr}
 80032ba:	4604      	mov	r4, r0
 80032bc:	f7ff fff0 	bl	80032a0 <__sfp_lock_acquire>
 80032c0:	6a23      	ldr	r3, [r4, #32]
 80032c2:	b11b      	cbz	r3, 80032cc <__sinit+0x14>
 80032c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c8:	f7ff bff0 	b.w	80032ac <__sfp_lock_release>
 80032cc:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <__sinit+0x28>)
 80032ce:	6223      	str	r3, [r4, #32]
 80032d0:	4b04      	ldr	r3, [pc, #16]	@ (80032e4 <__sinit+0x2c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f5      	bne.n	80032c4 <__sinit+0xc>
 80032d8:	f7ff ffc4 	bl	8003264 <global_stdio_init.part.0>
 80032dc:	e7f2      	b.n	80032c4 <__sinit+0xc>
 80032de:	bf00      	nop
 80032e0:	08003225 	.word	0x08003225
 80032e4:	20000434 	.word	0x20000434

080032e8 <_fwalk_sglue>:
 80032e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032ec:	4607      	mov	r7, r0
 80032ee:	4688      	mov	r8, r1
 80032f0:	4614      	mov	r4, r2
 80032f2:	2600      	movs	r6, #0
 80032f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032f8:	f1b9 0901 	subs.w	r9, r9, #1
 80032fc:	d505      	bpl.n	800330a <_fwalk_sglue+0x22>
 80032fe:	6824      	ldr	r4, [r4, #0]
 8003300:	2c00      	cmp	r4, #0
 8003302:	d1f7      	bne.n	80032f4 <_fwalk_sglue+0xc>
 8003304:	4630      	mov	r0, r6
 8003306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800330a:	89ab      	ldrh	r3, [r5, #12]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d907      	bls.n	8003320 <_fwalk_sglue+0x38>
 8003310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003314:	3301      	adds	r3, #1
 8003316:	d003      	beq.n	8003320 <_fwalk_sglue+0x38>
 8003318:	4629      	mov	r1, r5
 800331a:	4638      	mov	r0, r7
 800331c:	47c0      	blx	r8
 800331e:	4306      	orrs	r6, r0
 8003320:	3568      	adds	r5, #104	@ 0x68
 8003322:	e7e9      	b.n	80032f8 <_fwalk_sglue+0x10>

08003324 <__sread>:
 8003324:	b510      	push	{r4, lr}
 8003326:	460c      	mov	r4, r1
 8003328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800332c:	f000 f89a 	bl	8003464 <_read_r>
 8003330:	2800      	cmp	r0, #0
 8003332:	bfab      	itete	ge
 8003334:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003336:	89a3      	ldrhlt	r3, [r4, #12]
 8003338:	181b      	addge	r3, r3, r0
 800333a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800333e:	bfac      	ite	ge
 8003340:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003342:	81a3      	strhlt	r3, [r4, #12]
 8003344:	bd10      	pop	{r4, pc}

08003346 <__swrite>:
 8003346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334a:	461f      	mov	r7, r3
 800334c:	898b      	ldrh	r3, [r1, #12]
 800334e:	4605      	mov	r5, r0
 8003350:	05db      	lsls	r3, r3, #23
 8003352:	460c      	mov	r4, r1
 8003354:	4616      	mov	r6, r2
 8003356:	d505      	bpl.n	8003364 <__swrite+0x1e>
 8003358:	2302      	movs	r3, #2
 800335a:	2200      	movs	r2, #0
 800335c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003360:	f000 f86e 	bl	8003440 <_lseek_r>
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	4632      	mov	r2, r6
 8003368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800336c:	81a3      	strh	r3, [r4, #12]
 800336e:	4628      	mov	r0, r5
 8003370:	463b      	mov	r3, r7
 8003372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800337a:	f000 b885 	b.w	8003488 <_write_r>

0800337e <__sseek>:
 800337e:	b510      	push	{r4, lr}
 8003380:	460c      	mov	r4, r1
 8003382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003386:	f000 f85b 	bl	8003440 <_lseek_r>
 800338a:	1c43      	adds	r3, r0, #1
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	bf15      	itete	ne
 8003390:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003392:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003396:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800339a:	81a3      	strheq	r3, [r4, #12]
 800339c:	bf18      	it	ne
 800339e:	81a3      	strhne	r3, [r4, #12]
 80033a0:	bd10      	pop	{r4, pc}

080033a2 <__sclose>:
 80033a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a6:	f000 b83b 	b.w	8003420 <_close_r>

080033aa <memset>:
 80033aa:	4603      	mov	r3, r0
 80033ac:	4402      	add	r2, r0
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d100      	bne.n	80033b4 <memset+0xa>
 80033b2:	4770      	bx	lr
 80033b4:	f803 1b01 	strb.w	r1, [r3], #1
 80033b8:	e7f9      	b.n	80033ae <memset+0x4>

080033ba <strchr>:
 80033ba:	4603      	mov	r3, r0
 80033bc:	b2c9      	uxtb	r1, r1
 80033be:	4618      	mov	r0, r3
 80033c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033c4:	b112      	cbz	r2, 80033cc <strchr+0x12>
 80033c6:	428a      	cmp	r2, r1
 80033c8:	d1f9      	bne.n	80033be <strchr+0x4>
 80033ca:	4770      	bx	lr
 80033cc:	2900      	cmp	r1, #0
 80033ce:	bf18      	it	ne
 80033d0:	2000      	movne	r0, #0
 80033d2:	4770      	bx	lr

080033d4 <strncmp>:
 80033d4:	b510      	push	{r4, lr}
 80033d6:	b16a      	cbz	r2, 80033f4 <strncmp+0x20>
 80033d8:	3901      	subs	r1, #1
 80033da:	1884      	adds	r4, r0, r2
 80033dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d103      	bne.n	80033f0 <strncmp+0x1c>
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d001      	beq.n	80033f0 <strncmp+0x1c>
 80033ec:	2a00      	cmp	r2, #0
 80033ee:	d1f5      	bne.n	80033dc <strncmp+0x8>
 80033f0:	1ad0      	subs	r0, r2, r3
 80033f2:	bd10      	pop	{r4, pc}
 80033f4:	4610      	mov	r0, r2
 80033f6:	e7fc      	b.n	80033f2 <strncmp+0x1e>

080033f8 <strncpy>:
 80033f8:	4603      	mov	r3, r0
 80033fa:	b510      	push	{r4, lr}
 80033fc:	3901      	subs	r1, #1
 80033fe:	b132      	cbz	r2, 800340e <strncpy+0x16>
 8003400:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003404:	3a01      	subs	r2, #1
 8003406:	f803 4b01 	strb.w	r4, [r3], #1
 800340a:	2c00      	cmp	r4, #0
 800340c:	d1f7      	bne.n	80033fe <strncpy+0x6>
 800340e:	2100      	movs	r1, #0
 8003410:	441a      	add	r2, r3
 8003412:	4293      	cmp	r3, r2
 8003414:	d100      	bne.n	8003418 <strncpy+0x20>
 8003416:	bd10      	pop	{r4, pc}
 8003418:	f803 1b01 	strb.w	r1, [r3], #1
 800341c:	e7f9      	b.n	8003412 <strncpy+0x1a>
	...

08003420 <_close_r>:
 8003420:	b538      	push	{r3, r4, r5, lr}
 8003422:	2300      	movs	r3, #0
 8003424:	4d05      	ldr	r5, [pc, #20]	@ (800343c <_close_r+0x1c>)
 8003426:	4604      	mov	r4, r0
 8003428:	4608      	mov	r0, r1
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	f7fe f8ad 	bl	800158a <_close>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d102      	bne.n	800343a <_close_r+0x1a>
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	b103      	cbz	r3, 800343a <_close_r+0x1a>
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	bd38      	pop	{r3, r4, r5, pc}
 800343c:	20000438 	.word	0x20000438

08003440 <_lseek_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4604      	mov	r4, r0
 8003444:	4608      	mov	r0, r1
 8003446:	4611      	mov	r1, r2
 8003448:	2200      	movs	r2, #0
 800344a:	4d05      	ldr	r5, [pc, #20]	@ (8003460 <_lseek_r+0x20>)
 800344c:	602a      	str	r2, [r5, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	f7fe f8bf 	bl	80015d2 <_lseek>
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d102      	bne.n	800345e <_lseek_r+0x1e>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	b103      	cbz	r3, 800345e <_lseek_r+0x1e>
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	bd38      	pop	{r3, r4, r5, pc}
 8003460:	20000438 	.word	0x20000438

08003464 <_read_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	4604      	mov	r4, r0
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	2200      	movs	r2, #0
 800346e:	4d05      	ldr	r5, [pc, #20]	@ (8003484 <_read_r+0x20>)
 8003470:	602a      	str	r2, [r5, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	f7fe f850 	bl	8001518 <_read>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d102      	bne.n	8003482 <_read_r+0x1e>
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	b103      	cbz	r3, 8003482 <_read_r+0x1e>
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	bd38      	pop	{r3, r4, r5, pc}
 8003484:	20000438 	.word	0x20000438

08003488 <_write_r>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4604      	mov	r4, r0
 800348c:	4608      	mov	r0, r1
 800348e:	4611      	mov	r1, r2
 8003490:	2200      	movs	r2, #0
 8003492:	4d05      	ldr	r5, [pc, #20]	@ (80034a8 <_write_r+0x20>)
 8003494:	602a      	str	r2, [r5, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	f7fe f85b 	bl	8001552 <_write>
 800349c:	1c43      	adds	r3, r0, #1
 800349e:	d102      	bne.n	80034a6 <_write_r+0x1e>
 80034a0:	682b      	ldr	r3, [r5, #0]
 80034a2:	b103      	cbz	r3, 80034a6 <_write_r+0x1e>
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	bd38      	pop	{r3, r4, r5, pc}
 80034a8:	20000438 	.word	0x20000438

080034ac <__errno>:
 80034ac:	4b01      	ldr	r3, [pc, #4]	@ (80034b4 <__errno+0x8>)
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000188 	.word	0x20000188

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	2600      	movs	r6, #0
 80034bc:	4d0c      	ldr	r5, [pc, #48]	@ (80034f0 <__libc_init_array+0x38>)
 80034be:	4c0d      	ldr	r4, [pc, #52]	@ (80034f4 <__libc_init_array+0x3c>)
 80034c0:	1b64      	subs	r4, r4, r5
 80034c2:	10a4      	asrs	r4, r4, #2
 80034c4:	42a6      	cmp	r6, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	f001 fe66 	bl	8005198 <_init>
 80034cc:	2600      	movs	r6, #0
 80034ce:	4d0a      	ldr	r5, [pc, #40]	@ (80034f8 <__libc_init_array+0x40>)
 80034d0:	4c0a      	ldr	r4, [pc, #40]	@ (80034fc <__libc_init_array+0x44>)
 80034d2:	1b64      	subs	r4, r4, r5
 80034d4:	10a4      	asrs	r4, r4, #2
 80034d6:	42a6      	cmp	r6, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e0:	4798      	blx	r3
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ea:	4798      	blx	r3
 80034ec:	3601      	adds	r6, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	0800556c 	.word	0x0800556c
 80034f4:	0800556c 	.word	0x0800556c
 80034f8:	0800556c 	.word	0x0800556c
 80034fc:	08005570 	.word	0x08005570

08003500 <__retarget_lock_init_recursive>:
 8003500:	4770      	bx	lr

08003502 <__retarget_lock_acquire_recursive>:
 8003502:	4770      	bx	lr

08003504 <__retarget_lock_release_recursive>:
 8003504:	4770      	bx	lr

08003506 <memcpy>:
 8003506:	440a      	add	r2, r1
 8003508:	4291      	cmp	r1, r2
 800350a:	f100 33ff 	add.w	r3, r0, #4294967295
 800350e:	d100      	bne.n	8003512 <memcpy+0xc>
 8003510:	4770      	bx	lr
 8003512:	b510      	push	{r4, lr}
 8003514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003518:	4291      	cmp	r1, r2
 800351a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800351e:	d1f9      	bne.n	8003514 <memcpy+0xe>
 8003520:	bd10      	pop	{r4, pc}
	...

08003524 <nan>:
 8003524:	2000      	movs	r0, #0
 8003526:	4901      	ldr	r1, [pc, #4]	@ (800352c <nan+0x8>)
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	7ff80000 	.word	0x7ff80000

08003530 <_free_r>:
 8003530:	b538      	push	{r3, r4, r5, lr}
 8003532:	4605      	mov	r5, r0
 8003534:	2900      	cmp	r1, #0
 8003536:	d040      	beq.n	80035ba <_free_r+0x8a>
 8003538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800353c:	1f0c      	subs	r4, r1, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	bfb8      	it	lt
 8003542:	18e4      	addlt	r4, r4, r3
 8003544:	f000 fc2a 	bl	8003d9c <__malloc_lock>
 8003548:	4a1c      	ldr	r2, [pc, #112]	@ (80035bc <_free_r+0x8c>)
 800354a:	6813      	ldr	r3, [r2, #0]
 800354c:	b933      	cbnz	r3, 800355c <_free_r+0x2c>
 800354e:	6063      	str	r3, [r4, #4]
 8003550:	6014      	str	r4, [r2, #0]
 8003552:	4628      	mov	r0, r5
 8003554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003558:	f000 bc26 	b.w	8003da8 <__malloc_unlock>
 800355c:	42a3      	cmp	r3, r4
 800355e:	d908      	bls.n	8003572 <_free_r+0x42>
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	1821      	adds	r1, r4, r0
 8003564:	428b      	cmp	r3, r1
 8003566:	bf01      	itttt	eq
 8003568:	6819      	ldreq	r1, [r3, #0]
 800356a:	685b      	ldreq	r3, [r3, #4]
 800356c:	1809      	addeq	r1, r1, r0
 800356e:	6021      	streq	r1, [r4, #0]
 8003570:	e7ed      	b.n	800354e <_free_r+0x1e>
 8003572:	461a      	mov	r2, r3
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	b10b      	cbz	r3, 800357c <_free_r+0x4c>
 8003578:	42a3      	cmp	r3, r4
 800357a:	d9fa      	bls.n	8003572 <_free_r+0x42>
 800357c:	6811      	ldr	r1, [r2, #0]
 800357e:	1850      	adds	r0, r2, r1
 8003580:	42a0      	cmp	r0, r4
 8003582:	d10b      	bne.n	800359c <_free_r+0x6c>
 8003584:	6820      	ldr	r0, [r4, #0]
 8003586:	4401      	add	r1, r0
 8003588:	1850      	adds	r0, r2, r1
 800358a:	4283      	cmp	r3, r0
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	d1e0      	bne.n	8003552 <_free_r+0x22>
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4408      	add	r0, r1
 8003596:	6010      	str	r0, [r2, #0]
 8003598:	6053      	str	r3, [r2, #4]
 800359a:	e7da      	b.n	8003552 <_free_r+0x22>
 800359c:	d902      	bls.n	80035a4 <_free_r+0x74>
 800359e:	230c      	movs	r3, #12
 80035a0:	602b      	str	r3, [r5, #0]
 80035a2:	e7d6      	b.n	8003552 <_free_r+0x22>
 80035a4:	6820      	ldr	r0, [r4, #0]
 80035a6:	1821      	adds	r1, r4, r0
 80035a8:	428b      	cmp	r3, r1
 80035aa:	bf01      	itttt	eq
 80035ac:	6819      	ldreq	r1, [r3, #0]
 80035ae:	685b      	ldreq	r3, [r3, #4]
 80035b0:	1809      	addeq	r1, r1, r0
 80035b2:	6021      	streq	r1, [r4, #0]
 80035b4:	6063      	str	r3, [r4, #4]
 80035b6:	6054      	str	r4, [r2, #4]
 80035b8:	e7cb      	b.n	8003552 <_free_r+0x22>
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	20000444 	.word	0x20000444

080035c0 <rshift>:
 80035c0:	6903      	ldr	r3, [r0, #16]
 80035c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80035ca:	f100 0414 	add.w	r4, r0, #20
 80035ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80035d2:	dd46      	ble.n	8003662 <rshift+0xa2>
 80035d4:	f011 011f 	ands.w	r1, r1, #31
 80035d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80035dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80035e0:	d10c      	bne.n	80035fc <rshift+0x3c>
 80035e2:	4629      	mov	r1, r5
 80035e4:	f100 0710 	add.w	r7, r0, #16
 80035e8:	42b1      	cmp	r1, r6
 80035ea:	d335      	bcc.n	8003658 <rshift+0x98>
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	1eea      	subs	r2, r5, #3
 80035f2:	4296      	cmp	r6, r2
 80035f4:	bf38      	it	cc
 80035f6:	2300      	movcc	r3, #0
 80035f8:	4423      	add	r3, r4
 80035fa:	e015      	b.n	8003628 <rshift+0x68>
 80035fc:	46a1      	mov	r9, r4
 80035fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8003602:	f1c1 0820 	rsb	r8, r1, #32
 8003606:	40cf      	lsrs	r7, r1
 8003608:	f105 0e04 	add.w	lr, r5, #4
 800360c:	4576      	cmp	r6, lr
 800360e:	46f4      	mov	ip, lr
 8003610:	d816      	bhi.n	8003640 <rshift+0x80>
 8003612:	1a9a      	subs	r2, r3, r2
 8003614:	0092      	lsls	r2, r2, #2
 8003616:	3a04      	subs	r2, #4
 8003618:	3501      	adds	r5, #1
 800361a:	42ae      	cmp	r6, r5
 800361c:	bf38      	it	cc
 800361e:	2200      	movcc	r2, #0
 8003620:	18a3      	adds	r3, r4, r2
 8003622:	50a7      	str	r7, [r4, r2]
 8003624:	b107      	cbz	r7, 8003628 <rshift+0x68>
 8003626:	3304      	adds	r3, #4
 8003628:	42a3      	cmp	r3, r4
 800362a:	eba3 0204 	sub.w	r2, r3, r4
 800362e:	bf08      	it	eq
 8003630:	2300      	moveq	r3, #0
 8003632:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8003636:	6102      	str	r2, [r0, #16]
 8003638:	bf08      	it	eq
 800363a:	6143      	streq	r3, [r0, #20]
 800363c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003640:	f8dc c000 	ldr.w	ip, [ip]
 8003644:	fa0c fc08 	lsl.w	ip, ip, r8
 8003648:	ea4c 0707 	orr.w	r7, ip, r7
 800364c:	f849 7b04 	str.w	r7, [r9], #4
 8003650:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003654:	40cf      	lsrs	r7, r1
 8003656:	e7d9      	b.n	800360c <rshift+0x4c>
 8003658:	f851 cb04 	ldr.w	ip, [r1], #4
 800365c:	f847 cf04 	str.w	ip, [r7, #4]!
 8003660:	e7c2      	b.n	80035e8 <rshift+0x28>
 8003662:	4623      	mov	r3, r4
 8003664:	e7e0      	b.n	8003628 <rshift+0x68>

08003666 <__hexdig_fun>:
 8003666:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800366a:	2b09      	cmp	r3, #9
 800366c:	d802      	bhi.n	8003674 <__hexdig_fun+0xe>
 800366e:	3820      	subs	r0, #32
 8003670:	b2c0      	uxtb	r0, r0
 8003672:	4770      	bx	lr
 8003674:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8003678:	2b05      	cmp	r3, #5
 800367a:	d801      	bhi.n	8003680 <__hexdig_fun+0x1a>
 800367c:	3847      	subs	r0, #71	@ 0x47
 800367e:	e7f7      	b.n	8003670 <__hexdig_fun+0xa>
 8003680:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8003684:	2b05      	cmp	r3, #5
 8003686:	d801      	bhi.n	800368c <__hexdig_fun+0x26>
 8003688:	3827      	subs	r0, #39	@ 0x27
 800368a:	e7f1      	b.n	8003670 <__hexdig_fun+0xa>
 800368c:	2000      	movs	r0, #0
 800368e:	4770      	bx	lr

08003690 <__gethex>:
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003694:	468a      	mov	sl, r1
 8003696:	4690      	mov	r8, r2
 8003698:	b085      	sub	sp, #20
 800369a:	9302      	str	r3, [sp, #8]
 800369c:	680b      	ldr	r3, [r1, #0]
 800369e:	9001      	str	r0, [sp, #4]
 80036a0:	1c9c      	adds	r4, r3, #2
 80036a2:	46a1      	mov	r9, r4
 80036a4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80036a8:	2830      	cmp	r0, #48	@ 0x30
 80036aa:	d0fa      	beq.n	80036a2 <__gethex+0x12>
 80036ac:	eba9 0303 	sub.w	r3, r9, r3
 80036b0:	f1a3 0b02 	sub.w	fp, r3, #2
 80036b4:	f7ff ffd7 	bl	8003666 <__hexdig_fun>
 80036b8:	4605      	mov	r5, r0
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d168      	bne.n	8003790 <__gethex+0x100>
 80036be:	2201      	movs	r2, #1
 80036c0:	4648      	mov	r0, r9
 80036c2:	499f      	ldr	r1, [pc, #636]	@ (8003940 <__gethex+0x2b0>)
 80036c4:	f7ff fe86 	bl	80033d4 <strncmp>
 80036c8:	4607      	mov	r7, r0
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d167      	bne.n	800379e <__gethex+0x10e>
 80036ce:	f899 0001 	ldrb.w	r0, [r9, #1]
 80036d2:	4626      	mov	r6, r4
 80036d4:	f7ff ffc7 	bl	8003666 <__hexdig_fun>
 80036d8:	2800      	cmp	r0, #0
 80036da:	d062      	beq.n	80037a2 <__gethex+0x112>
 80036dc:	4623      	mov	r3, r4
 80036de:	7818      	ldrb	r0, [r3, #0]
 80036e0:	4699      	mov	r9, r3
 80036e2:	2830      	cmp	r0, #48	@ 0x30
 80036e4:	f103 0301 	add.w	r3, r3, #1
 80036e8:	d0f9      	beq.n	80036de <__gethex+0x4e>
 80036ea:	f7ff ffbc 	bl	8003666 <__hexdig_fun>
 80036ee:	fab0 f580 	clz	r5, r0
 80036f2:	f04f 0b01 	mov.w	fp, #1
 80036f6:	096d      	lsrs	r5, r5, #5
 80036f8:	464a      	mov	r2, r9
 80036fa:	4616      	mov	r6, r2
 80036fc:	7830      	ldrb	r0, [r6, #0]
 80036fe:	3201      	adds	r2, #1
 8003700:	f7ff ffb1 	bl	8003666 <__hexdig_fun>
 8003704:	2800      	cmp	r0, #0
 8003706:	d1f8      	bne.n	80036fa <__gethex+0x6a>
 8003708:	2201      	movs	r2, #1
 800370a:	4630      	mov	r0, r6
 800370c:	498c      	ldr	r1, [pc, #560]	@ (8003940 <__gethex+0x2b0>)
 800370e:	f7ff fe61 	bl	80033d4 <strncmp>
 8003712:	2800      	cmp	r0, #0
 8003714:	d13f      	bne.n	8003796 <__gethex+0x106>
 8003716:	b944      	cbnz	r4, 800372a <__gethex+0x9a>
 8003718:	1c74      	adds	r4, r6, #1
 800371a:	4622      	mov	r2, r4
 800371c:	4616      	mov	r6, r2
 800371e:	7830      	ldrb	r0, [r6, #0]
 8003720:	3201      	adds	r2, #1
 8003722:	f7ff ffa0 	bl	8003666 <__hexdig_fun>
 8003726:	2800      	cmp	r0, #0
 8003728:	d1f8      	bne.n	800371c <__gethex+0x8c>
 800372a:	1ba4      	subs	r4, r4, r6
 800372c:	00a7      	lsls	r7, r4, #2
 800372e:	7833      	ldrb	r3, [r6, #0]
 8003730:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8003734:	2b50      	cmp	r3, #80	@ 0x50
 8003736:	d13e      	bne.n	80037b6 <__gethex+0x126>
 8003738:	7873      	ldrb	r3, [r6, #1]
 800373a:	2b2b      	cmp	r3, #43	@ 0x2b
 800373c:	d033      	beq.n	80037a6 <__gethex+0x116>
 800373e:	2b2d      	cmp	r3, #45	@ 0x2d
 8003740:	d034      	beq.n	80037ac <__gethex+0x11c>
 8003742:	2400      	movs	r4, #0
 8003744:	1c71      	adds	r1, r6, #1
 8003746:	7808      	ldrb	r0, [r1, #0]
 8003748:	f7ff ff8d 	bl	8003666 <__hexdig_fun>
 800374c:	1e43      	subs	r3, r0, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b18      	cmp	r3, #24
 8003752:	d830      	bhi.n	80037b6 <__gethex+0x126>
 8003754:	f1a0 0210 	sub.w	r2, r0, #16
 8003758:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800375c:	f7ff ff83 	bl	8003666 <__hexdig_fun>
 8003760:	f100 3cff 	add.w	ip, r0, #4294967295
 8003764:	fa5f fc8c 	uxtb.w	ip, ip
 8003768:	f1bc 0f18 	cmp.w	ip, #24
 800376c:	f04f 030a 	mov.w	r3, #10
 8003770:	d91e      	bls.n	80037b0 <__gethex+0x120>
 8003772:	b104      	cbz	r4, 8003776 <__gethex+0xe6>
 8003774:	4252      	negs	r2, r2
 8003776:	4417      	add	r7, r2
 8003778:	f8ca 1000 	str.w	r1, [sl]
 800377c:	b1ed      	cbz	r5, 80037ba <__gethex+0x12a>
 800377e:	f1bb 0f00 	cmp.w	fp, #0
 8003782:	bf0c      	ite	eq
 8003784:	2506      	moveq	r5, #6
 8003786:	2500      	movne	r5, #0
 8003788:	4628      	mov	r0, r5
 800378a:	b005      	add	sp, #20
 800378c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003790:	2500      	movs	r5, #0
 8003792:	462c      	mov	r4, r5
 8003794:	e7b0      	b.n	80036f8 <__gethex+0x68>
 8003796:	2c00      	cmp	r4, #0
 8003798:	d1c7      	bne.n	800372a <__gethex+0x9a>
 800379a:	4627      	mov	r7, r4
 800379c:	e7c7      	b.n	800372e <__gethex+0x9e>
 800379e:	464e      	mov	r6, r9
 80037a0:	462f      	mov	r7, r5
 80037a2:	2501      	movs	r5, #1
 80037a4:	e7c3      	b.n	800372e <__gethex+0x9e>
 80037a6:	2400      	movs	r4, #0
 80037a8:	1cb1      	adds	r1, r6, #2
 80037aa:	e7cc      	b.n	8003746 <__gethex+0xb6>
 80037ac:	2401      	movs	r4, #1
 80037ae:	e7fb      	b.n	80037a8 <__gethex+0x118>
 80037b0:	fb03 0002 	mla	r0, r3, r2, r0
 80037b4:	e7ce      	b.n	8003754 <__gethex+0xc4>
 80037b6:	4631      	mov	r1, r6
 80037b8:	e7de      	b.n	8003778 <__gethex+0xe8>
 80037ba:	4629      	mov	r1, r5
 80037bc:	eba6 0309 	sub.w	r3, r6, r9
 80037c0:	3b01      	subs	r3, #1
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	dc0a      	bgt.n	80037dc <__gethex+0x14c>
 80037c6:	9801      	ldr	r0, [sp, #4]
 80037c8:	f000 faf4 	bl	8003db4 <_Balloc>
 80037cc:	4604      	mov	r4, r0
 80037ce:	b940      	cbnz	r0, 80037e2 <__gethex+0x152>
 80037d0:	4602      	mov	r2, r0
 80037d2:	21e4      	movs	r1, #228	@ 0xe4
 80037d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003944 <__gethex+0x2b4>)
 80037d6:	485c      	ldr	r0, [pc, #368]	@ (8003948 <__gethex+0x2b8>)
 80037d8:	f001 f852 	bl	8004880 <__assert_func>
 80037dc:	3101      	adds	r1, #1
 80037de:	105b      	asrs	r3, r3, #1
 80037e0:	e7ef      	b.n	80037c2 <__gethex+0x132>
 80037e2:	2300      	movs	r3, #0
 80037e4:	f100 0a14 	add.w	sl, r0, #20
 80037e8:	4655      	mov	r5, sl
 80037ea:	469b      	mov	fp, r3
 80037ec:	45b1      	cmp	r9, r6
 80037ee:	d337      	bcc.n	8003860 <__gethex+0x1d0>
 80037f0:	f845 bb04 	str.w	fp, [r5], #4
 80037f4:	eba5 050a 	sub.w	r5, r5, sl
 80037f8:	10ad      	asrs	r5, r5, #2
 80037fa:	6125      	str	r5, [r4, #16]
 80037fc:	4658      	mov	r0, fp
 80037fe:	f000 fbcb 	bl	8003f98 <__hi0bits>
 8003802:	016d      	lsls	r5, r5, #5
 8003804:	f8d8 6000 	ldr.w	r6, [r8]
 8003808:	1a2d      	subs	r5, r5, r0
 800380a:	42b5      	cmp	r5, r6
 800380c:	dd54      	ble.n	80038b8 <__gethex+0x228>
 800380e:	1bad      	subs	r5, r5, r6
 8003810:	4629      	mov	r1, r5
 8003812:	4620      	mov	r0, r4
 8003814:	f000 ff4d 	bl	80046b2 <__any_on>
 8003818:	4681      	mov	r9, r0
 800381a:	b178      	cbz	r0, 800383c <__gethex+0x1ac>
 800381c:	f04f 0901 	mov.w	r9, #1
 8003820:	1e6b      	subs	r3, r5, #1
 8003822:	1159      	asrs	r1, r3, #5
 8003824:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8003828:	f003 021f 	and.w	r2, r3, #31
 800382c:	fa09 f202 	lsl.w	r2, r9, r2
 8003830:	420a      	tst	r2, r1
 8003832:	d003      	beq.n	800383c <__gethex+0x1ac>
 8003834:	454b      	cmp	r3, r9
 8003836:	dc36      	bgt.n	80038a6 <__gethex+0x216>
 8003838:	f04f 0902 	mov.w	r9, #2
 800383c:	4629      	mov	r1, r5
 800383e:	4620      	mov	r0, r4
 8003840:	f7ff febe 	bl	80035c0 <rshift>
 8003844:	442f      	add	r7, r5
 8003846:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800384a:	42bb      	cmp	r3, r7
 800384c:	da42      	bge.n	80038d4 <__gethex+0x244>
 800384e:	4621      	mov	r1, r4
 8003850:	9801      	ldr	r0, [sp, #4]
 8003852:	f000 faef 	bl	8003e34 <_Bfree>
 8003856:	2300      	movs	r3, #0
 8003858:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800385a:	25a3      	movs	r5, #163	@ 0xa3
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e793      	b.n	8003788 <__gethex+0xf8>
 8003860:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8003864:	2a2e      	cmp	r2, #46	@ 0x2e
 8003866:	d012      	beq.n	800388e <__gethex+0x1fe>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d104      	bne.n	8003876 <__gethex+0x1e6>
 800386c:	f845 bb04 	str.w	fp, [r5], #4
 8003870:	f04f 0b00 	mov.w	fp, #0
 8003874:	465b      	mov	r3, fp
 8003876:	7830      	ldrb	r0, [r6, #0]
 8003878:	9303      	str	r3, [sp, #12]
 800387a:	f7ff fef4 	bl	8003666 <__hexdig_fun>
 800387e:	9b03      	ldr	r3, [sp, #12]
 8003880:	f000 000f 	and.w	r0, r0, #15
 8003884:	4098      	lsls	r0, r3
 8003886:	ea4b 0b00 	orr.w	fp, fp, r0
 800388a:	3304      	adds	r3, #4
 800388c:	e7ae      	b.n	80037ec <__gethex+0x15c>
 800388e:	45b1      	cmp	r9, r6
 8003890:	d8ea      	bhi.n	8003868 <__gethex+0x1d8>
 8003892:	2201      	movs	r2, #1
 8003894:	4630      	mov	r0, r6
 8003896:	492a      	ldr	r1, [pc, #168]	@ (8003940 <__gethex+0x2b0>)
 8003898:	9303      	str	r3, [sp, #12]
 800389a:	f7ff fd9b 	bl	80033d4 <strncmp>
 800389e:	9b03      	ldr	r3, [sp, #12]
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d1e1      	bne.n	8003868 <__gethex+0x1d8>
 80038a4:	e7a2      	b.n	80037ec <__gethex+0x15c>
 80038a6:	4620      	mov	r0, r4
 80038a8:	1ea9      	subs	r1, r5, #2
 80038aa:	f000 ff02 	bl	80046b2 <__any_on>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d0c2      	beq.n	8003838 <__gethex+0x1a8>
 80038b2:	f04f 0903 	mov.w	r9, #3
 80038b6:	e7c1      	b.n	800383c <__gethex+0x1ac>
 80038b8:	da09      	bge.n	80038ce <__gethex+0x23e>
 80038ba:	1b75      	subs	r5, r6, r5
 80038bc:	4621      	mov	r1, r4
 80038be:	462a      	mov	r2, r5
 80038c0:	9801      	ldr	r0, [sp, #4]
 80038c2:	f000 fcc7 	bl	8004254 <__lshift>
 80038c6:	4604      	mov	r4, r0
 80038c8:	1b7f      	subs	r7, r7, r5
 80038ca:	f100 0a14 	add.w	sl, r0, #20
 80038ce:	f04f 0900 	mov.w	r9, #0
 80038d2:	e7b8      	b.n	8003846 <__gethex+0x1b6>
 80038d4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80038d8:	42bd      	cmp	r5, r7
 80038da:	dd6f      	ble.n	80039bc <__gethex+0x32c>
 80038dc:	1bed      	subs	r5, r5, r7
 80038de:	42ae      	cmp	r6, r5
 80038e0:	dc34      	bgt.n	800394c <__gethex+0x2bc>
 80038e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d022      	beq.n	8003930 <__gethex+0x2a0>
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d024      	beq.n	8003938 <__gethex+0x2a8>
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d115      	bne.n	800391e <__gethex+0x28e>
 80038f2:	42ae      	cmp	r6, r5
 80038f4:	d113      	bne.n	800391e <__gethex+0x28e>
 80038f6:	2e01      	cmp	r6, #1
 80038f8:	d10b      	bne.n	8003912 <__gethex+0x282>
 80038fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80038fe:	9a02      	ldr	r2, [sp, #8]
 8003900:	2562      	movs	r5, #98	@ 0x62
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	2301      	movs	r3, #1
 8003906:	6123      	str	r3, [r4, #16]
 8003908:	f8ca 3000 	str.w	r3, [sl]
 800390c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800390e:	601c      	str	r4, [r3, #0]
 8003910:	e73a      	b.n	8003788 <__gethex+0xf8>
 8003912:	4620      	mov	r0, r4
 8003914:	1e71      	subs	r1, r6, #1
 8003916:	f000 fecc 	bl	80046b2 <__any_on>
 800391a:	2800      	cmp	r0, #0
 800391c:	d1ed      	bne.n	80038fa <__gethex+0x26a>
 800391e:	4621      	mov	r1, r4
 8003920:	9801      	ldr	r0, [sp, #4]
 8003922:	f000 fa87 	bl	8003e34 <_Bfree>
 8003926:	2300      	movs	r3, #0
 8003928:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800392a:	2550      	movs	r5, #80	@ 0x50
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e72b      	b.n	8003788 <__gethex+0xf8>
 8003930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f3      	bne.n	800391e <__gethex+0x28e>
 8003936:	e7e0      	b.n	80038fa <__gethex+0x26a>
 8003938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1dd      	bne.n	80038fa <__gethex+0x26a>
 800393e:	e7ee      	b.n	800391e <__gethex+0x28e>
 8003940:	080051b0 	.word	0x080051b0
 8003944:	080051c6 	.word	0x080051c6
 8003948:	080051d7 	.word	0x080051d7
 800394c:	1e6f      	subs	r7, r5, #1
 800394e:	f1b9 0f00 	cmp.w	r9, #0
 8003952:	d130      	bne.n	80039b6 <__gethex+0x326>
 8003954:	b127      	cbz	r7, 8003960 <__gethex+0x2d0>
 8003956:	4639      	mov	r1, r7
 8003958:	4620      	mov	r0, r4
 800395a:	f000 feaa 	bl	80046b2 <__any_on>
 800395e:	4681      	mov	r9, r0
 8003960:	2301      	movs	r3, #1
 8003962:	4629      	mov	r1, r5
 8003964:	1b76      	subs	r6, r6, r5
 8003966:	2502      	movs	r5, #2
 8003968:	117a      	asrs	r2, r7, #5
 800396a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800396e:	f007 071f 	and.w	r7, r7, #31
 8003972:	40bb      	lsls	r3, r7
 8003974:	4213      	tst	r3, r2
 8003976:	4620      	mov	r0, r4
 8003978:	bf18      	it	ne
 800397a:	f049 0902 	orrne.w	r9, r9, #2
 800397e:	f7ff fe1f 	bl	80035c0 <rshift>
 8003982:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8003986:	f1b9 0f00 	cmp.w	r9, #0
 800398a:	d047      	beq.n	8003a1c <__gethex+0x38c>
 800398c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d015      	beq.n	80039c0 <__gethex+0x330>
 8003994:	2b03      	cmp	r3, #3
 8003996:	d017      	beq.n	80039c8 <__gethex+0x338>
 8003998:	2b01      	cmp	r3, #1
 800399a:	d109      	bne.n	80039b0 <__gethex+0x320>
 800399c:	f019 0f02 	tst.w	r9, #2
 80039a0:	d006      	beq.n	80039b0 <__gethex+0x320>
 80039a2:	f8da 3000 	ldr.w	r3, [sl]
 80039a6:	ea49 0903 	orr.w	r9, r9, r3
 80039aa:	f019 0f01 	tst.w	r9, #1
 80039ae:	d10e      	bne.n	80039ce <__gethex+0x33e>
 80039b0:	f045 0510 	orr.w	r5, r5, #16
 80039b4:	e032      	b.n	8003a1c <__gethex+0x38c>
 80039b6:	f04f 0901 	mov.w	r9, #1
 80039ba:	e7d1      	b.n	8003960 <__gethex+0x2d0>
 80039bc:	2501      	movs	r5, #1
 80039be:	e7e2      	b.n	8003986 <__gethex+0x2f6>
 80039c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80039c2:	f1c3 0301 	rsb	r3, r3, #1
 80039c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80039c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <__gethex+0x320>
 80039ce:	f04f 0c00 	mov.w	ip, #0
 80039d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80039d6:	f104 0314 	add.w	r3, r4, #20
 80039da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80039de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039e8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80039ec:	d01b      	beq.n	8003a26 <__gethex+0x396>
 80039ee:	3201      	adds	r2, #1
 80039f0:	6002      	str	r2, [r0, #0]
 80039f2:	2d02      	cmp	r5, #2
 80039f4:	f104 0314 	add.w	r3, r4, #20
 80039f8:	d13c      	bne.n	8003a74 <__gethex+0x3e4>
 80039fa:	f8d8 2000 	ldr.w	r2, [r8]
 80039fe:	3a01      	subs	r2, #1
 8003a00:	42b2      	cmp	r2, r6
 8003a02:	d109      	bne.n	8003a18 <__gethex+0x388>
 8003a04:	2201      	movs	r2, #1
 8003a06:	1171      	asrs	r1, r6, #5
 8003a08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a0c:	f006 061f 	and.w	r6, r6, #31
 8003a10:	fa02 f606 	lsl.w	r6, r2, r6
 8003a14:	421e      	tst	r6, r3
 8003a16:	d13a      	bne.n	8003a8e <__gethex+0x3fe>
 8003a18:	f045 0520 	orr.w	r5, r5, #32
 8003a1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a1e:	601c      	str	r4, [r3, #0]
 8003a20:	9b02      	ldr	r3, [sp, #8]
 8003a22:	601f      	str	r7, [r3, #0]
 8003a24:	e6b0      	b.n	8003788 <__gethex+0xf8>
 8003a26:	4299      	cmp	r1, r3
 8003a28:	f843 cc04 	str.w	ip, [r3, #-4]
 8003a2c:	d8d9      	bhi.n	80039e2 <__gethex+0x352>
 8003a2e:	68a3      	ldr	r3, [r4, #8]
 8003a30:	459b      	cmp	fp, r3
 8003a32:	db17      	blt.n	8003a64 <__gethex+0x3d4>
 8003a34:	6861      	ldr	r1, [r4, #4]
 8003a36:	9801      	ldr	r0, [sp, #4]
 8003a38:	3101      	adds	r1, #1
 8003a3a:	f000 f9bb 	bl	8003db4 <_Balloc>
 8003a3e:	4681      	mov	r9, r0
 8003a40:	b918      	cbnz	r0, 8003a4a <__gethex+0x3ba>
 8003a42:	4602      	mov	r2, r0
 8003a44:	2184      	movs	r1, #132	@ 0x84
 8003a46:	4b19      	ldr	r3, [pc, #100]	@ (8003aac <__gethex+0x41c>)
 8003a48:	e6c5      	b.n	80037d6 <__gethex+0x146>
 8003a4a:	6922      	ldr	r2, [r4, #16]
 8003a4c:	f104 010c 	add.w	r1, r4, #12
 8003a50:	3202      	adds	r2, #2
 8003a52:	0092      	lsls	r2, r2, #2
 8003a54:	300c      	adds	r0, #12
 8003a56:	f7ff fd56 	bl	8003506 <memcpy>
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	9801      	ldr	r0, [sp, #4]
 8003a5e:	f000 f9e9 	bl	8003e34 <_Bfree>
 8003a62:	464c      	mov	r4, r9
 8003a64:	6923      	ldr	r3, [r4, #16]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	6122      	str	r2, [r4, #16]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003a70:	615a      	str	r2, [r3, #20]
 8003a72:	e7be      	b.n	80039f2 <__gethex+0x362>
 8003a74:	6922      	ldr	r2, [r4, #16]
 8003a76:	455a      	cmp	r2, fp
 8003a78:	dd0b      	ble.n	8003a92 <__gethex+0x402>
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f7ff fd9f 	bl	80035c0 <rshift>
 8003a82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003a86:	3701      	adds	r7, #1
 8003a88:	42bb      	cmp	r3, r7
 8003a8a:	f6ff aee0 	blt.w	800384e <__gethex+0x1be>
 8003a8e:	2501      	movs	r5, #1
 8003a90:	e7c2      	b.n	8003a18 <__gethex+0x388>
 8003a92:	f016 061f 	ands.w	r6, r6, #31
 8003a96:	d0fa      	beq.n	8003a8e <__gethex+0x3fe>
 8003a98:	4453      	add	r3, sl
 8003a9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8003a9e:	f000 fa7b 	bl	8003f98 <__hi0bits>
 8003aa2:	f1c6 0620 	rsb	r6, r6, #32
 8003aa6:	42b0      	cmp	r0, r6
 8003aa8:	dbe7      	blt.n	8003a7a <__gethex+0x3ea>
 8003aaa:	e7f0      	b.n	8003a8e <__gethex+0x3fe>
 8003aac:	080051c6 	.word	0x080051c6

08003ab0 <L_shift>:
 8003ab0:	f1c2 0208 	rsb	r2, r2, #8
 8003ab4:	0092      	lsls	r2, r2, #2
 8003ab6:	b570      	push	{r4, r5, r6, lr}
 8003ab8:	f1c2 0620 	rsb	r6, r2, #32
 8003abc:	6843      	ldr	r3, [r0, #4]
 8003abe:	6804      	ldr	r4, [r0, #0]
 8003ac0:	fa03 f506 	lsl.w	r5, r3, r6
 8003ac4:	432c      	orrs	r4, r5
 8003ac6:	40d3      	lsrs	r3, r2
 8003ac8:	6004      	str	r4, [r0, #0]
 8003aca:	f840 3f04 	str.w	r3, [r0, #4]!
 8003ace:	4288      	cmp	r0, r1
 8003ad0:	d3f4      	bcc.n	8003abc <L_shift+0xc>
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}

08003ad4 <__match>:
 8003ad4:	b530      	push	{r4, r5, lr}
 8003ad6:	6803      	ldr	r3, [r0, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ade:	b914      	cbnz	r4, 8003ae6 <__match+0x12>
 8003ae0:	6003      	str	r3, [r0, #0]
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	bd30      	pop	{r4, r5, pc}
 8003ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aea:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8003aee:	2d19      	cmp	r5, #25
 8003af0:	bf98      	it	ls
 8003af2:	3220      	addls	r2, #32
 8003af4:	42a2      	cmp	r2, r4
 8003af6:	d0f0      	beq.n	8003ada <__match+0x6>
 8003af8:	2000      	movs	r0, #0
 8003afa:	e7f3      	b.n	8003ae4 <__match+0x10>

08003afc <__hexnan>:
 8003afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b00:	2500      	movs	r5, #0
 8003b02:	680b      	ldr	r3, [r1, #0]
 8003b04:	4682      	mov	sl, r0
 8003b06:	115e      	asrs	r6, r3, #5
 8003b08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003b0c:	f013 031f 	ands.w	r3, r3, #31
 8003b10:	bf18      	it	ne
 8003b12:	3604      	addne	r6, #4
 8003b14:	1f37      	subs	r7, r6, #4
 8003b16:	4690      	mov	r8, r2
 8003b18:	46b9      	mov	r9, r7
 8003b1a:	463c      	mov	r4, r7
 8003b1c:	46ab      	mov	fp, r5
 8003b1e:	b087      	sub	sp, #28
 8003b20:	6801      	ldr	r1, [r0, #0]
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	f846 5c04 	str.w	r5, [r6, #-4]
 8003b28:	9502      	str	r5, [sp, #8]
 8003b2a:	784a      	ldrb	r2, [r1, #1]
 8003b2c:	1c4b      	adds	r3, r1, #1
 8003b2e:	9303      	str	r3, [sp, #12]
 8003b30:	b342      	cbz	r2, 8003b84 <__hexnan+0x88>
 8003b32:	4610      	mov	r0, r2
 8003b34:	9105      	str	r1, [sp, #20]
 8003b36:	9204      	str	r2, [sp, #16]
 8003b38:	f7ff fd95 	bl	8003666 <__hexdig_fun>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d151      	bne.n	8003be4 <__hexnan+0xe8>
 8003b40:	9a04      	ldr	r2, [sp, #16]
 8003b42:	9905      	ldr	r1, [sp, #20]
 8003b44:	2a20      	cmp	r2, #32
 8003b46:	d818      	bhi.n	8003b7a <__hexnan+0x7e>
 8003b48:	9b02      	ldr	r3, [sp, #8]
 8003b4a:	459b      	cmp	fp, r3
 8003b4c:	dd13      	ble.n	8003b76 <__hexnan+0x7a>
 8003b4e:	454c      	cmp	r4, r9
 8003b50:	d206      	bcs.n	8003b60 <__hexnan+0x64>
 8003b52:	2d07      	cmp	r5, #7
 8003b54:	dc04      	bgt.n	8003b60 <__hexnan+0x64>
 8003b56:	462a      	mov	r2, r5
 8003b58:	4649      	mov	r1, r9
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f7ff ffa8 	bl	8003ab0 <L_shift>
 8003b60:	4544      	cmp	r4, r8
 8003b62:	d952      	bls.n	8003c0a <__hexnan+0x10e>
 8003b64:	2300      	movs	r3, #0
 8003b66:	f1a4 0904 	sub.w	r9, r4, #4
 8003b6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8003b6e:	461d      	mov	r5, r3
 8003b70:	464c      	mov	r4, r9
 8003b72:	f8cd b008 	str.w	fp, [sp, #8]
 8003b76:	9903      	ldr	r1, [sp, #12]
 8003b78:	e7d7      	b.n	8003b2a <__hexnan+0x2e>
 8003b7a:	2a29      	cmp	r2, #41	@ 0x29
 8003b7c:	d157      	bne.n	8003c2e <__hexnan+0x132>
 8003b7e:	3102      	adds	r1, #2
 8003b80:	f8ca 1000 	str.w	r1, [sl]
 8003b84:	f1bb 0f00 	cmp.w	fp, #0
 8003b88:	d051      	beq.n	8003c2e <__hexnan+0x132>
 8003b8a:	454c      	cmp	r4, r9
 8003b8c:	d206      	bcs.n	8003b9c <__hexnan+0xa0>
 8003b8e:	2d07      	cmp	r5, #7
 8003b90:	dc04      	bgt.n	8003b9c <__hexnan+0xa0>
 8003b92:	462a      	mov	r2, r5
 8003b94:	4649      	mov	r1, r9
 8003b96:	4620      	mov	r0, r4
 8003b98:	f7ff ff8a 	bl	8003ab0 <L_shift>
 8003b9c:	4544      	cmp	r4, r8
 8003b9e:	d936      	bls.n	8003c0e <__hexnan+0x112>
 8003ba0:	4623      	mov	r3, r4
 8003ba2:	f1a8 0204 	sub.w	r2, r8, #4
 8003ba6:	f853 1b04 	ldr.w	r1, [r3], #4
 8003baa:	429f      	cmp	r7, r3
 8003bac:	f842 1f04 	str.w	r1, [r2, #4]!
 8003bb0:	d2f9      	bcs.n	8003ba6 <__hexnan+0xaa>
 8003bb2:	1b3b      	subs	r3, r7, r4
 8003bb4:	f023 0303 	bic.w	r3, r3, #3
 8003bb8:	3304      	adds	r3, #4
 8003bba:	3401      	adds	r4, #1
 8003bbc:	3e03      	subs	r6, #3
 8003bbe:	42b4      	cmp	r4, r6
 8003bc0:	bf88      	it	hi
 8003bc2:	2304      	movhi	r3, #4
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4443      	add	r3, r8
 8003bc8:	f843 2b04 	str.w	r2, [r3], #4
 8003bcc:	429f      	cmp	r7, r3
 8003bce:	d2fb      	bcs.n	8003bc8 <__hexnan+0xcc>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	b91b      	cbnz	r3, 8003bdc <__hexnan+0xe0>
 8003bd4:	4547      	cmp	r7, r8
 8003bd6:	d128      	bne.n	8003c2a <__hexnan+0x12e>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	2005      	movs	r0, #5
 8003bde:	b007      	add	sp, #28
 8003be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be4:	3501      	adds	r5, #1
 8003be6:	2d08      	cmp	r5, #8
 8003be8:	f10b 0b01 	add.w	fp, fp, #1
 8003bec:	dd06      	ble.n	8003bfc <__hexnan+0x100>
 8003bee:	4544      	cmp	r4, r8
 8003bf0:	d9c1      	bls.n	8003b76 <__hexnan+0x7a>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2501      	movs	r5, #1
 8003bf6:	f844 3c04 	str.w	r3, [r4, #-4]
 8003bfa:	3c04      	subs	r4, #4
 8003bfc:	6822      	ldr	r2, [r4, #0]
 8003bfe:	f000 000f 	and.w	r0, r0, #15
 8003c02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003c06:	6020      	str	r0, [r4, #0]
 8003c08:	e7b5      	b.n	8003b76 <__hexnan+0x7a>
 8003c0a:	2508      	movs	r5, #8
 8003c0c:	e7b3      	b.n	8003b76 <__hexnan+0x7a>
 8003c0e:	9b01      	ldr	r3, [sp, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0dd      	beq.n	8003bd0 <__hexnan+0xd4>
 8003c14:	f04f 32ff 	mov.w	r2, #4294967295
 8003c18:	f1c3 0320 	rsb	r3, r3, #32
 8003c1c:	40da      	lsrs	r2, r3
 8003c1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003c22:	4013      	ands	r3, r2
 8003c24:	f846 3c04 	str.w	r3, [r6, #-4]
 8003c28:	e7d2      	b.n	8003bd0 <__hexnan+0xd4>
 8003c2a:	3f04      	subs	r7, #4
 8003c2c:	e7d0      	b.n	8003bd0 <__hexnan+0xd4>
 8003c2e:	2004      	movs	r0, #4
 8003c30:	e7d5      	b.n	8003bde <__hexnan+0xe2>
	...

08003c34 <sbrk_aligned>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	4e0f      	ldr	r6, [pc, #60]	@ (8003c74 <sbrk_aligned+0x40>)
 8003c38:	460c      	mov	r4, r1
 8003c3a:	6831      	ldr	r1, [r6, #0]
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	b911      	cbnz	r1, 8003c46 <sbrk_aligned+0x12>
 8003c40:	f000 fe0e 	bl	8004860 <_sbrk_r>
 8003c44:	6030      	str	r0, [r6, #0]
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 fe09 	bl	8004860 <_sbrk_r>
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	d103      	bne.n	8003c5a <sbrk_aligned+0x26>
 8003c52:	f04f 34ff 	mov.w	r4, #4294967295
 8003c56:	4620      	mov	r0, r4
 8003c58:	bd70      	pop	{r4, r5, r6, pc}
 8003c5a:	1cc4      	adds	r4, r0, #3
 8003c5c:	f024 0403 	bic.w	r4, r4, #3
 8003c60:	42a0      	cmp	r0, r4
 8003c62:	d0f8      	beq.n	8003c56 <sbrk_aligned+0x22>
 8003c64:	1a21      	subs	r1, r4, r0
 8003c66:	4628      	mov	r0, r5
 8003c68:	f000 fdfa 	bl	8004860 <_sbrk_r>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d1f2      	bne.n	8003c56 <sbrk_aligned+0x22>
 8003c70:	e7ef      	b.n	8003c52 <sbrk_aligned+0x1e>
 8003c72:	bf00      	nop
 8003c74:	20000440 	.word	0x20000440

08003c78 <_malloc_r>:
 8003c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c7c:	1ccd      	adds	r5, r1, #3
 8003c7e:	f025 0503 	bic.w	r5, r5, #3
 8003c82:	3508      	adds	r5, #8
 8003c84:	2d0c      	cmp	r5, #12
 8003c86:	bf38      	it	cc
 8003c88:	250c      	movcc	r5, #12
 8003c8a:	2d00      	cmp	r5, #0
 8003c8c:	4606      	mov	r6, r0
 8003c8e:	db01      	blt.n	8003c94 <_malloc_r+0x1c>
 8003c90:	42a9      	cmp	r1, r5
 8003c92:	d904      	bls.n	8003c9e <_malloc_r+0x26>
 8003c94:	230c      	movs	r3, #12
 8003c96:	6033      	str	r3, [r6, #0]
 8003c98:	2000      	movs	r0, #0
 8003c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d74 <_malloc_r+0xfc>
 8003ca2:	f000 f87b 	bl	8003d9c <__malloc_lock>
 8003ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8003caa:	461c      	mov	r4, r3
 8003cac:	bb44      	cbnz	r4, 8003d00 <_malloc_r+0x88>
 8003cae:	4629      	mov	r1, r5
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f7ff ffbf 	bl	8003c34 <sbrk_aligned>
 8003cb6:	1c43      	adds	r3, r0, #1
 8003cb8:	4604      	mov	r4, r0
 8003cba:	d158      	bne.n	8003d6e <_malloc_r+0xf6>
 8003cbc:	f8d8 4000 	ldr.w	r4, [r8]
 8003cc0:	4627      	mov	r7, r4
 8003cc2:	2f00      	cmp	r7, #0
 8003cc4:	d143      	bne.n	8003d4e <_malloc_r+0xd6>
 8003cc6:	2c00      	cmp	r4, #0
 8003cc8:	d04b      	beq.n	8003d62 <_malloc_r+0xea>
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	4639      	mov	r1, r7
 8003cce:	4630      	mov	r0, r6
 8003cd0:	eb04 0903 	add.w	r9, r4, r3
 8003cd4:	f000 fdc4 	bl	8004860 <_sbrk_r>
 8003cd8:	4581      	cmp	r9, r0
 8003cda:	d142      	bne.n	8003d62 <_malloc_r+0xea>
 8003cdc:	6821      	ldr	r1, [r4, #0]
 8003cde:	4630      	mov	r0, r6
 8003ce0:	1a6d      	subs	r5, r5, r1
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	f7ff ffa6 	bl	8003c34 <sbrk_aligned>
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d03a      	beq.n	8003d62 <_malloc_r+0xea>
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	442b      	add	r3, r5
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	bb62      	cbnz	r2, 8003d54 <_malloc_r+0xdc>
 8003cfa:	f8c8 7000 	str.w	r7, [r8]
 8003cfe:	e00f      	b.n	8003d20 <_malloc_r+0xa8>
 8003d00:	6822      	ldr	r2, [r4, #0]
 8003d02:	1b52      	subs	r2, r2, r5
 8003d04:	d420      	bmi.n	8003d48 <_malloc_r+0xd0>
 8003d06:	2a0b      	cmp	r2, #11
 8003d08:	d917      	bls.n	8003d3a <_malloc_r+0xc2>
 8003d0a:	1961      	adds	r1, r4, r5
 8003d0c:	42a3      	cmp	r3, r4
 8003d0e:	6025      	str	r5, [r4, #0]
 8003d10:	bf18      	it	ne
 8003d12:	6059      	strne	r1, [r3, #4]
 8003d14:	6863      	ldr	r3, [r4, #4]
 8003d16:	bf08      	it	eq
 8003d18:	f8c8 1000 	streq.w	r1, [r8]
 8003d1c:	5162      	str	r2, [r4, r5]
 8003d1e:	604b      	str	r3, [r1, #4]
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 f841 	bl	8003da8 <__malloc_unlock>
 8003d26:	f104 000b 	add.w	r0, r4, #11
 8003d2a:	1d23      	adds	r3, r4, #4
 8003d2c:	f020 0007 	bic.w	r0, r0, #7
 8003d30:	1ac2      	subs	r2, r0, r3
 8003d32:	bf1c      	itt	ne
 8003d34:	1a1b      	subne	r3, r3, r0
 8003d36:	50a3      	strne	r3, [r4, r2]
 8003d38:	e7af      	b.n	8003c9a <_malloc_r+0x22>
 8003d3a:	6862      	ldr	r2, [r4, #4]
 8003d3c:	42a3      	cmp	r3, r4
 8003d3e:	bf0c      	ite	eq
 8003d40:	f8c8 2000 	streq.w	r2, [r8]
 8003d44:	605a      	strne	r2, [r3, #4]
 8003d46:	e7eb      	b.n	8003d20 <_malloc_r+0xa8>
 8003d48:	4623      	mov	r3, r4
 8003d4a:	6864      	ldr	r4, [r4, #4]
 8003d4c:	e7ae      	b.n	8003cac <_malloc_r+0x34>
 8003d4e:	463c      	mov	r4, r7
 8003d50:	687f      	ldr	r7, [r7, #4]
 8003d52:	e7b6      	b.n	8003cc2 <_malloc_r+0x4a>
 8003d54:	461a      	mov	r2, r3
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	42a3      	cmp	r3, r4
 8003d5a:	d1fb      	bne.n	8003d54 <_malloc_r+0xdc>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	6053      	str	r3, [r2, #4]
 8003d60:	e7de      	b.n	8003d20 <_malloc_r+0xa8>
 8003d62:	230c      	movs	r3, #12
 8003d64:	4630      	mov	r0, r6
 8003d66:	6033      	str	r3, [r6, #0]
 8003d68:	f000 f81e 	bl	8003da8 <__malloc_unlock>
 8003d6c:	e794      	b.n	8003c98 <_malloc_r+0x20>
 8003d6e:	6005      	str	r5, [r0, #0]
 8003d70:	e7d6      	b.n	8003d20 <_malloc_r+0xa8>
 8003d72:	bf00      	nop
 8003d74:	20000444 	.word	0x20000444

08003d78 <__ascii_mbtowc>:
 8003d78:	b082      	sub	sp, #8
 8003d7a:	b901      	cbnz	r1, 8003d7e <__ascii_mbtowc+0x6>
 8003d7c:	a901      	add	r1, sp, #4
 8003d7e:	b142      	cbz	r2, 8003d92 <__ascii_mbtowc+0x1a>
 8003d80:	b14b      	cbz	r3, 8003d96 <__ascii_mbtowc+0x1e>
 8003d82:	7813      	ldrb	r3, [r2, #0]
 8003d84:	600b      	str	r3, [r1, #0]
 8003d86:	7812      	ldrb	r2, [r2, #0]
 8003d88:	1e10      	subs	r0, r2, #0
 8003d8a:	bf18      	it	ne
 8003d8c:	2001      	movne	r0, #1
 8003d8e:	b002      	add	sp, #8
 8003d90:	4770      	bx	lr
 8003d92:	4610      	mov	r0, r2
 8003d94:	e7fb      	b.n	8003d8e <__ascii_mbtowc+0x16>
 8003d96:	f06f 0001 	mvn.w	r0, #1
 8003d9a:	e7f8      	b.n	8003d8e <__ascii_mbtowc+0x16>

08003d9c <__malloc_lock>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	@ (8003da4 <__malloc_lock+0x8>)
 8003d9e:	f7ff bbb0 	b.w	8003502 <__retarget_lock_acquire_recursive>
 8003da2:	bf00      	nop
 8003da4:	2000043c 	.word	0x2000043c

08003da8 <__malloc_unlock>:
 8003da8:	4801      	ldr	r0, [pc, #4]	@ (8003db0 <__malloc_unlock+0x8>)
 8003daa:	f7ff bbab 	b.w	8003504 <__retarget_lock_release_recursive>
 8003dae:	bf00      	nop
 8003db0:	2000043c 	.word	0x2000043c

08003db4 <_Balloc>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	69c6      	ldr	r6, [r0, #28]
 8003db8:	4604      	mov	r4, r0
 8003dba:	460d      	mov	r5, r1
 8003dbc:	b976      	cbnz	r6, 8003ddc <_Balloc+0x28>
 8003dbe:	2010      	movs	r0, #16
 8003dc0:	f000 fd90 	bl	80048e4 <malloc>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	61e0      	str	r0, [r4, #28]
 8003dc8:	b920      	cbnz	r0, 8003dd4 <_Balloc+0x20>
 8003dca:	216b      	movs	r1, #107	@ 0x6b
 8003dcc:	4b17      	ldr	r3, [pc, #92]	@ (8003e2c <_Balloc+0x78>)
 8003dce:	4818      	ldr	r0, [pc, #96]	@ (8003e30 <_Balloc+0x7c>)
 8003dd0:	f000 fd56 	bl	8004880 <__assert_func>
 8003dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003dd8:	6006      	str	r6, [r0, #0]
 8003dda:	60c6      	str	r6, [r0, #12]
 8003ddc:	69e6      	ldr	r6, [r4, #28]
 8003dde:	68f3      	ldr	r3, [r6, #12]
 8003de0:	b183      	cbz	r3, 8003e04 <_Balloc+0x50>
 8003de2:	69e3      	ldr	r3, [r4, #28]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003dea:	b9b8      	cbnz	r0, 8003e1c <_Balloc+0x68>
 8003dec:	2101      	movs	r1, #1
 8003dee:	fa01 f605 	lsl.w	r6, r1, r5
 8003df2:	1d72      	adds	r2, r6, #5
 8003df4:	4620      	mov	r0, r4
 8003df6:	0092      	lsls	r2, r2, #2
 8003df8:	f000 fd60 	bl	80048bc <_calloc_r>
 8003dfc:	b160      	cbz	r0, 8003e18 <_Balloc+0x64>
 8003dfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003e02:	e00e      	b.n	8003e22 <_Balloc+0x6e>
 8003e04:	2221      	movs	r2, #33	@ 0x21
 8003e06:	2104      	movs	r1, #4
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f000 fd57 	bl	80048bc <_calloc_r>
 8003e0e:	69e3      	ldr	r3, [r4, #28]
 8003e10:	60f0      	str	r0, [r6, #12]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e4      	bne.n	8003de2 <_Balloc+0x2e>
 8003e18:	2000      	movs	r0, #0
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	6802      	ldr	r2, [r0, #0]
 8003e1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003e22:	2300      	movs	r3, #0
 8003e24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003e28:	e7f7      	b.n	8003e1a <_Balloc+0x66>
 8003e2a:	bf00      	nop
 8003e2c:	08005237 	.word	0x08005237
 8003e30:	0800524e 	.word	0x0800524e

08003e34 <_Bfree>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	69c6      	ldr	r6, [r0, #28]
 8003e38:	4605      	mov	r5, r0
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	b976      	cbnz	r6, 8003e5c <_Bfree+0x28>
 8003e3e:	2010      	movs	r0, #16
 8003e40:	f000 fd50 	bl	80048e4 <malloc>
 8003e44:	4602      	mov	r2, r0
 8003e46:	61e8      	str	r0, [r5, #28]
 8003e48:	b920      	cbnz	r0, 8003e54 <_Bfree+0x20>
 8003e4a:	218f      	movs	r1, #143	@ 0x8f
 8003e4c:	4b08      	ldr	r3, [pc, #32]	@ (8003e70 <_Bfree+0x3c>)
 8003e4e:	4809      	ldr	r0, [pc, #36]	@ (8003e74 <_Bfree+0x40>)
 8003e50:	f000 fd16 	bl	8004880 <__assert_func>
 8003e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003e58:	6006      	str	r6, [r0, #0]
 8003e5a:	60c6      	str	r6, [r0, #12]
 8003e5c:	b13c      	cbz	r4, 8003e6e <_Bfree+0x3a>
 8003e5e:	69eb      	ldr	r3, [r5, #28]
 8003e60:	6862      	ldr	r2, [r4, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e68:	6021      	str	r1, [r4, #0]
 8003e6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	08005237 	.word	0x08005237
 8003e74:	0800524e 	.word	0x0800524e

08003e78 <__multadd>:
 8003e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	460c      	mov	r4, r1
 8003e80:	461e      	mov	r6, r3
 8003e82:	2000      	movs	r0, #0
 8003e84:	690d      	ldr	r5, [r1, #16]
 8003e86:	f101 0c14 	add.w	ip, r1, #20
 8003e8a:	f8dc 3000 	ldr.w	r3, [ip]
 8003e8e:	3001      	adds	r0, #1
 8003e90:	b299      	uxth	r1, r3
 8003e92:	fb02 6101 	mla	r1, r2, r1, r6
 8003e96:	0c1e      	lsrs	r6, r3, #16
 8003e98:	0c0b      	lsrs	r3, r1, #16
 8003e9a:	fb02 3306 	mla	r3, r2, r6, r3
 8003e9e:	b289      	uxth	r1, r1
 8003ea0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003ea4:	4285      	cmp	r5, r0
 8003ea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003eaa:	f84c 1b04 	str.w	r1, [ip], #4
 8003eae:	dcec      	bgt.n	8003e8a <__multadd+0x12>
 8003eb0:	b30e      	cbz	r6, 8003ef6 <__multadd+0x7e>
 8003eb2:	68a3      	ldr	r3, [r4, #8]
 8003eb4:	42ab      	cmp	r3, r5
 8003eb6:	dc19      	bgt.n	8003eec <__multadd+0x74>
 8003eb8:	6861      	ldr	r1, [r4, #4]
 8003eba:	4638      	mov	r0, r7
 8003ebc:	3101      	adds	r1, #1
 8003ebe:	f7ff ff79 	bl	8003db4 <_Balloc>
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	b928      	cbnz	r0, 8003ed2 <__multadd+0x5a>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	21ba      	movs	r1, #186	@ 0xba
 8003eca:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <__multadd+0x84>)
 8003ecc:	480c      	ldr	r0, [pc, #48]	@ (8003f00 <__multadd+0x88>)
 8003ece:	f000 fcd7 	bl	8004880 <__assert_func>
 8003ed2:	6922      	ldr	r2, [r4, #16]
 8003ed4:	f104 010c 	add.w	r1, r4, #12
 8003ed8:	3202      	adds	r2, #2
 8003eda:	0092      	lsls	r2, r2, #2
 8003edc:	300c      	adds	r0, #12
 8003ede:	f7ff fb12 	bl	8003506 <memcpy>
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f7ff ffa5 	bl	8003e34 <_Bfree>
 8003eea:	4644      	mov	r4, r8
 8003eec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003ef0:	3501      	adds	r5, #1
 8003ef2:	615e      	str	r6, [r3, #20]
 8003ef4:	6125      	str	r5, [r4, #16]
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003efc:	080051c6 	.word	0x080051c6
 8003f00:	0800524e 	.word	0x0800524e

08003f04 <__s2b>:
 8003f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f08:	4615      	mov	r5, r2
 8003f0a:	2209      	movs	r2, #9
 8003f0c:	461f      	mov	r7, r3
 8003f0e:	3308      	adds	r3, #8
 8003f10:	460c      	mov	r4, r1
 8003f12:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f16:	4606      	mov	r6, r0
 8003f18:	2201      	movs	r2, #1
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	db09      	blt.n	8003f34 <__s2b+0x30>
 8003f20:	4630      	mov	r0, r6
 8003f22:	f7ff ff47 	bl	8003db4 <_Balloc>
 8003f26:	b940      	cbnz	r0, 8003f3a <__s2b+0x36>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	21d3      	movs	r1, #211	@ 0xd3
 8003f2c:	4b18      	ldr	r3, [pc, #96]	@ (8003f90 <__s2b+0x8c>)
 8003f2e:	4819      	ldr	r0, [pc, #100]	@ (8003f94 <__s2b+0x90>)
 8003f30:	f000 fca6 	bl	8004880 <__assert_func>
 8003f34:	0052      	lsls	r2, r2, #1
 8003f36:	3101      	adds	r1, #1
 8003f38:	e7f0      	b.n	8003f1c <__s2b+0x18>
 8003f3a:	9b08      	ldr	r3, [sp, #32]
 8003f3c:	2d09      	cmp	r5, #9
 8003f3e:	6143      	str	r3, [r0, #20]
 8003f40:	f04f 0301 	mov.w	r3, #1
 8003f44:	6103      	str	r3, [r0, #16]
 8003f46:	dd16      	ble.n	8003f76 <__s2b+0x72>
 8003f48:	f104 0909 	add.w	r9, r4, #9
 8003f4c:	46c8      	mov	r8, r9
 8003f4e:	442c      	add	r4, r5
 8003f50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003f54:	4601      	mov	r1, r0
 8003f56:	220a      	movs	r2, #10
 8003f58:	4630      	mov	r0, r6
 8003f5a:	3b30      	subs	r3, #48	@ 0x30
 8003f5c:	f7ff ff8c 	bl	8003e78 <__multadd>
 8003f60:	45a0      	cmp	r8, r4
 8003f62:	d1f5      	bne.n	8003f50 <__s2b+0x4c>
 8003f64:	f1a5 0408 	sub.w	r4, r5, #8
 8003f68:	444c      	add	r4, r9
 8003f6a:	1b2d      	subs	r5, r5, r4
 8003f6c:	1963      	adds	r3, r4, r5
 8003f6e:	42bb      	cmp	r3, r7
 8003f70:	db04      	blt.n	8003f7c <__s2b+0x78>
 8003f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f76:	2509      	movs	r5, #9
 8003f78:	340a      	adds	r4, #10
 8003f7a:	e7f6      	b.n	8003f6a <__s2b+0x66>
 8003f7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f80:	4601      	mov	r1, r0
 8003f82:	220a      	movs	r2, #10
 8003f84:	4630      	mov	r0, r6
 8003f86:	3b30      	subs	r3, #48	@ 0x30
 8003f88:	f7ff ff76 	bl	8003e78 <__multadd>
 8003f8c:	e7ee      	b.n	8003f6c <__s2b+0x68>
 8003f8e:	bf00      	nop
 8003f90:	080051c6 	.word	0x080051c6
 8003f94:	0800524e 	.word	0x0800524e

08003f98 <__hi0bits>:
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003f9e:	bf3a      	itte	cc
 8003fa0:	0403      	lslcc	r3, r0, #16
 8003fa2:	2010      	movcc	r0, #16
 8003fa4:	2000      	movcs	r0, #0
 8003fa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003faa:	bf3c      	itt	cc
 8003fac:	021b      	lslcc	r3, r3, #8
 8003fae:	3008      	addcc	r0, #8
 8003fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fb4:	bf3c      	itt	cc
 8003fb6:	011b      	lslcc	r3, r3, #4
 8003fb8:	3004      	addcc	r0, #4
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fbe:	bf3c      	itt	cc
 8003fc0:	009b      	lslcc	r3, r3, #2
 8003fc2:	3002      	addcc	r0, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	db05      	blt.n	8003fd4 <__hi0bits+0x3c>
 8003fc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003fcc:	f100 0001 	add.w	r0, r0, #1
 8003fd0:	bf08      	it	eq
 8003fd2:	2020      	moveq	r0, #32
 8003fd4:	4770      	bx	lr

08003fd6 <__lo0bits>:
 8003fd6:	6803      	ldr	r3, [r0, #0]
 8003fd8:	4602      	mov	r2, r0
 8003fda:	f013 0007 	ands.w	r0, r3, #7
 8003fde:	d00b      	beq.n	8003ff8 <__lo0bits+0x22>
 8003fe0:	07d9      	lsls	r1, r3, #31
 8003fe2:	d421      	bmi.n	8004028 <__lo0bits+0x52>
 8003fe4:	0798      	lsls	r0, r3, #30
 8003fe6:	bf49      	itett	mi
 8003fe8:	085b      	lsrmi	r3, r3, #1
 8003fea:	089b      	lsrpl	r3, r3, #2
 8003fec:	2001      	movmi	r0, #1
 8003fee:	6013      	strmi	r3, [r2, #0]
 8003ff0:	bf5c      	itt	pl
 8003ff2:	2002      	movpl	r0, #2
 8003ff4:	6013      	strpl	r3, [r2, #0]
 8003ff6:	4770      	bx	lr
 8003ff8:	b299      	uxth	r1, r3
 8003ffa:	b909      	cbnz	r1, 8004000 <__lo0bits+0x2a>
 8003ffc:	2010      	movs	r0, #16
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	b2d9      	uxtb	r1, r3
 8004002:	b909      	cbnz	r1, 8004008 <__lo0bits+0x32>
 8004004:	3008      	adds	r0, #8
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	0719      	lsls	r1, r3, #28
 800400a:	bf04      	itt	eq
 800400c:	091b      	lsreq	r3, r3, #4
 800400e:	3004      	addeq	r0, #4
 8004010:	0799      	lsls	r1, r3, #30
 8004012:	bf04      	itt	eq
 8004014:	089b      	lsreq	r3, r3, #2
 8004016:	3002      	addeq	r0, #2
 8004018:	07d9      	lsls	r1, r3, #31
 800401a:	d403      	bmi.n	8004024 <__lo0bits+0x4e>
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	f100 0001 	add.w	r0, r0, #1
 8004022:	d003      	beq.n	800402c <__lo0bits+0x56>
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4770      	bx	lr
 8004028:	2000      	movs	r0, #0
 800402a:	4770      	bx	lr
 800402c:	2020      	movs	r0, #32
 800402e:	4770      	bx	lr

08004030 <__i2b>:
 8004030:	b510      	push	{r4, lr}
 8004032:	460c      	mov	r4, r1
 8004034:	2101      	movs	r1, #1
 8004036:	f7ff febd 	bl	8003db4 <_Balloc>
 800403a:	4602      	mov	r2, r0
 800403c:	b928      	cbnz	r0, 800404a <__i2b+0x1a>
 800403e:	f240 1145 	movw	r1, #325	@ 0x145
 8004042:	4b04      	ldr	r3, [pc, #16]	@ (8004054 <__i2b+0x24>)
 8004044:	4804      	ldr	r0, [pc, #16]	@ (8004058 <__i2b+0x28>)
 8004046:	f000 fc1b 	bl	8004880 <__assert_func>
 800404a:	2301      	movs	r3, #1
 800404c:	6144      	str	r4, [r0, #20]
 800404e:	6103      	str	r3, [r0, #16]
 8004050:	bd10      	pop	{r4, pc}
 8004052:	bf00      	nop
 8004054:	080051c6 	.word	0x080051c6
 8004058:	0800524e 	.word	0x0800524e

0800405c <__multiply>:
 800405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	4617      	mov	r7, r2
 8004062:	690a      	ldr	r2, [r1, #16]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4689      	mov	r9, r1
 8004068:	429a      	cmp	r2, r3
 800406a:	bfa2      	ittt	ge
 800406c:	463b      	movge	r3, r7
 800406e:	460f      	movge	r7, r1
 8004070:	4699      	movge	r9, r3
 8004072:	693d      	ldr	r5, [r7, #16]
 8004074:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	eb05 060a 	add.w	r6, r5, sl
 8004080:	42b3      	cmp	r3, r6
 8004082:	b085      	sub	sp, #20
 8004084:	bfb8      	it	lt
 8004086:	3101      	addlt	r1, #1
 8004088:	f7ff fe94 	bl	8003db4 <_Balloc>
 800408c:	b930      	cbnz	r0, 800409c <__multiply+0x40>
 800408e:	4602      	mov	r2, r0
 8004090:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004094:	4b40      	ldr	r3, [pc, #256]	@ (8004198 <__multiply+0x13c>)
 8004096:	4841      	ldr	r0, [pc, #260]	@ (800419c <__multiply+0x140>)
 8004098:	f000 fbf2 	bl	8004880 <__assert_func>
 800409c:	f100 0414 	add.w	r4, r0, #20
 80040a0:	4623      	mov	r3, r4
 80040a2:	2200      	movs	r2, #0
 80040a4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80040a8:	4573      	cmp	r3, lr
 80040aa:	d320      	bcc.n	80040ee <__multiply+0x92>
 80040ac:	f107 0814 	add.w	r8, r7, #20
 80040b0:	f109 0114 	add.w	r1, r9, #20
 80040b4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80040b8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80040bc:	9302      	str	r3, [sp, #8]
 80040be:	1beb      	subs	r3, r5, r7
 80040c0:	3b15      	subs	r3, #21
 80040c2:	f023 0303 	bic.w	r3, r3, #3
 80040c6:	3304      	adds	r3, #4
 80040c8:	3715      	adds	r7, #21
 80040ca:	42bd      	cmp	r5, r7
 80040cc:	bf38      	it	cc
 80040ce:	2304      	movcc	r3, #4
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	9b02      	ldr	r3, [sp, #8]
 80040d4:	9103      	str	r1, [sp, #12]
 80040d6:	428b      	cmp	r3, r1
 80040d8:	d80c      	bhi.n	80040f4 <__multiply+0x98>
 80040da:	2e00      	cmp	r6, #0
 80040dc:	dd03      	ble.n	80040e6 <__multiply+0x8a>
 80040de:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d055      	beq.n	8004192 <__multiply+0x136>
 80040e6:	6106      	str	r6, [r0, #16]
 80040e8:	b005      	add	sp, #20
 80040ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ee:	f843 2b04 	str.w	r2, [r3], #4
 80040f2:	e7d9      	b.n	80040a8 <__multiply+0x4c>
 80040f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80040f8:	f1ba 0f00 	cmp.w	sl, #0
 80040fc:	d01f      	beq.n	800413e <__multiply+0xe2>
 80040fe:	46c4      	mov	ip, r8
 8004100:	46a1      	mov	r9, r4
 8004102:	2700      	movs	r7, #0
 8004104:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004108:	f8d9 3000 	ldr.w	r3, [r9]
 800410c:	fa1f fb82 	uxth.w	fp, r2
 8004110:	b29b      	uxth	r3, r3
 8004112:	fb0a 330b 	mla	r3, sl, fp, r3
 8004116:	443b      	add	r3, r7
 8004118:	f8d9 7000 	ldr.w	r7, [r9]
 800411c:	0c12      	lsrs	r2, r2, #16
 800411e:	0c3f      	lsrs	r7, r7, #16
 8004120:	fb0a 7202 	mla	r2, sl, r2, r7
 8004124:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004128:	b29b      	uxth	r3, r3
 800412a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800412e:	4565      	cmp	r5, ip
 8004130:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004134:	f849 3b04 	str.w	r3, [r9], #4
 8004138:	d8e4      	bhi.n	8004104 <__multiply+0xa8>
 800413a:	9b01      	ldr	r3, [sp, #4]
 800413c:	50e7      	str	r7, [r4, r3]
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	3104      	adds	r1, #4
 8004142:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004146:	f1b9 0f00 	cmp.w	r9, #0
 800414a:	d020      	beq.n	800418e <__multiply+0x132>
 800414c:	4647      	mov	r7, r8
 800414e:	46a4      	mov	ip, r4
 8004150:	f04f 0a00 	mov.w	sl, #0
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f8b7 b000 	ldrh.w	fp, [r7]
 800415a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800415e:	b29b      	uxth	r3, r3
 8004160:	fb09 220b 	mla	r2, r9, fp, r2
 8004164:	4452      	add	r2, sl
 8004166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800416a:	f84c 3b04 	str.w	r3, [ip], #4
 800416e:	f857 3b04 	ldr.w	r3, [r7], #4
 8004172:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004176:	f8bc 3000 	ldrh.w	r3, [ip]
 800417a:	42bd      	cmp	r5, r7
 800417c:	fb09 330a 	mla	r3, r9, sl, r3
 8004180:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004188:	d8e5      	bhi.n	8004156 <__multiply+0xfa>
 800418a:	9a01      	ldr	r2, [sp, #4]
 800418c:	50a3      	str	r3, [r4, r2]
 800418e:	3404      	adds	r4, #4
 8004190:	e79f      	b.n	80040d2 <__multiply+0x76>
 8004192:	3e01      	subs	r6, #1
 8004194:	e7a1      	b.n	80040da <__multiply+0x7e>
 8004196:	bf00      	nop
 8004198:	080051c6 	.word	0x080051c6
 800419c:	0800524e 	.word	0x0800524e

080041a0 <__pow5mult>:
 80041a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a4:	4615      	mov	r5, r2
 80041a6:	f012 0203 	ands.w	r2, r2, #3
 80041aa:	4607      	mov	r7, r0
 80041ac:	460e      	mov	r6, r1
 80041ae:	d007      	beq.n	80041c0 <__pow5mult+0x20>
 80041b0:	4c25      	ldr	r4, [pc, #148]	@ (8004248 <__pow5mult+0xa8>)
 80041b2:	3a01      	subs	r2, #1
 80041b4:	2300      	movs	r3, #0
 80041b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80041ba:	f7ff fe5d 	bl	8003e78 <__multadd>
 80041be:	4606      	mov	r6, r0
 80041c0:	10ad      	asrs	r5, r5, #2
 80041c2:	d03d      	beq.n	8004240 <__pow5mult+0xa0>
 80041c4:	69fc      	ldr	r4, [r7, #28]
 80041c6:	b97c      	cbnz	r4, 80041e8 <__pow5mult+0x48>
 80041c8:	2010      	movs	r0, #16
 80041ca:	f000 fb8b 	bl	80048e4 <malloc>
 80041ce:	4602      	mov	r2, r0
 80041d0:	61f8      	str	r0, [r7, #28]
 80041d2:	b928      	cbnz	r0, 80041e0 <__pow5mult+0x40>
 80041d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80041d8:	4b1c      	ldr	r3, [pc, #112]	@ (800424c <__pow5mult+0xac>)
 80041da:	481d      	ldr	r0, [pc, #116]	@ (8004250 <__pow5mult+0xb0>)
 80041dc:	f000 fb50 	bl	8004880 <__assert_func>
 80041e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80041e4:	6004      	str	r4, [r0, #0]
 80041e6:	60c4      	str	r4, [r0, #12]
 80041e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80041ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80041f0:	b94c      	cbnz	r4, 8004206 <__pow5mult+0x66>
 80041f2:	f240 2171 	movw	r1, #625	@ 0x271
 80041f6:	4638      	mov	r0, r7
 80041f8:	f7ff ff1a 	bl	8004030 <__i2b>
 80041fc:	2300      	movs	r3, #0
 80041fe:	4604      	mov	r4, r0
 8004200:	f8c8 0008 	str.w	r0, [r8, #8]
 8004204:	6003      	str	r3, [r0, #0]
 8004206:	f04f 0900 	mov.w	r9, #0
 800420a:	07eb      	lsls	r3, r5, #31
 800420c:	d50a      	bpl.n	8004224 <__pow5mult+0x84>
 800420e:	4631      	mov	r1, r6
 8004210:	4622      	mov	r2, r4
 8004212:	4638      	mov	r0, r7
 8004214:	f7ff ff22 	bl	800405c <__multiply>
 8004218:	4680      	mov	r8, r0
 800421a:	4631      	mov	r1, r6
 800421c:	4638      	mov	r0, r7
 800421e:	f7ff fe09 	bl	8003e34 <_Bfree>
 8004222:	4646      	mov	r6, r8
 8004224:	106d      	asrs	r5, r5, #1
 8004226:	d00b      	beq.n	8004240 <__pow5mult+0xa0>
 8004228:	6820      	ldr	r0, [r4, #0]
 800422a:	b938      	cbnz	r0, 800423c <__pow5mult+0x9c>
 800422c:	4622      	mov	r2, r4
 800422e:	4621      	mov	r1, r4
 8004230:	4638      	mov	r0, r7
 8004232:	f7ff ff13 	bl	800405c <__multiply>
 8004236:	6020      	str	r0, [r4, #0]
 8004238:	f8c0 9000 	str.w	r9, [r0]
 800423c:	4604      	mov	r4, r0
 800423e:	e7e4      	b.n	800420a <__pow5mult+0x6a>
 8004240:	4630      	mov	r0, r6
 8004242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004246:	bf00      	nop
 8004248:	08005368 	.word	0x08005368
 800424c:	08005237 	.word	0x08005237
 8004250:	0800524e 	.word	0x0800524e

08004254 <__lshift>:
 8004254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	460c      	mov	r4, r1
 800425a:	4607      	mov	r7, r0
 800425c:	4691      	mov	r9, r2
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	6849      	ldr	r1, [r1, #4]
 8004262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004266:	68a3      	ldr	r3, [r4, #8]
 8004268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800426c:	f108 0601 	add.w	r6, r8, #1
 8004270:	42b3      	cmp	r3, r6
 8004272:	db0b      	blt.n	800428c <__lshift+0x38>
 8004274:	4638      	mov	r0, r7
 8004276:	f7ff fd9d 	bl	8003db4 <_Balloc>
 800427a:	4605      	mov	r5, r0
 800427c:	b948      	cbnz	r0, 8004292 <__lshift+0x3e>
 800427e:	4602      	mov	r2, r0
 8004280:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004284:	4b27      	ldr	r3, [pc, #156]	@ (8004324 <__lshift+0xd0>)
 8004286:	4828      	ldr	r0, [pc, #160]	@ (8004328 <__lshift+0xd4>)
 8004288:	f000 fafa 	bl	8004880 <__assert_func>
 800428c:	3101      	adds	r1, #1
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	e7ee      	b.n	8004270 <__lshift+0x1c>
 8004292:	2300      	movs	r3, #0
 8004294:	f100 0114 	add.w	r1, r0, #20
 8004298:	f100 0210 	add.w	r2, r0, #16
 800429c:	4618      	mov	r0, r3
 800429e:	4553      	cmp	r3, sl
 80042a0:	db33      	blt.n	800430a <__lshift+0xb6>
 80042a2:	6920      	ldr	r0, [r4, #16]
 80042a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80042a8:	f104 0314 	add.w	r3, r4, #20
 80042ac:	f019 091f 	ands.w	r9, r9, #31
 80042b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80042b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80042b8:	d02b      	beq.n	8004312 <__lshift+0xbe>
 80042ba:	468a      	mov	sl, r1
 80042bc:	2200      	movs	r2, #0
 80042be:	f1c9 0e20 	rsb	lr, r9, #32
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	fa00 f009 	lsl.w	r0, r0, r9
 80042c8:	4310      	orrs	r0, r2
 80042ca:	f84a 0b04 	str.w	r0, [sl], #4
 80042ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80042d2:	459c      	cmp	ip, r3
 80042d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80042d8:	d8f3      	bhi.n	80042c2 <__lshift+0x6e>
 80042da:	ebac 0304 	sub.w	r3, ip, r4
 80042de:	3b15      	subs	r3, #21
 80042e0:	f023 0303 	bic.w	r3, r3, #3
 80042e4:	3304      	adds	r3, #4
 80042e6:	f104 0015 	add.w	r0, r4, #21
 80042ea:	4560      	cmp	r0, ip
 80042ec:	bf88      	it	hi
 80042ee:	2304      	movhi	r3, #4
 80042f0:	50ca      	str	r2, [r1, r3]
 80042f2:	b10a      	cbz	r2, 80042f8 <__lshift+0xa4>
 80042f4:	f108 0602 	add.w	r6, r8, #2
 80042f8:	3e01      	subs	r6, #1
 80042fa:	4638      	mov	r0, r7
 80042fc:	4621      	mov	r1, r4
 80042fe:	612e      	str	r6, [r5, #16]
 8004300:	f7ff fd98 	bl	8003e34 <_Bfree>
 8004304:	4628      	mov	r0, r5
 8004306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430a:	f842 0f04 	str.w	r0, [r2, #4]!
 800430e:	3301      	adds	r3, #1
 8004310:	e7c5      	b.n	800429e <__lshift+0x4a>
 8004312:	3904      	subs	r1, #4
 8004314:	f853 2b04 	ldr.w	r2, [r3], #4
 8004318:	459c      	cmp	ip, r3
 800431a:	f841 2f04 	str.w	r2, [r1, #4]!
 800431e:	d8f9      	bhi.n	8004314 <__lshift+0xc0>
 8004320:	e7ea      	b.n	80042f8 <__lshift+0xa4>
 8004322:	bf00      	nop
 8004324:	080051c6 	.word	0x080051c6
 8004328:	0800524e 	.word	0x0800524e

0800432c <__mcmp>:
 800432c:	4603      	mov	r3, r0
 800432e:	690a      	ldr	r2, [r1, #16]
 8004330:	6900      	ldr	r0, [r0, #16]
 8004332:	b530      	push	{r4, r5, lr}
 8004334:	1a80      	subs	r0, r0, r2
 8004336:	d10e      	bne.n	8004356 <__mcmp+0x2a>
 8004338:	3314      	adds	r3, #20
 800433a:	3114      	adds	r1, #20
 800433c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004340:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004344:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004348:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800434c:	4295      	cmp	r5, r2
 800434e:	d003      	beq.n	8004358 <__mcmp+0x2c>
 8004350:	d205      	bcs.n	800435e <__mcmp+0x32>
 8004352:	f04f 30ff 	mov.w	r0, #4294967295
 8004356:	bd30      	pop	{r4, r5, pc}
 8004358:	42a3      	cmp	r3, r4
 800435a:	d3f3      	bcc.n	8004344 <__mcmp+0x18>
 800435c:	e7fb      	b.n	8004356 <__mcmp+0x2a>
 800435e:	2001      	movs	r0, #1
 8004360:	e7f9      	b.n	8004356 <__mcmp+0x2a>
	...

08004364 <__mdiff>:
 8004364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004368:	4689      	mov	r9, r1
 800436a:	4606      	mov	r6, r0
 800436c:	4611      	mov	r1, r2
 800436e:	4648      	mov	r0, r9
 8004370:	4614      	mov	r4, r2
 8004372:	f7ff ffdb 	bl	800432c <__mcmp>
 8004376:	1e05      	subs	r5, r0, #0
 8004378:	d112      	bne.n	80043a0 <__mdiff+0x3c>
 800437a:	4629      	mov	r1, r5
 800437c:	4630      	mov	r0, r6
 800437e:	f7ff fd19 	bl	8003db4 <_Balloc>
 8004382:	4602      	mov	r2, r0
 8004384:	b928      	cbnz	r0, 8004392 <__mdiff+0x2e>
 8004386:	f240 2137 	movw	r1, #567	@ 0x237
 800438a:	4b3e      	ldr	r3, [pc, #248]	@ (8004484 <__mdiff+0x120>)
 800438c:	483e      	ldr	r0, [pc, #248]	@ (8004488 <__mdiff+0x124>)
 800438e:	f000 fa77 	bl	8004880 <__assert_func>
 8004392:	2301      	movs	r3, #1
 8004394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004398:	4610      	mov	r0, r2
 800439a:	b003      	add	sp, #12
 800439c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a0:	bfbc      	itt	lt
 80043a2:	464b      	movlt	r3, r9
 80043a4:	46a1      	movlt	r9, r4
 80043a6:	4630      	mov	r0, r6
 80043a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80043ac:	bfba      	itte	lt
 80043ae:	461c      	movlt	r4, r3
 80043b0:	2501      	movlt	r5, #1
 80043b2:	2500      	movge	r5, #0
 80043b4:	f7ff fcfe 	bl	8003db4 <_Balloc>
 80043b8:	4602      	mov	r2, r0
 80043ba:	b918      	cbnz	r0, 80043c4 <__mdiff+0x60>
 80043bc:	f240 2145 	movw	r1, #581	@ 0x245
 80043c0:	4b30      	ldr	r3, [pc, #192]	@ (8004484 <__mdiff+0x120>)
 80043c2:	e7e3      	b.n	800438c <__mdiff+0x28>
 80043c4:	f100 0b14 	add.w	fp, r0, #20
 80043c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80043cc:	f109 0310 	add.w	r3, r9, #16
 80043d0:	60c5      	str	r5, [r0, #12]
 80043d2:	f04f 0c00 	mov.w	ip, #0
 80043d6:	f109 0514 	add.w	r5, r9, #20
 80043da:	46d9      	mov	r9, fp
 80043dc:	6926      	ldr	r6, [r4, #16]
 80043de:	f104 0e14 	add.w	lr, r4, #20
 80043e2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80043e6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80043ea:	9301      	str	r3, [sp, #4]
 80043ec:	9b01      	ldr	r3, [sp, #4]
 80043ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80043f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80043f6:	b281      	uxth	r1, r0
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	fa1f f38a 	uxth.w	r3, sl
 80043fe:	1a5b      	subs	r3, r3, r1
 8004400:	0c00      	lsrs	r0, r0, #16
 8004402:	4463      	add	r3, ip
 8004404:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004408:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800440c:	b29b      	uxth	r3, r3
 800440e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004412:	4576      	cmp	r6, lr
 8004414:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004418:	f849 3b04 	str.w	r3, [r9], #4
 800441c:	d8e6      	bhi.n	80043ec <__mdiff+0x88>
 800441e:	1b33      	subs	r3, r6, r4
 8004420:	3b15      	subs	r3, #21
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	3415      	adds	r4, #21
 8004428:	3304      	adds	r3, #4
 800442a:	42a6      	cmp	r6, r4
 800442c:	bf38      	it	cc
 800442e:	2304      	movcc	r3, #4
 8004430:	441d      	add	r5, r3
 8004432:	445b      	add	r3, fp
 8004434:	461e      	mov	r6, r3
 8004436:	462c      	mov	r4, r5
 8004438:	4544      	cmp	r4, r8
 800443a:	d30e      	bcc.n	800445a <__mdiff+0xf6>
 800443c:	f108 0103 	add.w	r1, r8, #3
 8004440:	1b49      	subs	r1, r1, r5
 8004442:	f021 0103 	bic.w	r1, r1, #3
 8004446:	3d03      	subs	r5, #3
 8004448:	45a8      	cmp	r8, r5
 800444a:	bf38      	it	cc
 800444c:	2100      	movcc	r1, #0
 800444e:	440b      	add	r3, r1
 8004450:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004454:	b199      	cbz	r1, 800447e <__mdiff+0x11a>
 8004456:	6117      	str	r7, [r2, #16]
 8004458:	e79e      	b.n	8004398 <__mdiff+0x34>
 800445a:	46e6      	mov	lr, ip
 800445c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004460:	fa1f fc81 	uxth.w	ip, r1
 8004464:	44f4      	add	ip, lr
 8004466:	0c08      	lsrs	r0, r1, #16
 8004468:	4471      	add	r1, lr
 800446a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800446e:	b289      	uxth	r1, r1
 8004470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004474:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004478:	f846 1b04 	str.w	r1, [r6], #4
 800447c:	e7dc      	b.n	8004438 <__mdiff+0xd4>
 800447e:	3f01      	subs	r7, #1
 8004480:	e7e6      	b.n	8004450 <__mdiff+0xec>
 8004482:	bf00      	nop
 8004484:	080051c6 	.word	0x080051c6
 8004488:	0800524e 	.word	0x0800524e

0800448c <__ulp>:
 800448c:	4b0e      	ldr	r3, [pc, #56]	@ (80044c8 <__ulp+0x3c>)
 800448e:	400b      	ands	r3, r1
 8004490:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8004494:	2b00      	cmp	r3, #0
 8004496:	dc08      	bgt.n	80044aa <__ulp+0x1e>
 8004498:	425b      	negs	r3, r3
 800449a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800449e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80044a2:	da04      	bge.n	80044ae <__ulp+0x22>
 80044a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80044a8:	4113      	asrs	r3, r2
 80044aa:	2200      	movs	r2, #0
 80044ac:	e008      	b.n	80044c0 <__ulp+0x34>
 80044ae:	f1a2 0314 	sub.w	r3, r2, #20
 80044b2:	2b1e      	cmp	r3, #30
 80044b4:	bfd6      	itet	le
 80044b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80044ba:	2201      	movgt	r2, #1
 80044bc:	40da      	lsrle	r2, r3
 80044be:	2300      	movs	r3, #0
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	7ff00000 	.word	0x7ff00000

080044cc <__b2d>:
 80044cc:	6902      	ldr	r2, [r0, #16]
 80044ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d0:	f100 0614 	add.w	r6, r0, #20
 80044d4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80044d8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80044dc:	4f1e      	ldr	r7, [pc, #120]	@ (8004558 <__b2d+0x8c>)
 80044de:	4620      	mov	r0, r4
 80044e0:	f7ff fd5a 	bl	8003f98 <__hi0bits>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f1c0 0020 	rsb	r0, r0, #32
 80044ea:	2b0a      	cmp	r3, #10
 80044ec:	f1a2 0504 	sub.w	r5, r2, #4
 80044f0:	6008      	str	r0, [r1, #0]
 80044f2:	dc12      	bgt.n	800451a <__b2d+0x4e>
 80044f4:	42ae      	cmp	r6, r5
 80044f6:	bf2c      	ite	cs
 80044f8:	2200      	movcs	r2, #0
 80044fa:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80044fe:	f1c3 0c0b 	rsb	ip, r3, #11
 8004502:	3315      	adds	r3, #21
 8004504:	fa24 fe0c 	lsr.w	lr, r4, ip
 8004508:	fa04 f303 	lsl.w	r3, r4, r3
 800450c:	fa22 f20c 	lsr.w	r2, r2, ip
 8004510:	ea4e 0107 	orr.w	r1, lr, r7
 8004514:	431a      	orrs	r2, r3
 8004516:	4610      	mov	r0, r2
 8004518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800451a:	42ae      	cmp	r6, r5
 800451c:	bf36      	itet	cc
 800451e:	f1a2 0508 	subcc.w	r5, r2, #8
 8004522:	2200      	movcs	r2, #0
 8004524:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8004528:	3b0b      	subs	r3, #11
 800452a:	d012      	beq.n	8004552 <__b2d+0x86>
 800452c:	f1c3 0720 	rsb	r7, r3, #32
 8004530:	fa22 f107 	lsr.w	r1, r2, r7
 8004534:	409c      	lsls	r4, r3
 8004536:	430c      	orrs	r4, r1
 8004538:	42b5      	cmp	r5, r6
 800453a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800453e:	bf94      	ite	ls
 8004540:	2400      	movls	r4, #0
 8004542:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8004546:	409a      	lsls	r2, r3
 8004548:	40fc      	lsrs	r4, r7
 800454a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800454e:	4322      	orrs	r2, r4
 8004550:	e7e1      	b.n	8004516 <__b2d+0x4a>
 8004552:	ea44 0107 	orr.w	r1, r4, r7
 8004556:	e7de      	b.n	8004516 <__b2d+0x4a>
 8004558:	3ff00000 	.word	0x3ff00000

0800455c <__d2b>:
 800455c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004560:	2101      	movs	r1, #1
 8004562:	4690      	mov	r8, r2
 8004564:	4699      	mov	r9, r3
 8004566:	9e08      	ldr	r6, [sp, #32]
 8004568:	f7ff fc24 	bl	8003db4 <_Balloc>
 800456c:	4604      	mov	r4, r0
 800456e:	b930      	cbnz	r0, 800457e <__d2b+0x22>
 8004570:	4602      	mov	r2, r0
 8004572:	f240 310f 	movw	r1, #783	@ 0x30f
 8004576:	4b23      	ldr	r3, [pc, #140]	@ (8004604 <__d2b+0xa8>)
 8004578:	4823      	ldr	r0, [pc, #140]	@ (8004608 <__d2b+0xac>)
 800457a:	f000 f981 	bl	8004880 <__assert_func>
 800457e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004582:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004586:	b10d      	cbz	r5, 800458c <__d2b+0x30>
 8004588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	f1b8 0300 	subs.w	r3, r8, #0
 8004592:	d024      	beq.n	80045de <__d2b+0x82>
 8004594:	4668      	mov	r0, sp
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	f7ff fd1d 	bl	8003fd6 <__lo0bits>
 800459c:	e9dd 1200 	ldrd	r1, r2, [sp]
 80045a0:	b1d8      	cbz	r0, 80045da <__d2b+0x7e>
 80045a2:	f1c0 0320 	rsb	r3, r0, #32
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	430b      	orrs	r3, r1
 80045ac:	40c2      	lsrs	r2, r0
 80045ae:	6163      	str	r3, [r4, #20]
 80045b0:	9201      	str	r2, [sp, #4]
 80045b2:	9b01      	ldr	r3, [sp, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf0c      	ite	eq
 80045b8:	2201      	moveq	r2, #1
 80045ba:	2202      	movne	r2, #2
 80045bc:	61a3      	str	r3, [r4, #24]
 80045be:	6122      	str	r2, [r4, #16]
 80045c0:	b1ad      	cbz	r5, 80045ee <__d2b+0x92>
 80045c2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80045c6:	4405      	add	r5, r0
 80045c8:	6035      	str	r5, [r6, #0]
 80045ca:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80045ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045d0:	6018      	str	r0, [r3, #0]
 80045d2:	4620      	mov	r0, r4
 80045d4:	b002      	add	sp, #8
 80045d6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80045da:	6161      	str	r1, [r4, #20]
 80045dc:	e7e9      	b.n	80045b2 <__d2b+0x56>
 80045de:	a801      	add	r0, sp, #4
 80045e0:	f7ff fcf9 	bl	8003fd6 <__lo0bits>
 80045e4:	9b01      	ldr	r3, [sp, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	6163      	str	r3, [r4, #20]
 80045ea:	3020      	adds	r0, #32
 80045ec:	e7e7      	b.n	80045be <__d2b+0x62>
 80045ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80045f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80045f6:	6030      	str	r0, [r6, #0]
 80045f8:	6918      	ldr	r0, [r3, #16]
 80045fa:	f7ff fccd 	bl	8003f98 <__hi0bits>
 80045fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004602:	e7e4      	b.n	80045ce <__d2b+0x72>
 8004604:	080051c6 	.word	0x080051c6
 8004608:	0800524e 	.word	0x0800524e

0800460c <__ratio>:
 800460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004610:	b085      	sub	sp, #20
 8004612:	e9cd 1000 	strd	r1, r0, [sp]
 8004616:	a902      	add	r1, sp, #8
 8004618:	f7ff ff58 	bl	80044cc <__b2d>
 800461c:	468b      	mov	fp, r1
 800461e:	4606      	mov	r6, r0
 8004620:	460f      	mov	r7, r1
 8004622:	9800      	ldr	r0, [sp, #0]
 8004624:	a903      	add	r1, sp, #12
 8004626:	f7ff ff51 	bl	80044cc <__b2d>
 800462a:	460d      	mov	r5, r1
 800462c:	9b01      	ldr	r3, [sp, #4]
 800462e:	4689      	mov	r9, r1
 8004630:	6919      	ldr	r1, [r3, #16]
 8004632:	9b00      	ldr	r3, [sp, #0]
 8004634:	4604      	mov	r4, r0
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	4630      	mov	r0, r6
 800463a:	1ac9      	subs	r1, r1, r3
 800463c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004646:	2b00      	cmp	r3, #0
 8004648:	bfcd      	iteet	gt
 800464a:	463a      	movgt	r2, r7
 800464c:	462a      	movle	r2, r5
 800464e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004652:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8004656:	bfd8      	it	le
 8004658:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800465c:	464b      	mov	r3, r9
 800465e:	4622      	mov	r2, r4
 8004660:	4659      	mov	r1, fp
 8004662:	f7fc f85b 	bl	800071c <__aeabi_ddiv>
 8004666:	b005      	add	sp, #20
 8004668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800466c <__copybits>:
 800466c:	3901      	subs	r1, #1
 800466e:	b570      	push	{r4, r5, r6, lr}
 8004670:	1149      	asrs	r1, r1, #5
 8004672:	6914      	ldr	r4, [r2, #16]
 8004674:	3101      	adds	r1, #1
 8004676:	f102 0314 	add.w	r3, r2, #20
 800467a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800467e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004682:	1f05      	subs	r5, r0, #4
 8004684:	42a3      	cmp	r3, r4
 8004686:	d30c      	bcc.n	80046a2 <__copybits+0x36>
 8004688:	1aa3      	subs	r3, r4, r2
 800468a:	3b11      	subs	r3, #17
 800468c:	f023 0303 	bic.w	r3, r3, #3
 8004690:	3211      	adds	r2, #17
 8004692:	42a2      	cmp	r2, r4
 8004694:	bf88      	it	hi
 8004696:	2300      	movhi	r3, #0
 8004698:	4418      	add	r0, r3
 800469a:	2300      	movs	r3, #0
 800469c:	4288      	cmp	r0, r1
 800469e:	d305      	bcc.n	80046ac <__copybits+0x40>
 80046a0:	bd70      	pop	{r4, r5, r6, pc}
 80046a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80046a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80046aa:	e7eb      	b.n	8004684 <__copybits+0x18>
 80046ac:	f840 3b04 	str.w	r3, [r0], #4
 80046b0:	e7f4      	b.n	800469c <__copybits+0x30>

080046b2 <__any_on>:
 80046b2:	f100 0214 	add.w	r2, r0, #20
 80046b6:	6900      	ldr	r0, [r0, #16]
 80046b8:	114b      	asrs	r3, r1, #5
 80046ba:	4298      	cmp	r0, r3
 80046bc:	b510      	push	{r4, lr}
 80046be:	db11      	blt.n	80046e4 <__any_on+0x32>
 80046c0:	dd0a      	ble.n	80046d8 <__any_on+0x26>
 80046c2:	f011 011f 	ands.w	r1, r1, #31
 80046c6:	d007      	beq.n	80046d8 <__any_on+0x26>
 80046c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80046cc:	fa24 f001 	lsr.w	r0, r4, r1
 80046d0:	fa00 f101 	lsl.w	r1, r0, r1
 80046d4:	428c      	cmp	r4, r1
 80046d6:	d10b      	bne.n	80046f0 <__any_on+0x3e>
 80046d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80046dc:	4293      	cmp	r3, r2
 80046de:	d803      	bhi.n	80046e8 <__any_on+0x36>
 80046e0:	2000      	movs	r0, #0
 80046e2:	bd10      	pop	{r4, pc}
 80046e4:	4603      	mov	r3, r0
 80046e6:	e7f7      	b.n	80046d8 <__any_on+0x26>
 80046e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80046ec:	2900      	cmp	r1, #0
 80046ee:	d0f5      	beq.n	80046dc <__any_on+0x2a>
 80046f0:	2001      	movs	r0, #1
 80046f2:	e7f6      	b.n	80046e2 <__any_on+0x30>

080046f4 <__ascii_wctomb>:
 80046f4:	4603      	mov	r3, r0
 80046f6:	4608      	mov	r0, r1
 80046f8:	b141      	cbz	r1, 800470c <__ascii_wctomb+0x18>
 80046fa:	2aff      	cmp	r2, #255	@ 0xff
 80046fc:	d904      	bls.n	8004708 <__ascii_wctomb+0x14>
 80046fe:	228a      	movs	r2, #138	@ 0x8a
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	4770      	bx	lr
 8004708:	2001      	movs	r0, #1
 800470a:	700a      	strb	r2, [r1, #0]
 800470c:	4770      	bx	lr
	...

08004710 <__sflush_r>:
 8004710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	0716      	lsls	r6, r2, #28
 8004718:	4605      	mov	r5, r0
 800471a:	460c      	mov	r4, r1
 800471c:	d454      	bmi.n	80047c8 <__sflush_r+0xb8>
 800471e:	684b      	ldr	r3, [r1, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	dc02      	bgt.n	800472a <__sflush_r+0x1a>
 8004724:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	dd48      	ble.n	80047bc <__sflush_r+0xac>
 800472a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800472c:	2e00      	cmp	r6, #0
 800472e:	d045      	beq.n	80047bc <__sflush_r+0xac>
 8004730:	2300      	movs	r3, #0
 8004732:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004736:	682f      	ldr	r7, [r5, #0]
 8004738:	6a21      	ldr	r1, [r4, #32]
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	d030      	beq.n	80047a0 <__sflush_r+0x90>
 800473e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	0759      	lsls	r1, r3, #29
 8004744:	d505      	bpl.n	8004752 <__sflush_r+0x42>
 8004746:	6863      	ldr	r3, [r4, #4]
 8004748:	1ad2      	subs	r2, r2, r3
 800474a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800474c:	b10b      	cbz	r3, 8004752 <__sflush_r+0x42>
 800474e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004750:	1ad2      	subs	r2, r2, r3
 8004752:	2300      	movs	r3, #0
 8004754:	4628      	mov	r0, r5
 8004756:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004758:	6a21      	ldr	r1, [r4, #32]
 800475a:	47b0      	blx	r6
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	d106      	bne.n	8004770 <__sflush_r+0x60>
 8004762:	6829      	ldr	r1, [r5, #0]
 8004764:	291d      	cmp	r1, #29
 8004766:	d82b      	bhi.n	80047c0 <__sflush_r+0xb0>
 8004768:	4a28      	ldr	r2, [pc, #160]	@ (800480c <__sflush_r+0xfc>)
 800476a:	40ca      	lsrs	r2, r1
 800476c:	07d6      	lsls	r6, r2, #31
 800476e:	d527      	bpl.n	80047c0 <__sflush_r+0xb0>
 8004770:	2200      	movs	r2, #0
 8004772:	6062      	str	r2, [r4, #4]
 8004774:	6922      	ldr	r2, [r4, #16]
 8004776:	04d9      	lsls	r1, r3, #19
 8004778:	6022      	str	r2, [r4, #0]
 800477a:	d504      	bpl.n	8004786 <__sflush_r+0x76>
 800477c:	1c42      	adds	r2, r0, #1
 800477e:	d101      	bne.n	8004784 <__sflush_r+0x74>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b903      	cbnz	r3, 8004786 <__sflush_r+0x76>
 8004784:	6560      	str	r0, [r4, #84]	@ 0x54
 8004786:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004788:	602f      	str	r7, [r5, #0]
 800478a:	b1b9      	cbz	r1, 80047bc <__sflush_r+0xac>
 800478c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004790:	4299      	cmp	r1, r3
 8004792:	d002      	beq.n	800479a <__sflush_r+0x8a>
 8004794:	4628      	mov	r0, r5
 8004796:	f7fe fecb 	bl	8003530 <_free_r>
 800479a:	2300      	movs	r3, #0
 800479c:	6363      	str	r3, [r4, #52]	@ 0x34
 800479e:	e00d      	b.n	80047bc <__sflush_r+0xac>
 80047a0:	2301      	movs	r3, #1
 80047a2:	4628      	mov	r0, r5
 80047a4:	47b0      	blx	r6
 80047a6:	4602      	mov	r2, r0
 80047a8:	1c50      	adds	r0, r2, #1
 80047aa:	d1c9      	bne.n	8004740 <__sflush_r+0x30>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0c6      	beq.n	8004740 <__sflush_r+0x30>
 80047b2:	2b1d      	cmp	r3, #29
 80047b4:	d001      	beq.n	80047ba <__sflush_r+0xaa>
 80047b6:	2b16      	cmp	r3, #22
 80047b8:	d11d      	bne.n	80047f6 <__sflush_r+0xe6>
 80047ba:	602f      	str	r7, [r5, #0]
 80047bc:	2000      	movs	r0, #0
 80047be:	e021      	b.n	8004804 <__sflush_r+0xf4>
 80047c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047c4:	b21b      	sxth	r3, r3
 80047c6:	e01a      	b.n	80047fe <__sflush_r+0xee>
 80047c8:	690f      	ldr	r7, [r1, #16]
 80047ca:	2f00      	cmp	r7, #0
 80047cc:	d0f6      	beq.n	80047bc <__sflush_r+0xac>
 80047ce:	0793      	lsls	r3, r2, #30
 80047d0:	bf18      	it	ne
 80047d2:	2300      	movne	r3, #0
 80047d4:	680e      	ldr	r6, [r1, #0]
 80047d6:	bf08      	it	eq
 80047d8:	694b      	ldreq	r3, [r1, #20]
 80047da:	1bf6      	subs	r6, r6, r7
 80047dc:	600f      	str	r7, [r1, #0]
 80047de:	608b      	str	r3, [r1, #8]
 80047e0:	2e00      	cmp	r6, #0
 80047e2:	ddeb      	ble.n	80047bc <__sflush_r+0xac>
 80047e4:	4633      	mov	r3, r6
 80047e6:	463a      	mov	r2, r7
 80047e8:	4628      	mov	r0, r5
 80047ea:	6a21      	ldr	r1, [r4, #32]
 80047ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80047f0:	47e0      	blx	ip
 80047f2:	2800      	cmp	r0, #0
 80047f4:	dc07      	bgt.n	8004806 <__sflush_r+0xf6>
 80047f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004806:	4407      	add	r7, r0
 8004808:	1a36      	subs	r6, r6, r0
 800480a:	e7e9      	b.n	80047e0 <__sflush_r+0xd0>
 800480c:	20400001 	.word	0x20400001

08004810 <_fflush_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	690b      	ldr	r3, [r1, #16]
 8004814:	4605      	mov	r5, r0
 8004816:	460c      	mov	r4, r1
 8004818:	b913      	cbnz	r3, 8004820 <_fflush_r+0x10>
 800481a:	2500      	movs	r5, #0
 800481c:	4628      	mov	r0, r5
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	b118      	cbz	r0, 800482a <_fflush_r+0x1a>
 8004822:	6a03      	ldr	r3, [r0, #32]
 8004824:	b90b      	cbnz	r3, 800482a <_fflush_r+0x1a>
 8004826:	f7fe fd47 	bl	80032b8 <__sinit>
 800482a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f3      	beq.n	800481a <_fflush_r+0xa>
 8004832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004834:	07d0      	lsls	r0, r2, #31
 8004836:	d404      	bmi.n	8004842 <_fflush_r+0x32>
 8004838:	0599      	lsls	r1, r3, #22
 800483a:	d402      	bmi.n	8004842 <_fflush_r+0x32>
 800483c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800483e:	f7fe fe60 	bl	8003502 <__retarget_lock_acquire_recursive>
 8004842:	4628      	mov	r0, r5
 8004844:	4621      	mov	r1, r4
 8004846:	f7ff ff63 	bl	8004710 <__sflush_r>
 800484a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800484c:	4605      	mov	r5, r0
 800484e:	07da      	lsls	r2, r3, #31
 8004850:	d4e4      	bmi.n	800481c <_fflush_r+0xc>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	059b      	lsls	r3, r3, #22
 8004856:	d4e1      	bmi.n	800481c <_fflush_r+0xc>
 8004858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800485a:	f7fe fe53 	bl	8003504 <__retarget_lock_release_recursive>
 800485e:	e7dd      	b.n	800481c <_fflush_r+0xc>

08004860 <_sbrk_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	2300      	movs	r3, #0
 8004864:	4d05      	ldr	r5, [pc, #20]	@ (800487c <_sbrk_r+0x1c>)
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	f7fc febe 	bl	80015ec <_sbrk>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_sbrk_r+0x1a>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_sbrk_r+0x1a>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	20000438 	.word	0x20000438

08004880 <__assert_func>:
 8004880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004882:	4614      	mov	r4, r2
 8004884:	461a      	mov	r2, r3
 8004886:	4b09      	ldr	r3, [pc, #36]	@ (80048ac <__assert_func+0x2c>)
 8004888:	4605      	mov	r5, r0
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68d8      	ldr	r0, [r3, #12]
 800488e:	b14c      	cbz	r4, 80048a4 <__assert_func+0x24>
 8004890:	4b07      	ldr	r3, [pc, #28]	@ (80048b0 <__assert_func+0x30>)
 8004892:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004896:	9100      	str	r1, [sp, #0]
 8004898:	462b      	mov	r3, r5
 800489a:	4906      	ldr	r1, [pc, #24]	@ (80048b4 <__assert_func+0x34>)
 800489c:	f000 f82a 	bl	80048f4 <fiprintf>
 80048a0:	f000 f83a 	bl	8004918 <abort>
 80048a4:	4b04      	ldr	r3, [pc, #16]	@ (80048b8 <__assert_func+0x38>)
 80048a6:	461c      	mov	r4, r3
 80048a8:	e7f3      	b.n	8004892 <__assert_func+0x12>
 80048aa:	bf00      	nop
 80048ac:	20000188 	.word	0x20000188
 80048b0:	080052a7 	.word	0x080052a7
 80048b4:	080052b4 	.word	0x080052b4
 80048b8:	080052e2 	.word	0x080052e2

080048bc <_calloc_r>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	fba1 5402 	umull	r5, r4, r1, r2
 80048c2:	b934      	cbnz	r4, 80048d2 <_calloc_r+0x16>
 80048c4:	4629      	mov	r1, r5
 80048c6:	f7ff f9d7 	bl	8003c78 <_malloc_r>
 80048ca:	4606      	mov	r6, r0
 80048cc:	b928      	cbnz	r0, 80048da <_calloc_r+0x1e>
 80048ce:	4630      	mov	r0, r6
 80048d0:	bd70      	pop	{r4, r5, r6, pc}
 80048d2:	220c      	movs	r2, #12
 80048d4:	2600      	movs	r6, #0
 80048d6:	6002      	str	r2, [r0, #0]
 80048d8:	e7f9      	b.n	80048ce <_calloc_r+0x12>
 80048da:	462a      	mov	r2, r5
 80048dc:	4621      	mov	r1, r4
 80048de:	f7fe fd64 	bl	80033aa <memset>
 80048e2:	e7f4      	b.n	80048ce <_calloc_r+0x12>

080048e4 <malloc>:
 80048e4:	4b02      	ldr	r3, [pc, #8]	@ (80048f0 <malloc+0xc>)
 80048e6:	4601      	mov	r1, r0
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	f7ff b9c5 	b.w	8003c78 <_malloc_r>
 80048ee:	bf00      	nop
 80048f0:	20000188 	.word	0x20000188

080048f4 <fiprintf>:
 80048f4:	b40e      	push	{r1, r2, r3}
 80048f6:	b503      	push	{r0, r1, lr}
 80048f8:	4601      	mov	r1, r0
 80048fa:	ab03      	add	r3, sp, #12
 80048fc:	4805      	ldr	r0, [pc, #20]	@ (8004914 <fiprintf+0x20>)
 80048fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004902:	6800      	ldr	r0, [r0, #0]
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	f000 f835 	bl	8004974 <_vfiprintf_r>
 800490a:	b002      	add	sp, #8
 800490c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004910:	b003      	add	sp, #12
 8004912:	4770      	bx	lr
 8004914:	20000188 	.word	0x20000188

08004918 <abort>:
 8004918:	2006      	movs	r0, #6
 800491a:	b508      	push	{r3, lr}
 800491c:	f000 fb8e 	bl	800503c <raise>
 8004920:	2001      	movs	r0, #1
 8004922:	f7fc fdee 	bl	8001502 <_exit>

08004926 <__sfputc_r>:
 8004926:	6893      	ldr	r3, [r2, #8]
 8004928:	b410      	push	{r4}
 800492a:	3b01      	subs	r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	6093      	str	r3, [r2, #8]
 8004930:	da07      	bge.n	8004942 <__sfputc_r+0x1c>
 8004932:	6994      	ldr	r4, [r2, #24]
 8004934:	42a3      	cmp	r3, r4
 8004936:	db01      	blt.n	800493c <__sfputc_r+0x16>
 8004938:	290a      	cmp	r1, #10
 800493a:	d102      	bne.n	8004942 <__sfputc_r+0x1c>
 800493c:	bc10      	pop	{r4}
 800493e:	f000 bac1 	b.w	8004ec4 <__swbuf_r>
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	1c58      	adds	r0, r3, #1
 8004946:	6010      	str	r0, [r2, #0]
 8004948:	7019      	strb	r1, [r3, #0]
 800494a:	4608      	mov	r0, r1
 800494c:	bc10      	pop	{r4}
 800494e:	4770      	bx	lr

08004950 <__sfputs_r>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	4606      	mov	r6, r0
 8004954:	460f      	mov	r7, r1
 8004956:	4614      	mov	r4, r2
 8004958:	18d5      	adds	r5, r2, r3
 800495a:	42ac      	cmp	r4, r5
 800495c:	d101      	bne.n	8004962 <__sfputs_r+0x12>
 800495e:	2000      	movs	r0, #0
 8004960:	e007      	b.n	8004972 <__sfputs_r+0x22>
 8004962:	463a      	mov	r2, r7
 8004964:	4630      	mov	r0, r6
 8004966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800496a:	f7ff ffdc 	bl	8004926 <__sfputc_r>
 800496e:	1c43      	adds	r3, r0, #1
 8004970:	d1f3      	bne.n	800495a <__sfputs_r+0xa>
 8004972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004974 <_vfiprintf_r>:
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	460d      	mov	r5, r1
 800497a:	4614      	mov	r4, r2
 800497c:	4698      	mov	r8, r3
 800497e:	4606      	mov	r6, r0
 8004980:	b09d      	sub	sp, #116	@ 0x74
 8004982:	b118      	cbz	r0, 800498c <_vfiprintf_r+0x18>
 8004984:	6a03      	ldr	r3, [r0, #32]
 8004986:	b90b      	cbnz	r3, 800498c <_vfiprintf_r+0x18>
 8004988:	f7fe fc96 	bl	80032b8 <__sinit>
 800498c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800498e:	07d9      	lsls	r1, r3, #31
 8004990:	d405      	bmi.n	800499e <_vfiprintf_r+0x2a>
 8004992:	89ab      	ldrh	r3, [r5, #12]
 8004994:	059a      	lsls	r2, r3, #22
 8004996:	d402      	bmi.n	800499e <_vfiprintf_r+0x2a>
 8004998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800499a:	f7fe fdb2 	bl	8003502 <__retarget_lock_acquire_recursive>
 800499e:	89ab      	ldrh	r3, [r5, #12]
 80049a0:	071b      	lsls	r3, r3, #28
 80049a2:	d501      	bpl.n	80049a8 <_vfiprintf_r+0x34>
 80049a4:	692b      	ldr	r3, [r5, #16]
 80049a6:	b99b      	cbnz	r3, 80049d0 <_vfiprintf_r+0x5c>
 80049a8:	4629      	mov	r1, r5
 80049aa:	4630      	mov	r0, r6
 80049ac:	f000 fac8 	bl	8004f40 <__swsetup_r>
 80049b0:	b170      	cbz	r0, 80049d0 <_vfiprintf_r+0x5c>
 80049b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049b4:	07dc      	lsls	r4, r3, #31
 80049b6:	d504      	bpl.n	80049c2 <_vfiprintf_r+0x4e>
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
 80049bc:	b01d      	add	sp, #116	@ 0x74
 80049be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c2:	89ab      	ldrh	r3, [r5, #12]
 80049c4:	0598      	lsls	r0, r3, #22
 80049c6:	d4f7      	bmi.n	80049b8 <_vfiprintf_r+0x44>
 80049c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049ca:	f7fe fd9b 	bl	8003504 <__retarget_lock_release_recursive>
 80049ce:	e7f3      	b.n	80049b8 <_vfiprintf_r+0x44>
 80049d0:	2300      	movs	r3, #0
 80049d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d4:	2320      	movs	r3, #32
 80049d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049da:	2330      	movs	r3, #48	@ 0x30
 80049dc:	f04f 0901 	mov.w	r9, #1
 80049e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80049e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004b90 <_vfiprintf_r+0x21c>
 80049e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049ec:	4623      	mov	r3, r4
 80049ee:	469a      	mov	sl, r3
 80049f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f4:	b10a      	cbz	r2, 80049fa <_vfiprintf_r+0x86>
 80049f6:	2a25      	cmp	r2, #37	@ 0x25
 80049f8:	d1f9      	bne.n	80049ee <_vfiprintf_r+0x7a>
 80049fa:	ebba 0b04 	subs.w	fp, sl, r4
 80049fe:	d00b      	beq.n	8004a18 <_vfiprintf_r+0xa4>
 8004a00:	465b      	mov	r3, fp
 8004a02:	4622      	mov	r2, r4
 8004a04:	4629      	mov	r1, r5
 8004a06:	4630      	mov	r0, r6
 8004a08:	f7ff ffa2 	bl	8004950 <__sfputs_r>
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	f000 80a7 	beq.w	8004b60 <_vfiprintf_r+0x1ec>
 8004a12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a14:	445a      	add	r2, fp
 8004a16:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a18:	f89a 3000 	ldrb.w	r3, [sl]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 809f 	beq.w	8004b60 <_vfiprintf_r+0x1ec>
 8004a22:	2300      	movs	r3, #0
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295
 8004a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a2c:	f10a 0a01 	add.w	sl, sl, #1
 8004a30:	9304      	str	r3, [sp, #16]
 8004a32:	9307      	str	r3, [sp, #28]
 8004a34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a38:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a3a:	4654      	mov	r4, sl
 8004a3c:	2205      	movs	r2, #5
 8004a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a42:	4853      	ldr	r0, [pc, #332]	@ (8004b90 <_vfiprintf_r+0x21c>)
 8004a44:	f000 fb16 	bl	8005074 <memchr>
 8004a48:	9a04      	ldr	r2, [sp, #16]
 8004a4a:	b9d8      	cbnz	r0, 8004a84 <_vfiprintf_r+0x110>
 8004a4c:	06d1      	lsls	r1, r2, #27
 8004a4e:	bf44      	itt	mi
 8004a50:	2320      	movmi	r3, #32
 8004a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a56:	0713      	lsls	r3, r2, #28
 8004a58:	bf44      	itt	mi
 8004a5a:	232b      	movmi	r3, #43	@ 0x2b
 8004a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a60:	f89a 3000 	ldrb.w	r3, [sl]
 8004a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a66:	d015      	beq.n	8004a94 <_vfiprintf_r+0x120>
 8004a68:	4654      	mov	r4, sl
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f04f 0c0a 	mov.w	ip, #10
 8004a70:	9a07      	ldr	r2, [sp, #28]
 8004a72:	4621      	mov	r1, r4
 8004a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a78:	3b30      	subs	r3, #48	@ 0x30
 8004a7a:	2b09      	cmp	r3, #9
 8004a7c:	d94b      	bls.n	8004b16 <_vfiprintf_r+0x1a2>
 8004a7e:	b1b0      	cbz	r0, 8004aae <_vfiprintf_r+0x13a>
 8004a80:	9207      	str	r2, [sp, #28]
 8004a82:	e014      	b.n	8004aae <_vfiprintf_r+0x13a>
 8004a84:	eba0 0308 	sub.w	r3, r0, r8
 8004a88:	fa09 f303 	lsl.w	r3, r9, r3
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	46a2      	mov	sl, r4
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	e7d2      	b.n	8004a3a <_vfiprintf_r+0xc6>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	1d19      	adds	r1, r3, #4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	9103      	str	r1, [sp, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bfbb      	ittet	lt
 8004aa0:	425b      	neglt	r3, r3
 8004aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8004aa6:	9307      	strge	r3, [sp, #28]
 8004aa8:	9307      	strlt	r3, [sp, #28]
 8004aaa:	bfb8      	it	lt
 8004aac:	9204      	strlt	r2, [sp, #16]
 8004aae:	7823      	ldrb	r3, [r4, #0]
 8004ab0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ab2:	d10a      	bne.n	8004aca <_vfiprintf_r+0x156>
 8004ab4:	7863      	ldrb	r3, [r4, #1]
 8004ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ab8:	d132      	bne.n	8004b20 <_vfiprintf_r+0x1ac>
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	3402      	adds	r4, #2
 8004abe:	1d1a      	adds	r2, r3, #4
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	9203      	str	r2, [sp, #12]
 8004ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ac8:	9305      	str	r3, [sp, #20]
 8004aca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004b94 <_vfiprintf_r+0x220>
 8004ace:	2203      	movs	r2, #3
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	7821      	ldrb	r1, [r4, #0]
 8004ad4:	f000 face 	bl	8005074 <memchr>
 8004ad8:	b138      	cbz	r0, 8004aea <_vfiprintf_r+0x176>
 8004ada:	2240      	movs	r2, #64	@ 0x40
 8004adc:	9b04      	ldr	r3, [sp, #16]
 8004ade:	eba0 000a 	sub.w	r0, r0, sl
 8004ae2:	4082      	lsls	r2, r0
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	3401      	adds	r4, #1
 8004ae8:	9304      	str	r3, [sp, #16]
 8004aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aee:	2206      	movs	r2, #6
 8004af0:	4829      	ldr	r0, [pc, #164]	@ (8004b98 <_vfiprintf_r+0x224>)
 8004af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004af6:	f000 fabd 	bl	8005074 <memchr>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d03f      	beq.n	8004b7e <_vfiprintf_r+0x20a>
 8004afe:	4b27      	ldr	r3, [pc, #156]	@ (8004b9c <_vfiprintf_r+0x228>)
 8004b00:	bb1b      	cbnz	r3, 8004b4a <_vfiprintf_r+0x1d6>
 8004b02:	9b03      	ldr	r3, [sp, #12]
 8004b04:	3307      	adds	r3, #7
 8004b06:	f023 0307 	bic.w	r3, r3, #7
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	9303      	str	r3, [sp, #12]
 8004b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b10:	443b      	add	r3, r7
 8004b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b14:	e76a      	b.n	80049ec <_vfiprintf_r+0x78>
 8004b16:	460c      	mov	r4, r1
 8004b18:	2001      	movs	r0, #1
 8004b1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b1e:	e7a8      	b.n	8004a72 <_vfiprintf_r+0xfe>
 8004b20:	2300      	movs	r3, #0
 8004b22:	f04f 0c0a 	mov.w	ip, #10
 8004b26:	4619      	mov	r1, r3
 8004b28:	3401      	adds	r4, #1
 8004b2a:	9305      	str	r3, [sp, #20]
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b32:	3a30      	subs	r2, #48	@ 0x30
 8004b34:	2a09      	cmp	r2, #9
 8004b36:	d903      	bls.n	8004b40 <_vfiprintf_r+0x1cc>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0c6      	beq.n	8004aca <_vfiprintf_r+0x156>
 8004b3c:	9105      	str	r1, [sp, #20]
 8004b3e:	e7c4      	b.n	8004aca <_vfiprintf_r+0x156>
 8004b40:	4604      	mov	r4, r0
 8004b42:	2301      	movs	r3, #1
 8004b44:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b48:	e7f0      	b.n	8004b2c <_vfiprintf_r+0x1b8>
 8004b4a:	ab03      	add	r3, sp, #12
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	462a      	mov	r2, r5
 8004b50:	4630      	mov	r0, r6
 8004b52:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <_vfiprintf_r+0x22c>)
 8004b54:	a904      	add	r1, sp, #16
 8004b56:	f3af 8000 	nop.w
 8004b5a:	4607      	mov	r7, r0
 8004b5c:	1c78      	adds	r0, r7, #1
 8004b5e:	d1d6      	bne.n	8004b0e <_vfiprintf_r+0x19a>
 8004b60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b62:	07d9      	lsls	r1, r3, #31
 8004b64:	d405      	bmi.n	8004b72 <_vfiprintf_r+0x1fe>
 8004b66:	89ab      	ldrh	r3, [r5, #12]
 8004b68:	059a      	lsls	r2, r3, #22
 8004b6a:	d402      	bmi.n	8004b72 <_vfiprintf_r+0x1fe>
 8004b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b6e:	f7fe fcc9 	bl	8003504 <__retarget_lock_release_recursive>
 8004b72:	89ab      	ldrh	r3, [r5, #12]
 8004b74:	065b      	lsls	r3, r3, #25
 8004b76:	f53f af1f 	bmi.w	80049b8 <_vfiprintf_r+0x44>
 8004b7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b7c:	e71e      	b.n	80049bc <_vfiprintf_r+0x48>
 8004b7e:	ab03      	add	r3, sp, #12
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	462a      	mov	r2, r5
 8004b84:	4630      	mov	r0, r6
 8004b86:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <_vfiprintf_r+0x22c>)
 8004b88:	a904      	add	r1, sp, #16
 8004b8a:	f000 f87d 	bl	8004c88 <_printf_i>
 8004b8e:	e7e4      	b.n	8004b5a <_vfiprintf_r+0x1e6>
 8004b90:	080052e3 	.word	0x080052e3
 8004b94:	080052e9 	.word	0x080052e9
 8004b98:	080052ed 	.word	0x080052ed
 8004b9c:	00000000 	.word	0x00000000
 8004ba0:	08004951 	.word	0x08004951

08004ba4 <_printf_common>:
 8004ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba8:	4616      	mov	r6, r2
 8004baa:	4698      	mov	r8, r3
 8004bac:	688a      	ldr	r2, [r1, #8]
 8004bae:	690b      	ldr	r3, [r1, #16]
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	bfb8      	it	lt
 8004bb6:	4613      	movlt	r3, r2
 8004bb8:	6033      	str	r3, [r6, #0]
 8004bba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bc4:	b10a      	cbz	r2, 8004bca <_printf_common+0x26>
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	6033      	str	r3, [r6, #0]
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	0699      	lsls	r1, r3, #26
 8004bce:	bf42      	ittt	mi
 8004bd0:	6833      	ldrmi	r3, [r6, #0]
 8004bd2:	3302      	addmi	r3, #2
 8004bd4:	6033      	strmi	r3, [r6, #0]
 8004bd6:	6825      	ldr	r5, [r4, #0]
 8004bd8:	f015 0506 	ands.w	r5, r5, #6
 8004bdc:	d106      	bne.n	8004bec <_printf_common+0x48>
 8004bde:	f104 0a19 	add.w	sl, r4, #25
 8004be2:	68e3      	ldr	r3, [r4, #12]
 8004be4:	6832      	ldr	r2, [r6, #0]
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	42ab      	cmp	r3, r5
 8004bea:	dc2b      	bgt.n	8004c44 <_printf_common+0xa0>
 8004bec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	3b00      	subs	r3, #0
 8004bf4:	bf18      	it	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	0692      	lsls	r2, r2, #26
 8004bfa:	d430      	bmi.n	8004c5e <_printf_common+0xba>
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	4638      	mov	r0, r7
 8004c00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c04:	47c8      	blx	r9
 8004c06:	3001      	adds	r0, #1
 8004c08:	d023      	beq.n	8004c52 <_printf_common+0xae>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	6922      	ldr	r2, [r4, #16]
 8004c0e:	f003 0306 	and.w	r3, r3, #6
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	bf14      	ite	ne
 8004c16:	2500      	movne	r5, #0
 8004c18:	6833      	ldreq	r3, [r6, #0]
 8004c1a:	f04f 0600 	mov.w	r6, #0
 8004c1e:	bf08      	it	eq
 8004c20:	68e5      	ldreq	r5, [r4, #12]
 8004c22:	f104 041a 	add.w	r4, r4, #26
 8004c26:	bf08      	it	eq
 8004c28:	1aed      	subeq	r5, r5, r3
 8004c2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c2e:	bf08      	it	eq
 8004c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c34:	4293      	cmp	r3, r2
 8004c36:	bfc4      	itt	gt
 8004c38:	1a9b      	subgt	r3, r3, r2
 8004c3a:	18ed      	addgt	r5, r5, r3
 8004c3c:	42b5      	cmp	r5, r6
 8004c3e:	d11a      	bne.n	8004c76 <_printf_common+0xd2>
 8004c40:	2000      	movs	r0, #0
 8004c42:	e008      	b.n	8004c56 <_printf_common+0xb2>
 8004c44:	2301      	movs	r3, #1
 8004c46:	4652      	mov	r2, sl
 8004c48:	4641      	mov	r1, r8
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	47c8      	blx	r9
 8004c4e:	3001      	adds	r0, #1
 8004c50:	d103      	bne.n	8004c5a <_printf_common+0xb6>
 8004c52:	f04f 30ff 	mov.w	r0, #4294967295
 8004c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5a:	3501      	adds	r5, #1
 8004c5c:	e7c1      	b.n	8004be2 <_printf_common+0x3e>
 8004c5e:	2030      	movs	r0, #48	@ 0x30
 8004c60:	18e1      	adds	r1, r4, r3
 8004c62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c6c:	4422      	add	r2, r4
 8004c6e:	3302      	adds	r3, #2
 8004c70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c74:	e7c2      	b.n	8004bfc <_printf_common+0x58>
 8004c76:	2301      	movs	r3, #1
 8004c78:	4622      	mov	r2, r4
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	47c8      	blx	r9
 8004c80:	3001      	adds	r0, #1
 8004c82:	d0e6      	beq.n	8004c52 <_printf_common+0xae>
 8004c84:	3601      	adds	r6, #1
 8004c86:	e7d9      	b.n	8004c3c <_printf_common+0x98>

08004c88 <_printf_i>:
 8004c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	7e0f      	ldrb	r7, [r1, #24]
 8004c8e:	4691      	mov	r9, r2
 8004c90:	2f78      	cmp	r7, #120	@ 0x78
 8004c92:	4680      	mov	r8, r0
 8004c94:	460c      	mov	r4, r1
 8004c96:	469a      	mov	sl, r3
 8004c98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c9e:	d807      	bhi.n	8004cb0 <_printf_i+0x28>
 8004ca0:	2f62      	cmp	r7, #98	@ 0x62
 8004ca2:	d80a      	bhi.n	8004cba <_printf_i+0x32>
 8004ca4:	2f00      	cmp	r7, #0
 8004ca6:	f000 80d1 	beq.w	8004e4c <_printf_i+0x1c4>
 8004caa:	2f58      	cmp	r7, #88	@ 0x58
 8004cac:	f000 80b8 	beq.w	8004e20 <_printf_i+0x198>
 8004cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cb8:	e03a      	b.n	8004d30 <_printf_i+0xa8>
 8004cba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cbe:	2b15      	cmp	r3, #21
 8004cc0:	d8f6      	bhi.n	8004cb0 <_printf_i+0x28>
 8004cc2:	a101      	add	r1, pc, #4	@ (adr r1, 8004cc8 <_printf_i+0x40>)
 8004cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cc8:	08004d21 	.word	0x08004d21
 8004ccc:	08004d35 	.word	0x08004d35
 8004cd0:	08004cb1 	.word	0x08004cb1
 8004cd4:	08004cb1 	.word	0x08004cb1
 8004cd8:	08004cb1 	.word	0x08004cb1
 8004cdc:	08004cb1 	.word	0x08004cb1
 8004ce0:	08004d35 	.word	0x08004d35
 8004ce4:	08004cb1 	.word	0x08004cb1
 8004ce8:	08004cb1 	.word	0x08004cb1
 8004cec:	08004cb1 	.word	0x08004cb1
 8004cf0:	08004cb1 	.word	0x08004cb1
 8004cf4:	08004e33 	.word	0x08004e33
 8004cf8:	08004d5f 	.word	0x08004d5f
 8004cfc:	08004ded 	.word	0x08004ded
 8004d00:	08004cb1 	.word	0x08004cb1
 8004d04:	08004cb1 	.word	0x08004cb1
 8004d08:	08004e55 	.word	0x08004e55
 8004d0c:	08004cb1 	.word	0x08004cb1
 8004d10:	08004d5f 	.word	0x08004d5f
 8004d14:	08004cb1 	.word	0x08004cb1
 8004d18:	08004cb1 	.word	0x08004cb1
 8004d1c:	08004df5 	.word	0x08004df5
 8004d20:	6833      	ldr	r3, [r6, #0]
 8004d22:	1d1a      	adds	r2, r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6032      	str	r2, [r6, #0]
 8004d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d30:	2301      	movs	r3, #1
 8004d32:	e09c      	b.n	8004e6e <_printf_i+0x1e6>
 8004d34:	6833      	ldr	r3, [r6, #0]
 8004d36:	6820      	ldr	r0, [r4, #0]
 8004d38:	1d19      	adds	r1, r3, #4
 8004d3a:	6031      	str	r1, [r6, #0]
 8004d3c:	0606      	lsls	r6, r0, #24
 8004d3e:	d501      	bpl.n	8004d44 <_printf_i+0xbc>
 8004d40:	681d      	ldr	r5, [r3, #0]
 8004d42:	e003      	b.n	8004d4c <_printf_i+0xc4>
 8004d44:	0645      	lsls	r5, r0, #25
 8004d46:	d5fb      	bpl.n	8004d40 <_printf_i+0xb8>
 8004d48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d4c:	2d00      	cmp	r5, #0
 8004d4e:	da03      	bge.n	8004d58 <_printf_i+0xd0>
 8004d50:	232d      	movs	r3, #45	@ 0x2d
 8004d52:	426d      	negs	r5, r5
 8004d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d58:	230a      	movs	r3, #10
 8004d5a:	4858      	ldr	r0, [pc, #352]	@ (8004ebc <_printf_i+0x234>)
 8004d5c:	e011      	b.n	8004d82 <_printf_i+0xfa>
 8004d5e:	6821      	ldr	r1, [r4, #0]
 8004d60:	6833      	ldr	r3, [r6, #0]
 8004d62:	0608      	lsls	r0, r1, #24
 8004d64:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d68:	d402      	bmi.n	8004d70 <_printf_i+0xe8>
 8004d6a:	0649      	lsls	r1, r1, #25
 8004d6c:	bf48      	it	mi
 8004d6e:	b2ad      	uxthmi	r5, r5
 8004d70:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d72:	6033      	str	r3, [r6, #0]
 8004d74:	bf14      	ite	ne
 8004d76:	230a      	movne	r3, #10
 8004d78:	2308      	moveq	r3, #8
 8004d7a:	4850      	ldr	r0, [pc, #320]	@ (8004ebc <_printf_i+0x234>)
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d82:	6866      	ldr	r6, [r4, #4]
 8004d84:	2e00      	cmp	r6, #0
 8004d86:	60a6      	str	r6, [r4, #8]
 8004d88:	db05      	blt.n	8004d96 <_printf_i+0x10e>
 8004d8a:	6821      	ldr	r1, [r4, #0]
 8004d8c:	432e      	orrs	r6, r5
 8004d8e:	f021 0104 	bic.w	r1, r1, #4
 8004d92:	6021      	str	r1, [r4, #0]
 8004d94:	d04b      	beq.n	8004e2e <_printf_i+0x1a6>
 8004d96:	4616      	mov	r6, r2
 8004d98:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d9c:	fb03 5711 	mls	r7, r3, r1, r5
 8004da0:	5dc7      	ldrb	r7, [r0, r7]
 8004da2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004da6:	462f      	mov	r7, r5
 8004da8:	42bb      	cmp	r3, r7
 8004daa:	460d      	mov	r5, r1
 8004dac:	d9f4      	bls.n	8004d98 <_printf_i+0x110>
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d10b      	bne.n	8004dca <_printf_i+0x142>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	07df      	lsls	r7, r3, #31
 8004db6:	d508      	bpl.n	8004dca <_printf_i+0x142>
 8004db8:	6923      	ldr	r3, [r4, #16]
 8004dba:	6861      	ldr	r1, [r4, #4]
 8004dbc:	4299      	cmp	r1, r3
 8004dbe:	bfde      	ittt	le
 8004dc0:	2330      	movle	r3, #48	@ 0x30
 8004dc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dca:	1b92      	subs	r2, r2, r6
 8004dcc:	6122      	str	r2, [r4, #16]
 8004dce:	464b      	mov	r3, r9
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	f8cd a000 	str.w	sl, [sp]
 8004dd8:	aa03      	add	r2, sp, #12
 8004dda:	f7ff fee3 	bl	8004ba4 <_printf_common>
 8004dde:	3001      	adds	r0, #1
 8004de0:	d14a      	bne.n	8004e78 <_printf_i+0x1f0>
 8004de2:	f04f 30ff 	mov.w	r0, #4294967295
 8004de6:	b004      	add	sp, #16
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	f043 0320 	orr.w	r3, r3, #32
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	2778      	movs	r7, #120	@ 0x78
 8004df6:	4832      	ldr	r0, [pc, #200]	@ (8004ec0 <_printf_i+0x238>)
 8004df8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	6831      	ldr	r1, [r6, #0]
 8004e00:	061f      	lsls	r7, r3, #24
 8004e02:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e06:	d402      	bmi.n	8004e0e <_printf_i+0x186>
 8004e08:	065f      	lsls	r7, r3, #25
 8004e0a:	bf48      	it	mi
 8004e0c:	b2ad      	uxthmi	r5, r5
 8004e0e:	6031      	str	r1, [r6, #0]
 8004e10:	07d9      	lsls	r1, r3, #31
 8004e12:	bf44      	itt	mi
 8004e14:	f043 0320 	orrmi.w	r3, r3, #32
 8004e18:	6023      	strmi	r3, [r4, #0]
 8004e1a:	b11d      	cbz	r5, 8004e24 <_printf_i+0x19c>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	e7ad      	b.n	8004d7c <_printf_i+0xf4>
 8004e20:	4826      	ldr	r0, [pc, #152]	@ (8004ebc <_printf_i+0x234>)
 8004e22:	e7e9      	b.n	8004df8 <_printf_i+0x170>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	f023 0320 	bic.w	r3, r3, #32
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	e7f6      	b.n	8004e1c <_printf_i+0x194>
 8004e2e:	4616      	mov	r6, r2
 8004e30:	e7bd      	b.n	8004dae <_printf_i+0x126>
 8004e32:	6833      	ldr	r3, [r6, #0]
 8004e34:	6825      	ldr	r5, [r4, #0]
 8004e36:	1d18      	adds	r0, r3, #4
 8004e38:	6961      	ldr	r1, [r4, #20]
 8004e3a:	6030      	str	r0, [r6, #0]
 8004e3c:	062e      	lsls	r6, r5, #24
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	d501      	bpl.n	8004e46 <_printf_i+0x1be>
 8004e42:	6019      	str	r1, [r3, #0]
 8004e44:	e002      	b.n	8004e4c <_printf_i+0x1c4>
 8004e46:	0668      	lsls	r0, r5, #25
 8004e48:	d5fb      	bpl.n	8004e42 <_printf_i+0x1ba>
 8004e4a:	8019      	strh	r1, [r3, #0]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4616      	mov	r6, r2
 8004e50:	6123      	str	r3, [r4, #16]
 8004e52:	e7bc      	b.n	8004dce <_printf_i+0x146>
 8004e54:	6833      	ldr	r3, [r6, #0]
 8004e56:	2100      	movs	r1, #0
 8004e58:	1d1a      	adds	r2, r3, #4
 8004e5a:	6032      	str	r2, [r6, #0]
 8004e5c:	681e      	ldr	r6, [r3, #0]
 8004e5e:	6862      	ldr	r2, [r4, #4]
 8004e60:	4630      	mov	r0, r6
 8004e62:	f000 f907 	bl	8005074 <memchr>
 8004e66:	b108      	cbz	r0, 8004e6c <_printf_i+0x1e4>
 8004e68:	1b80      	subs	r0, r0, r6
 8004e6a:	6060      	str	r0, [r4, #4]
 8004e6c:	6863      	ldr	r3, [r4, #4]
 8004e6e:	6123      	str	r3, [r4, #16]
 8004e70:	2300      	movs	r3, #0
 8004e72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e76:	e7aa      	b.n	8004dce <_printf_i+0x146>
 8004e78:	4632      	mov	r2, r6
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	47d0      	blx	sl
 8004e82:	3001      	adds	r0, #1
 8004e84:	d0ad      	beq.n	8004de2 <_printf_i+0x15a>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	079b      	lsls	r3, r3, #30
 8004e8a:	d413      	bmi.n	8004eb4 <_printf_i+0x22c>
 8004e8c:	68e0      	ldr	r0, [r4, #12]
 8004e8e:	9b03      	ldr	r3, [sp, #12]
 8004e90:	4298      	cmp	r0, r3
 8004e92:	bfb8      	it	lt
 8004e94:	4618      	movlt	r0, r3
 8004e96:	e7a6      	b.n	8004de6 <_printf_i+0x15e>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	4632      	mov	r2, r6
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	47d0      	blx	sl
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d09d      	beq.n	8004de2 <_printf_i+0x15a>
 8004ea6:	3501      	adds	r5, #1
 8004ea8:	68e3      	ldr	r3, [r4, #12]
 8004eaa:	9903      	ldr	r1, [sp, #12]
 8004eac:	1a5b      	subs	r3, r3, r1
 8004eae:	42ab      	cmp	r3, r5
 8004eb0:	dcf2      	bgt.n	8004e98 <_printf_i+0x210>
 8004eb2:	e7eb      	b.n	8004e8c <_printf_i+0x204>
 8004eb4:	2500      	movs	r5, #0
 8004eb6:	f104 0619 	add.w	r6, r4, #25
 8004eba:	e7f5      	b.n	8004ea8 <_printf_i+0x220>
 8004ebc:	080052f4 	.word	0x080052f4
 8004ec0:	08005305 	.word	0x08005305

08004ec4 <__swbuf_r>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	460e      	mov	r6, r1
 8004ec8:	4614      	mov	r4, r2
 8004eca:	4605      	mov	r5, r0
 8004ecc:	b118      	cbz	r0, 8004ed6 <__swbuf_r+0x12>
 8004ece:	6a03      	ldr	r3, [r0, #32]
 8004ed0:	b90b      	cbnz	r3, 8004ed6 <__swbuf_r+0x12>
 8004ed2:	f7fe f9f1 	bl	80032b8 <__sinit>
 8004ed6:	69a3      	ldr	r3, [r4, #24]
 8004ed8:	60a3      	str	r3, [r4, #8]
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	071a      	lsls	r2, r3, #28
 8004ede:	d501      	bpl.n	8004ee4 <__swbuf_r+0x20>
 8004ee0:	6923      	ldr	r3, [r4, #16]
 8004ee2:	b943      	cbnz	r3, 8004ef6 <__swbuf_r+0x32>
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 f82a 	bl	8004f40 <__swsetup_r>
 8004eec:	b118      	cbz	r0, 8004ef6 <__swbuf_r+0x32>
 8004eee:	f04f 37ff 	mov.w	r7, #4294967295
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	6922      	ldr	r2, [r4, #16]
 8004efa:	b2f6      	uxtb	r6, r6
 8004efc:	1a98      	subs	r0, r3, r2
 8004efe:	6963      	ldr	r3, [r4, #20]
 8004f00:	4637      	mov	r7, r6
 8004f02:	4283      	cmp	r3, r0
 8004f04:	dc05      	bgt.n	8004f12 <__swbuf_r+0x4e>
 8004f06:	4621      	mov	r1, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f7ff fc81 	bl	8004810 <_fflush_r>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d1ed      	bne.n	8004eee <__swbuf_r+0x2a>
 8004f12:	68a3      	ldr	r3, [r4, #8]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	60a3      	str	r3, [r4, #8]
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	6022      	str	r2, [r4, #0]
 8004f1e:	701e      	strb	r6, [r3, #0]
 8004f20:	6962      	ldr	r2, [r4, #20]
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d004      	beq.n	8004f32 <__swbuf_r+0x6e>
 8004f28:	89a3      	ldrh	r3, [r4, #12]
 8004f2a:	07db      	lsls	r3, r3, #31
 8004f2c:	d5e1      	bpl.n	8004ef2 <__swbuf_r+0x2e>
 8004f2e:	2e0a      	cmp	r6, #10
 8004f30:	d1df      	bne.n	8004ef2 <__swbuf_r+0x2e>
 8004f32:	4621      	mov	r1, r4
 8004f34:	4628      	mov	r0, r5
 8004f36:	f7ff fc6b 	bl	8004810 <_fflush_r>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d0d9      	beq.n	8004ef2 <__swbuf_r+0x2e>
 8004f3e:	e7d6      	b.n	8004eee <__swbuf_r+0x2a>

08004f40 <__swsetup_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4b29      	ldr	r3, [pc, #164]	@ (8004fe8 <__swsetup_r+0xa8>)
 8004f44:	4605      	mov	r5, r0
 8004f46:	6818      	ldr	r0, [r3, #0]
 8004f48:	460c      	mov	r4, r1
 8004f4a:	b118      	cbz	r0, 8004f54 <__swsetup_r+0x14>
 8004f4c:	6a03      	ldr	r3, [r0, #32]
 8004f4e:	b90b      	cbnz	r3, 8004f54 <__swsetup_r+0x14>
 8004f50:	f7fe f9b2 	bl	80032b8 <__sinit>
 8004f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f58:	0719      	lsls	r1, r3, #28
 8004f5a:	d422      	bmi.n	8004fa2 <__swsetup_r+0x62>
 8004f5c:	06da      	lsls	r2, r3, #27
 8004f5e:	d407      	bmi.n	8004f70 <__swsetup_r+0x30>
 8004f60:	2209      	movs	r2, #9
 8004f62:	602a      	str	r2, [r5, #0]
 8004f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	e033      	b.n	8004fd8 <__swsetup_r+0x98>
 8004f70:	0758      	lsls	r0, r3, #29
 8004f72:	d512      	bpl.n	8004f9a <__swsetup_r+0x5a>
 8004f74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f76:	b141      	cbz	r1, 8004f8a <__swsetup_r+0x4a>
 8004f78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f7c:	4299      	cmp	r1, r3
 8004f7e:	d002      	beq.n	8004f86 <__swsetup_r+0x46>
 8004f80:	4628      	mov	r0, r5
 8004f82:	f7fe fad5 	bl	8003530 <_free_r>
 8004f86:	2300      	movs	r3, #0
 8004f88:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f90:	81a3      	strh	r3, [r4, #12]
 8004f92:	2300      	movs	r3, #0
 8004f94:	6063      	str	r3, [r4, #4]
 8004f96:	6923      	ldr	r3, [r4, #16]
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	f043 0308 	orr.w	r3, r3, #8
 8004fa0:	81a3      	strh	r3, [r4, #12]
 8004fa2:	6923      	ldr	r3, [r4, #16]
 8004fa4:	b94b      	cbnz	r3, 8004fba <__swsetup_r+0x7a>
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb0:	d003      	beq.n	8004fba <__swsetup_r+0x7a>
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f000 f890 	bl	80050da <__smakebuf_r>
 8004fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fbe:	f013 0201 	ands.w	r2, r3, #1
 8004fc2:	d00a      	beq.n	8004fda <__swsetup_r+0x9a>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	60a2      	str	r2, [r4, #8]
 8004fc8:	6962      	ldr	r2, [r4, #20]
 8004fca:	4252      	negs	r2, r2
 8004fcc:	61a2      	str	r2, [r4, #24]
 8004fce:	6922      	ldr	r2, [r4, #16]
 8004fd0:	b942      	cbnz	r2, 8004fe4 <__swsetup_r+0xa4>
 8004fd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fd6:	d1c5      	bne.n	8004f64 <__swsetup_r+0x24>
 8004fd8:	bd38      	pop	{r3, r4, r5, pc}
 8004fda:	0799      	lsls	r1, r3, #30
 8004fdc:	bf58      	it	pl
 8004fde:	6962      	ldrpl	r2, [r4, #20]
 8004fe0:	60a2      	str	r2, [r4, #8]
 8004fe2:	e7f4      	b.n	8004fce <__swsetup_r+0x8e>
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	e7f7      	b.n	8004fd8 <__swsetup_r+0x98>
 8004fe8:	20000188 	.word	0x20000188

08004fec <_raise_r>:
 8004fec:	291f      	cmp	r1, #31
 8004fee:	b538      	push	{r3, r4, r5, lr}
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	d904      	bls.n	8005000 <_raise_r+0x14>
 8004ff6:	2316      	movs	r3, #22
 8004ff8:	6003      	str	r3, [r0, #0]
 8004ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005002:	b112      	cbz	r2, 800500a <_raise_r+0x1e>
 8005004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005008:	b94b      	cbnz	r3, 800501e <_raise_r+0x32>
 800500a:	4628      	mov	r0, r5
 800500c:	f000 f830 	bl	8005070 <_getpid_r>
 8005010:	4622      	mov	r2, r4
 8005012:	4601      	mov	r1, r0
 8005014:	4628      	mov	r0, r5
 8005016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800501a:	f000 b817 	b.w	800504c <_kill_r>
 800501e:	2b01      	cmp	r3, #1
 8005020:	d00a      	beq.n	8005038 <_raise_r+0x4c>
 8005022:	1c59      	adds	r1, r3, #1
 8005024:	d103      	bne.n	800502e <_raise_r+0x42>
 8005026:	2316      	movs	r3, #22
 8005028:	6003      	str	r3, [r0, #0]
 800502a:	2001      	movs	r0, #1
 800502c:	e7e7      	b.n	8004ffe <_raise_r+0x12>
 800502e:	2100      	movs	r1, #0
 8005030:	4620      	mov	r0, r4
 8005032:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005036:	4798      	blx	r3
 8005038:	2000      	movs	r0, #0
 800503a:	e7e0      	b.n	8004ffe <_raise_r+0x12>

0800503c <raise>:
 800503c:	4b02      	ldr	r3, [pc, #8]	@ (8005048 <raise+0xc>)
 800503e:	4601      	mov	r1, r0
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	f7ff bfd3 	b.w	8004fec <_raise_r>
 8005046:	bf00      	nop
 8005048:	20000188 	.word	0x20000188

0800504c <_kill_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	2300      	movs	r3, #0
 8005050:	4d06      	ldr	r5, [pc, #24]	@ (800506c <_kill_r+0x20>)
 8005052:	4604      	mov	r4, r0
 8005054:	4608      	mov	r0, r1
 8005056:	4611      	mov	r1, r2
 8005058:	602b      	str	r3, [r5, #0]
 800505a:	f7fc fa42 	bl	80014e2 <_kill>
 800505e:	1c43      	adds	r3, r0, #1
 8005060:	d102      	bne.n	8005068 <_kill_r+0x1c>
 8005062:	682b      	ldr	r3, [r5, #0]
 8005064:	b103      	cbz	r3, 8005068 <_kill_r+0x1c>
 8005066:	6023      	str	r3, [r4, #0]
 8005068:	bd38      	pop	{r3, r4, r5, pc}
 800506a:	bf00      	nop
 800506c:	20000438 	.word	0x20000438

08005070 <_getpid_r>:
 8005070:	f7fc ba30 	b.w	80014d4 <_getpid>

08005074 <memchr>:
 8005074:	4603      	mov	r3, r0
 8005076:	b510      	push	{r4, lr}
 8005078:	b2c9      	uxtb	r1, r1
 800507a:	4402      	add	r2, r0
 800507c:	4293      	cmp	r3, r2
 800507e:	4618      	mov	r0, r3
 8005080:	d101      	bne.n	8005086 <memchr+0x12>
 8005082:	2000      	movs	r0, #0
 8005084:	e003      	b.n	800508e <memchr+0x1a>
 8005086:	7804      	ldrb	r4, [r0, #0]
 8005088:	3301      	adds	r3, #1
 800508a:	428c      	cmp	r4, r1
 800508c:	d1f6      	bne.n	800507c <memchr+0x8>
 800508e:	bd10      	pop	{r4, pc}

08005090 <__swhatbuf_r>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	460c      	mov	r4, r1
 8005094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005098:	4615      	mov	r5, r2
 800509a:	2900      	cmp	r1, #0
 800509c:	461e      	mov	r6, r3
 800509e:	b096      	sub	sp, #88	@ 0x58
 80050a0:	da0c      	bge.n	80050bc <__swhatbuf_r+0x2c>
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	2100      	movs	r1, #0
 80050a6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050aa:	bf14      	ite	ne
 80050ac:	2340      	movne	r3, #64	@ 0x40
 80050ae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050b2:	2000      	movs	r0, #0
 80050b4:	6031      	str	r1, [r6, #0]
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	b016      	add	sp, #88	@ 0x58
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	466a      	mov	r2, sp
 80050be:	f000 f849 	bl	8005154 <_fstat_r>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	dbed      	blt.n	80050a2 <__swhatbuf_r+0x12>
 80050c6:	9901      	ldr	r1, [sp, #4]
 80050c8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050cc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050d0:	4259      	negs	r1, r3
 80050d2:	4159      	adcs	r1, r3
 80050d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050d8:	e7eb      	b.n	80050b2 <__swhatbuf_r+0x22>

080050da <__smakebuf_r>:
 80050da:	898b      	ldrh	r3, [r1, #12]
 80050dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050de:	079d      	lsls	r5, r3, #30
 80050e0:	4606      	mov	r6, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	d507      	bpl.n	80050f6 <__smakebuf_r+0x1c>
 80050e6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	2301      	movs	r3, #1
 80050f0:	6163      	str	r3, [r4, #20]
 80050f2:	b003      	add	sp, #12
 80050f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050f6:	466a      	mov	r2, sp
 80050f8:	ab01      	add	r3, sp, #4
 80050fa:	f7ff ffc9 	bl	8005090 <__swhatbuf_r>
 80050fe:	9f00      	ldr	r7, [sp, #0]
 8005100:	4605      	mov	r5, r0
 8005102:	4639      	mov	r1, r7
 8005104:	4630      	mov	r0, r6
 8005106:	f7fe fdb7 	bl	8003c78 <_malloc_r>
 800510a:	b948      	cbnz	r0, 8005120 <__smakebuf_r+0x46>
 800510c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005110:	059a      	lsls	r2, r3, #22
 8005112:	d4ee      	bmi.n	80050f2 <__smakebuf_r+0x18>
 8005114:	f023 0303 	bic.w	r3, r3, #3
 8005118:	f043 0302 	orr.w	r3, r3, #2
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	e7e2      	b.n	80050e6 <__smakebuf_r+0xc>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	9b01      	ldr	r3, [sp, #4]
 800512e:	6020      	str	r0, [r4, #0]
 8005130:	b15b      	cbz	r3, 800514a <__smakebuf_r+0x70>
 8005132:	4630      	mov	r0, r6
 8005134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005138:	f000 f81e 	bl	8005178 <_isatty_r>
 800513c:	b128      	cbz	r0, 800514a <__smakebuf_r+0x70>
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	f023 0303 	bic.w	r3, r3, #3
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	81a3      	strh	r3, [r4, #12]
 800514a:	89a3      	ldrh	r3, [r4, #12]
 800514c:	431d      	orrs	r5, r3
 800514e:	81a5      	strh	r5, [r4, #12]
 8005150:	e7cf      	b.n	80050f2 <__smakebuf_r+0x18>
	...

08005154 <_fstat_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	2300      	movs	r3, #0
 8005158:	4d06      	ldr	r5, [pc, #24]	@ (8005174 <_fstat_r+0x20>)
 800515a:	4604      	mov	r4, r0
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	602b      	str	r3, [r5, #0]
 8005162:	f7fc fa1d 	bl	80015a0 <_fstat>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	d102      	bne.n	8005170 <_fstat_r+0x1c>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	b103      	cbz	r3, 8005170 <_fstat_r+0x1c>
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	bf00      	nop
 8005174:	20000438 	.word	0x20000438

08005178 <_isatty_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	2300      	movs	r3, #0
 800517c:	4d05      	ldr	r5, [pc, #20]	@ (8005194 <_isatty_r+0x1c>)
 800517e:	4604      	mov	r4, r0
 8005180:	4608      	mov	r0, r1
 8005182:	602b      	str	r3, [r5, #0]
 8005184:	f7fc fa1b 	bl	80015be <_isatty>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_isatty_r+0x1a>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	b103      	cbz	r3, 8005192 <_isatty_r+0x1a>
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	20000438 	.word	0x20000438

08005198 <_init>:
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519a:	bf00      	nop
 800519c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519e:	bc08      	pop	{r3}
 80051a0:	469e      	mov	lr, r3
 80051a2:	4770      	bx	lr

080051a4 <_fini>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	bf00      	nop
 80051a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051aa:	bc08      	pop	{r3}
 80051ac:	469e      	mov	lr, r3
 80051ae:	4770      	bx	lr
